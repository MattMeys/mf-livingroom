;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; User Info:
;
;       Shader does not use derivative ops
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 985875d85a0b46a1a08c04f4632941bc
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,1,1)
; WaveSize=8
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       uint StartClusterIndex;                       ; Offset:    0
;       uint NumClusters;                             ; Offset:    4
;       uint ZeroUniform;                             ; Offset:    8
;       uint4 PageConstants;                          ; Offset:   16
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for ClusterInstallInfoBuffer
; {
;
;   struct struct.FPackedClusterInstallInfo
;   {
;
;       uint LocalPageIndex_LocalClusterIndex;        ; Offset:    0
;       uint SrcPageOffset;                           ; Offset:    4
;       uint DstPageOffset;                           ; Offset:    8
;       uint PageDependenciesOffset;                  ; Offset:   12
;   
;   } $Element;                                       ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for PageDependenciesBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; ClusterInstallInfoBuffer          texture  struct         r/o      T0             t0     1
; PageDependenciesBuffer            texture  struct         r/o      T1             t1     1
; SrcPageBuffer                     texture    byte         r/o      T2             t2     1
; DstPageBuffer                         UAV    byte         r/w      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.fouri32 = type { i32, i32, i32, i32 }
%"class.StructuredBuffer<FPackedClusterInstallInfo>" = type { %struct.FPackedClusterInstallInfo }
%struct.FPackedClusterInstallInfo = type { i32, i32, i32, i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%struct.RWByteAddressBuffer = type { i32 }
%_RootShaderParameters = type { i32, i32, i32, <4 x i32> }

@"\01?GroupRefToVertex@@3PAIA" = external addrspace(3) global [256 x i32], align 4

define void @TranscodePageToGPU() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 13, i32 32 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %7 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %8 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  %9 = call i32 @dx.op.groupId.i32(i32 94, i32 2)  ; GroupId(component)
  %10 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %11 = shl i32 %9, 7
  %12 = add i32 %11, %8
  %13 = shl i32 %12, 7
  %14 = add i32 %13, %7
  %15 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %16 = extractvalue %dx.types.CBufRet.i32 %15, 1
  %17 = icmp ult i32 %14, %16
  br i1 %17, label %18, label %2676

; <label>:18                                      ; preds = %0
  %19 = extractvalue %dx.types.CBufRet.i32 %15, 0
  %20 = add i32 %19, %14
  %21 = call i32 @dx.op.waveGetLaneCount(i32 112)  ; WaveGetLaneCount()
  %22 = icmp ult i32 %10, %21
  br i1 %22, label %23, label %2676

; <label>:23                                      ; preds = %18
  %24 = call i32 @dx.op.binary.i32(i32 40, i32 %21, i32 8)  ; UMin(a,b)
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 524, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %26 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %25, i32 %20, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %27 = extractvalue %dx.types.ResRet.i32 %26, 0
  %28 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %25, i32 %20, i32 4, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %29 = extractvalue %dx.types.ResRet.i32 %28, 0
  %30 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %25, i32 %20, i32 8, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %31 = extractvalue %dx.types.ResRet.i32 %30, 0
  %32 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %25, i32 %20, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %33 = extractvalue %dx.types.ResRet.i32 %32, 0
  %34 = and i32 %27, 255
  %35 = extractvalue %dx.types.CBufRet.i32 %15, 2
  %36 = add i32 %35, %34
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %38 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %29, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %39 = extractvalue %dx.types.ResRet.i32 %38, 0
  %40 = extractvalue %dx.types.ResRet.i32 %38, 2
  %41 = extractvalue %dx.types.ResRet.i32 %38, 3
  %42 = add i32 %29, 16
  %43 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %42, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %44 = extractvalue %dx.types.ResRet.i32 %43, 1
  %45 = add i32 %29, 24
  %46 = mul i32 %39, 36
  %47 = mul i32 %36, 36
  %48 = add i32 %45, %47
  %49 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %48, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %50 = extractvalue %dx.types.ResRet.i32 %49, 1
  %51 = extractvalue %dx.types.ResRet.i32 %49, 2
  %52 = add i32 %48, 16
  %53 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %52, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %54 = extractvalue %dx.types.ResRet.i32 %53, 2
  %55 = shl i32 %39, 4
  %56 = shl i32 %36, 4
  %57 = add i32 %45, %56
  %58 = add i32 %57, %46
  %59 = add i32 %58, 16
  %60 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %59, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %61 = extractvalue %dx.types.ResRet.i32 %60, 0
  %62 = extractvalue %dx.types.ResRet.i32 %60, 2
  %63 = extractvalue %dx.types.ResRet.i32 %60, 3
  %64 = add i32 %55, 16
  %65 = add i32 %64, %58
  %66 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %65, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %67 = extractvalue %dx.types.ResRet.i32 %66, 0
  %68 = extractvalue %dx.types.ResRet.i32 %66, 1
  %69 = extractvalue %dx.types.ResRet.i32 %66, 2
  %70 = extractvalue %dx.types.ResRet.i32 %66, 3
  %71 = mul i32 %39, 80
  %72 = add i32 %71, 16
  %73 = add i32 %72, %58
  %74 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %37, i32 %73, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %75 = extractvalue %dx.types.ResRet.i32 %74, 0
  %76 = extractvalue %dx.types.ResRet.i32 %74, 1
  %77 = and i32 %61, 511
  %78 = lshr i32 %61, 9
  %79 = lshr i32 %70, 9
  %80 = and i32 %79, 31
  %81 = lshr i32 %70, 14
  %82 = and i32 %81, 31
  %83 = lshr i32 %70, 19
  %84 = and i32 %83, 31
  %85 = lshr i32 %70, 24
  %86 = and i32 %85, 15
  %87 = lshr i32 %70, 28
  %88 = and i32 %75, 4194303
  %89 = lshr i32 %75, 22
  %90 = and i32 %76, 4194304
  %91 = icmp ne i32 %90, 0
  %92 = lshr i32 %76, 23
  %93 = and i32 %92, 7
  %94 = lshr i32 %76, 26
  %95 = and i32 %94, 1
  %96 = shl i32 %36, 5
  %97 = icmp ult i32 %10, %77
  br i1 %97, label %98, label %124

; <label>:98                                      ; preds = %23
  br label %99

; <label>:99                                      ; preds = %118, %98
  %100 = phi i32 [ %120, %118 ], [ 0, %98 ]
  %101 = phi i32 [ %121, %118 ], [ %10, %98 ]
  %102 = lshr i32 %101, 5
  %103 = shl nuw nsw i32 %102, 2
  %104 = add i32 %96, %29
  %105 = add i32 %104, %44
  %106 = add i32 %105, %103
  %107 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %108 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %107, i32 %106, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %109 = extractvalue %dx.types.ResRet.i32 %108, 0
  %110 = and i32 %101, 31
  %111 = shl i32 1, %110
  %112 = and i32 %109, %111
  %113 = icmp ne i32 %112, 0
  %114 = call i32 @dx.op.wavePrefixOp(i32 136, i1 %113)  ; WavePrefixBitCount(value)
  br i1 %113, label %115, label %118

; <label>:115                                     ; preds = %99
  %116 = add i32 %114, %100
  %117 = getelementptr [256 x i32], [256 x i32] addrspace(3)* @"\01?GroupRefToVertex@@3PAIA", i32 0, i32 %116
  store i32 %101, i32 addrspace(3)* %117, align 4, !tbaa !20
  br label %118

; <label>:118                                     ; preds = %115, %99
  %119 = call i32 @dx.op.waveAllOp(i32 135, i1 %113)  ; WaveAllBitCount(value)
  %120 = add i32 %119, %100
  %121 = add i32 %101, %24
  %122 = icmp ult i32 %121, %77
  br i1 %122, label %99, label %123

; <label>:123                                     ; preds = %118
  br label %124

; <label>:124                                     ; preds = %123, %23
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %125 = icmp ult i32 %10, %54
  br i1 %125, label %126, label %2676

; <label>:126                                     ; preds = %124
  br label %127

; <label>:127                                     ; preds = %2672, %126
  %128 = phi i32 [ %179, %2672 ], [ 0, %126 ]
  %129 = phi i32 [ %180, %2672 ], [ 0, %126 ]
  %130 = phi i32 [ %181, %2672 ], [ 0, %126 ]
  %131 = phi i32 [ %182, %2672 ], [ 0, %126 ]
  %132 = phi i32 [ %2673, %2672 ], [ %10, %126 ]
  %133 = getelementptr [256 x i32], [256 x i32] addrspace(3)* @"\01?GroupRefToVertex@@3PAIA", i32 0, i32 %132
  %134 = load i32, i32 addrspace(3)* %133, align 4, !tbaa !20
  %135 = add i32 %51, %29
  %136 = add i32 %135, %132
  %137 = and i32 %136, -4
  %138 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %139 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %138, i32 %137, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %140 = extractvalue %dx.types.ResRet.i32 %139, 0
  %141 = shl i32 %136, 3
  %142 = and i32 %141, 24
  %143 = lshr i32 %140, %142
  %144 = add i32 %50, %29
  %145 = shl i32 %143, 2
  %146 = and i32 %145, 1020
  %147 = add i32 %144, %146
  %148 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %138, i32 %147, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %149 = extractvalue %dx.types.ResRet.i32 %148, 0
  %150 = lshr i32 %149, 8
  %151 = add i32 %40, %29
  %152 = add i32 %151, %51
  %153 = add i32 %152, %132
  %154 = and i32 %153, -4
  %155 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %138, i32 %154, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %156 = extractvalue %dx.types.ResRet.i32 %155, 0
  %157 = shl i32 %153, 3
  %158 = and i32 %157, 24
  %159 = lshr i32 %156, %158
  %160 = lshr i32 %159, 1
  %161 = and i32 %160, 127
  %162 = shl i32 %159, 31
  %163 = ashr exact i32 %162, 31
  %164 = xor i32 %161, %163
  %165 = call i32 @dx.op.wavePrefixOp.i32(i32 121, i32 %164, i8 0, i8 0)  ; WavePrefixOp(value,op,sop)
  %166 = add i32 %165, %128
  %167 = add i32 %166, %164
  %168 = call %dx.types.fouri32 @dx.op.waveActiveBallot(i32 116, i1 true)  ; WaveActiveBallot(cond)
  %169 = extractvalue %dx.types.fouri32 %168, 0
  %170 = extractvalue %dx.types.fouri32 %168, 1
  %171 = icmp ne i32 %170, 0
  %172 = select i1 %171, i32 %170, i32 %169
  %173 = call i32 @dx.op.unaryBits.i32(i32 33, i32 %172)  ; FirstbitHi(value)
  %174 = sub i32 31, %173
  %175 = icmp eq i32 %173, -1
  %176 = select i1 %175, i32 -1, i32 %174
  %177 = select i1 %171, i32 32, i32 0
  %178 = add i32 %176, %177
  %179 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %167, i32 %178)  ; WaveReadLaneAt(value,lane)
  %180 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %129, i32 %178)  ; WaveReadLaneAt(value,lane)
  %181 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %130, i32 %178)  ; WaveReadLaneAt(value,lane)
  %182 = call i32 @dx.op.waveReadLaneAt.i32(i32 117, i32 %131, i32 %178)  ; WaveReadLaneAt(value,lane)
  %183 = and i32 %167, 255
  %184 = icmp eq i32 %150, 0
  br i1 %184, label %199, label %185

; <label>:185                                     ; preds = %127
  %186 = add i32 %33, -1
  %187 = add i32 %186, %150
  %188 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %189 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %188, i32 %187, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %190 = extractvalue %dx.types.ResRet.i32 %189, 0
  %191 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %6, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %192 = extractvalue %dx.types.CBufRet.i32 %191, 1
  %193 = call i32 @dx.op.binary.i32(i32 40, i32 %190, i32 %192)  ; UMin(a,b)
  %194 = shl i32 %193, 17
  %195 = sub nsw i32 %190, %192
  %196 = call i32 @dx.op.binary.i32(i32 37, i32 %195, i32 0)  ; IMax(a,b)
  %197 = shl i32 %196, 15
  %198 = add i32 %197, %194
  br label %199

; <label>:199                                     ; preds = %185, %127
  %200 = phi i32 [ %198, %185 ], [ %31, %127 ]
  %201 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %202 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %201, i32 %200, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %203 = extractvalue %dx.types.ResRet.i32 %202, 0
  %204 = shl i32 %203, 4
  %205 = shl i32 %149, 4
  %206 = and i32 %205, 4080
  %207 = add i32 %200, %206
  %208 = add i32 %207, 16
  %209 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %201, i32 %208, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %210 = extractvalue %dx.types.ResRet.i32 %209, 0
  %211 = extractvalue %dx.types.ResRet.i32 %209, 2
  %212 = extractvalue %dx.types.ResRet.i32 %209, 3
  %213 = add i32 %208, %204
  %214 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %201, i32 %213, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %215 = extractvalue %dx.types.ResRet.i32 %214, 0
  %216 = extractvalue %dx.types.ResRet.i32 %214, 1
  %217 = extractvalue %dx.types.ResRet.i32 %214, 2
  %218 = extractvalue %dx.types.ResRet.i32 %214, 3
  %219 = mul i32 %203, 80
  %220 = add i32 %208, %219
  %221 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %201, i32 %220, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %222 = extractvalue %dx.types.ResRet.i32 %221, 0
  %223 = extractvalue %dx.types.ResRet.i32 %221, 1
  %224 = lshr i32 %210, 9
  %225 = lshr i32 %218, 9
  %226 = and i32 %225, 31
  %227 = lshr i32 %218, 14
  %228 = and i32 %227, 31
  %229 = lshr i32 %218, 19
  %230 = and i32 %229, 31
  %231 = and i32 %222, 4194303
  %232 = lshr i32 %222, 22
  %233 = and i32 %223, 4194303
  %234 = add nuw nsw i32 %226, %228
  %235 = add nuw nsw i32 %234, %230
  %236 = mul nuw nsw i32 %235, %183
  %237 = add i32 %224, %200
  %238 = lshr i32 %236, 5
  %239 = shl nuw nsw i32 %238, 2
  %240 = add i32 %237, %239
  %241 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %201, i32 %240, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %242 = extractvalue %dx.types.ResRet.i32 %241, 0
  %243 = extractvalue %dx.types.ResRet.i32 %241, 1
  %244 = extractvalue %dx.types.ResRet.i32 %241, 2
  %245 = and i32 %236, 31
  %246 = lshr i32 %242, %245
  %247 = icmp eq i32 %245, 0
  br i1 %247, label %252, label %248

; <label>:248                                     ; preds = %199
  %249 = sub nsw i32 0, %236
  %250 = and i32 %249, 31
  %251 = shl i32 %243, %250
  br label %252

; <label>:252                                     ; preds = %248, %199
  %253 = phi i32 [ %251, %248 ], [ 0, %199 ]
  %254 = or i32 %253, %246
  %255 = lshr i32 %243, %245
  br i1 %247, label %260, label %256

; <label>:256                                     ; preds = %252
  %257 = sub nsw i32 0, %236
  %258 = and i32 %257, 31
  %259 = shl i32 %244, %258
  br label %260

; <label>:260                                     ; preds = %256, %252
  %261 = phi i32 [ %259, %256 ], [ 0, %252 ]
  %262 = or i32 %261, %255
  %263 = shl i32 1, %226
  %264 = add i32 %263, -1
  %265 = and i32 %254, %264
  %266 = lshr i32 %254, %226
  %267 = icmp eq i32 %226, 0
  br i1 %267, label %272, label %268

; <label>:268                                     ; preds = %260
  %269 = sub nsw i32 0, %225
  %270 = and i32 %269, 31
  %271 = shl i32 %262, %270
  br label %272

; <label>:272                                     ; preds = %268, %260
  %273 = phi i32 [ %271, %268 ], [ 0, %260 ]
  %274 = or i32 %273, %266
  %275 = shl i32 1, %228
  %276 = add i32 %275, -1
  %277 = and i32 %274, %276
  %278 = lshr i32 %274, %228
  %279 = icmp eq i32 %228, 0
  br i1 %279, label %285, label %280

; <label>:280                                     ; preds = %272
  %281 = lshr i32 %262, %226
  %282 = sub nsw i32 0, %227
  %283 = and i32 %282, 31
  %284 = shl i32 %281, %283
  br label %285

; <label>:285                                     ; preds = %280, %272
  %286 = phi i32 [ %284, %280 ], [ 0, %272 ]
  %287 = or i32 %286, %278
  %288 = shl i32 1, %230
  %289 = add i32 %288, -1
  %290 = and i32 %287, %289
  %291 = sub i32 %215, %67
  %292 = add i32 %291, %265
  %293 = sub i32 %216, %68
  %294 = add i32 %293, %277
  %295 = sub i32 %217, %69
  %296 = add i32 %295, %290
  %297 = add nuw nsw i32 %80, %82
  %298 = add nuw nsw i32 %297, %84
  %299 = mul i32 %134, %298
  %300 = add i32 %78, %31
  %301 = lshr i32 %299, 5
  %302 = shl nuw nsw i32 %301, 2
  %303 = add i32 %300, %302
  %304 = and i32 %299, 31
  %305 = add i32 %303, 4
  %306 = shl i32 %292, %304
  %307 = add nuw nsw i32 %304, %80
  %308 = icmp ugt i32 %307, 31
  br i1 %308, label %309, label %313

; <label>:309                                     ; preds = %285
  %310 = sub i32 0, %299
  %311 = and i32 %310, 31
  %312 = lshr i32 %292, %311
  br label %313

; <label>:313                                     ; preds = %309, %285
  %314 = phi i32 [ %312, %309 ], [ 0, %285 ]
  %315 = add i32 %299, %79
  %316 = and i32 %315, 31
  %317 = shl i32 %294, %316
  %318 = select i1 %308, i32 %317, i32 0
  %319 = or i32 %314, %318
  %320 = select i1 %308, i32 0, i32 %317
  %321 = or i32 %320, %306
  %322 = add nuw nsw i32 %307, %82
  %323 = xor i32 %322, %307
  %324 = icmp ugt i32 %323, 31
  br i1 %324, label %325, label %333

; <label>:325                                     ; preds = %313
  br i1 %308, label %326, label %328

; <label>:326                                     ; preds = %325
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %201, i32 %305, i32 undef, i32 %319, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %327 = add i32 %303, 8
  br label %328

; <label>:328                                     ; preds = %326, %325
  %329 = phi i32 [ %327, %326 ], [ %305, %325 ]
  %330 = sub nsw i32 0, %307
  %331 = and i32 %330, 31
  %332 = lshr i32 %294, %331
  br label %333

; <label>:333                                     ; preds = %328, %313
  %334 = phi i32 [ %332, %328 ], [ %319, %313 ]
  %335 = phi i32 [ %329, %328 ], [ %305, %313 ]
  %336 = add nuw nsw i32 %307, %81
  %337 = and i32 %336, 31
  %338 = shl i32 %296, %337
  %339 = icmp ugt i32 %322, 31
  %340 = select i1 %339, i32 %338, i32 0
  %341 = or i32 %334, %340
  %342 = select i1 %339, i32 0, i32 %338
  %343 = or i32 %321, %342
  %344 = add nuw nsw i32 %322, %84
  %345 = xor i32 %344, %322
  %346 = icmp ugt i32 %345, 31
  br i1 %346, label %347, label %356

; <label>:347                                     ; preds = %333
  br i1 %339, label %348, label %351

; <label>:348                                     ; preds = %347
  %349 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %349, i32 %335, i32 undef, i32 %341, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %350 = add i32 %335, 4
  br label %351

; <label>:351                                     ; preds = %348, %347
  %352 = phi i32 [ %350, %348 ], [ %335, %347 ]
  %353 = sub nsw i32 0, %322
  %354 = and i32 %353, 31
  %355 = lshr i32 %296, %354
  br label %356

; <label>:356                                     ; preds = %351, %333
  %357 = phi i32 [ %355, %351 ], [ %341, %333 ]
  %358 = phi i32 [ %352, %351 ], [ %335, %333 ]
  %359 = sub nsw i32 %344, %304
  %360 = icmp ugt i32 %359, 31
  br i1 %360, label %365, label %361

; <label>:361                                     ; preds = %356
  %362 = and i32 %359, 31
  %363 = shl i32 1, %362
  %364 = add i32 %363, -1
  br label %365

; <label>:365                                     ; preds = %361, %356
  %366 = phi i32 [ %364, %361 ], [ -1, %356 ]
  %367 = shl i32 %366, %304
  %368 = xor i32 %367, -1
  %369 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %370 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %369, i32 1, i32 %303, i32 undef, i32 undef, i32 %368)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %371 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %372 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %371, i32 2, i32 %303, i32 undef, i32 undef, i32 %343)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %373 = icmp ugt i32 %344, 32
  br i1 %373, label %374, label %382

; <label>:374                                     ; preds = %365
  %375 = add nuw nsw i32 %322, %83
  %376 = and i32 %375, 31
  %377 = shl i32 -1, %376
  %378 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %379 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %378, i32 1, i32 %358, i32 undef, i32 undef, i32 %377)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %380 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %381 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %380, i32 2, i32 %358, i32 undef, i32 undef, i32 %357)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %382

; <label>:382                                     ; preds = %374, %365
  %383 = icmp eq i32 %93, 0
  br i1 %383, label %384, label %601

; <label>:384                                     ; preds = %382
  %385 = mul i32 %134, %89
  %386 = add i32 %88, %31
  %387 = lshr i32 %385, 5
  %388 = shl nuw nsw i32 %387, 2
  %389 = add i32 %386, %388
  %390 = and i32 %385, 31
  %391 = add i32 %389, 4
  %392 = mul nuw nsw i32 %232, %183
  %393 = add i32 %231, %200
  %394 = shl nuw nsw i32 %86, 1
  %395 = lshr i32 %392, 5
  %396 = shl nuw nsw i32 %395, 2
  %397 = add i32 %393, %396
  %398 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %399 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %398, i32 %397, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %400 = extractvalue %dx.types.ResRet.i32 %399, 0
  %401 = extractvalue %dx.types.ResRet.i32 %399, 1
  %402 = extractvalue %dx.types.ResRet.i32 %399, 2
  %403 = extractvalue %dx.types.ResRet.i32 %399, 3
  %404 = and i32 %392, 31
  %405 = lshr i32 %400, %404
  %406 = icmp eq i32 %404, 0
  br i1 %406, label %411, label %407

; <label>:407                                     ; preds = %384
  %408 = sub nsw i32 0, %392
  %409 = and i32 %408, 31
  %410 = shl i32 %401, %409
  br label %411

; <label>:411                                     ; preds = %407, %384
  %412 = phi i32 [ %410, %407 ], [ 0, %384 ]
  %413 = or i32 %412, %405
  %414 = lshr i32 %401, %404
  br i1 %406, label %419, label %415

; <label>:415                                     ; preds = %411
  %416 = sub nsw i32 0, %392
  %417 = and i32 %416, 31
  %418 = shl i32 %402, %417
  br label %419

; <label>:419                                     ; preds = %415, %411
  %420 = phi i32 [ %418, %415 ], [ 0, %411 ]
  %421 = or i32 %420, %414
  %422 = lshr i32 %402, %404
  br i1 %406, label %427, label %423

; <label>:423                                     ; preds = %419
  %424 = sub nsw i32 0, %392
  %425 = and i32 %424, 31
  %426 = shl i32 %403, %425
  br label %427

; <label>:427                                     ; preds = %423, %419
  %428 = phi i32 [ %426, %423 ], [ 0, %419 ]
  %429 = or i32 %428, %422
  %430 = shl i32 1, %394
  %431 = add i32 %430, -1
  %432 = and i32 %413, %431
  %433 = shl i32 %432, %390
  %434 = add nuw nsw i32 %390, %394
  %435 = icmp ugt i32 %434, 31
  br i1 %435, label %436, label %440

; <label>:436                                     ; preds = %427
  %437 = sub i32 0, %385
  %438 = and i32 %437, 31
  %439 = lshr i32 %432, %438
  br label %440

; <label>:440                                     ; preds = %436, %427
  %441 = phi i32 [ %439, %436 ], [ 0, %427 ]
  %442 = add nuw nsw i32 %87, 1
  %443 = select i1 %91, i32 %442, i32 0
  %444 = lshr i32 %413, %394
  %445 = icmp eq i32 %86, 0
  br i1 %445, label %450, label %446

; <label>:446                                     ; preds = %440
  %447 = sub nsw i32 0, %394
  %448 = and i32 %447, 30
  %449 = shl i32 %421, %448
  br label %450

; <label>:450                                     ; preds = %446, %440
  %451 = phi i32 [ %449, %446 ], [ 0, %440 ]
  %452 = or i32 %451, %444
  %453 = lshr i32 %421, %394
  br i1 %445, label %458, label %454

; <label>:454                                     ; preds = %450
  %455 = sub nsw i32 0, %394
  %456 = and i32 %455, 30
  %457 = shl i32 %429, %456
  br label %458

; <label>:458                                     ; preds = %454, %450
  %459 = phi i32 [ %457, %454 ], [ 0, %450 ]
  %460 = or i32 %459, %453
  %461 = shl i32 1, %443
  %462 = add i32 %461, -1
  %463 = and i32 %452, %462
  %464 = add i32 %385, %394
  %465 = and i32 %464, 31
  %466 = shl i32 %463, %465
  %467 = select i1 %435, i32 %466, i32 0
  %468 = or i32 %467, %441
  %469 = select i1 %435, i32 0, i32 %466
  %470 = or i32 %469, %433
  %471 = add nuw nsw i32 %434, %443
  %472 = xor i32 %471, %434
  %473 = icmp ugt i32 %472, 31
  br i1 %473, label %474, label %482

; <label>:474                                     ; preds = %458
  br i1 %435, label %475, label %477

; <label>:475                                     ; preds = %474
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %398, i32 %391, i32 undef, i32 %468, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %476 = add i32 %389, 8
  br label %477

; <label>:477                                     ; preds = %475, %474
  %478 = phi i32 [ %476, %475 ], [ %391, %474 ]
  %479 = sub nsw i32 0, %434
  %480 = and i32 %479, 31
  %481 = lshr i32 %463, %480
  br label %482

; <label>:482                                     ; preds = %477, %458
  %483 = phi i32 [ %481, %477 ], [ %468, %458 ]
  %484 = phi i32 [ %478, %477 ], [ %391, %458 ]
  %485 = and i32 %212, 15
  %486 = lshr i32 %212, 4
  %487 = and i32 %486, 15
  %488 = lshr i32 %212, 8
  %489 = and i32 %488, 15
  %490 = lshr i32 %212, 12
  %491 = and i32 %490, 15
  %492 = lshr i32 %452, %443
  %493 = shl i32 1, %485
  %494 = add i32 %493, -1
  %495 = and i32 %492, %494
  %496 = add nuw nsw i32 %485, %443
  %497 = and i32 %496, 31
  %498 = lshr i32 %452, %497
  %499 = shl i32 1, %487
  %500 = add i32 %499, 16777215
  %501 = and i32 %498, %500
  %502 = add nuw nsw i32 %496, %487
  %503 = and i32 %502, 31
  %504 = lshr i32 %452, %503
  %505 = icmp eq i32 %503, 0
  br i1 %505, label %510, label %506

; <label>:506                                     ; preds = %482
  %507 = sub nsw i32 0, %502
  %508 = and i32 %507, 31
  %509 = shl i32 %460, %508
  br label %510

; <label>:510                                     ; preds = %506, %482
  %511 = phi i32 [ %509, %506 ], [ 0, %482 ]
  %512 = or i32 %511, %504
  %513 = icmp eq i32 %95, 0
  br i1 %513, label %574, label %514

; <label>:514                                     ; preds = %510
  %515 = shl i32 1, %489
  %516 = add i32 %515, 65535
  %517 = and i32 %512, %516
  %518 = lshr i32 %512, %489
  %519 = shl i32 1, %491
  %520 = add i32 %519, 255
  %521 = and i32 %518, %520
  %522 = shl i32 %501, 8
  %523 = or i32 %522, %495
  %524 = shl i32 %517, 16
  %525 = or i32 %523, %524
  %526 = shl i32 %521, 24
  %527 = or i32 %525, %526
  %528 = and i32 %63, 15
  %529 = lshr i32 %63, 4
  %530 = and i32 %529, 15
  %531 = lshr i32 %63, 8
  %532 = and i32 %531, 15
  %533 = lshr i32 %63, 12
  %534 = and i32 %533, 15
  %535 = sub i32 %211, %62
  %536 = add i32 %535, %527
  %537 = and i32 %536, 255
  %538 = lshr i32 %536, 8
  %539 = and i32 %538, 255
  %540 = shl i32 %539, %528
  %541 = lshr i32 %536, 16
  %542 = and i32 %541, 255
  %543 = add nuw nsw i32 %530, %528
  %544 = shl i32 %542, %543
  %545 = lshr i32 %536, 24
  %546 = add nuw nsw i32 %543, %532
  %547 = and i32 %546, 31
  %548 = shl i32 %545, %547
  %549 = or i32 %548, %537
  %550 = or i32 %549, %540
  %551 = or i32 %550, %544
  %552 = add nuw nsw i32 %546, %534
  %553 = and i32 %471, 31
  %554 = shl i32 %551, %553
  %555 = icmp ugt i32 %471, 31
  %556 = select i1 %555, i32 %554, i32 0
  %557 = or i32 %556, %483
  %558 = select i1 %555, i32 0, i32 %554
  %559 = or i32 %558, %470
  %560 = add nuw nsw i32 %552, %471
  %561 = xor i32 %560, %471
  %562 = icmp ugt i32 %561, 31
  br i1 %562, label %563, label %574

; <label>:563                                     ; preds = %514
  br i1 %555, label %564, label %567

; <label>:564                                     ; preds = %563
  %565 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %565, i32 %484, i32 undef, i32 %557, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %566 = add i32 %484, 4
  br label %567

; <label>:567                                     ; preds = %564, %563
  %568 = phi i32 [ %566, %564 ], [ %484, %563 ]
  %569 = icmp eq i32 %553, 0
  br i1 %569, label %574, label %570

; <label>:570                                     ; preds = %567
  %571 = sub nsw i32 0, %471
  %572 = and i32 %571, 31
  %573 = lshr i32 %551, %572
  br label %574

; <label>:574                                     ; preds = %570, %567, %514, %510
  %575 = phi i32 [ %483, %510 ], [ %557, %514 ], [ %573, %570 ], [ 0, %567 ]
  %576 = phi i32 [ %471, %510 ], [ %560, %514 ], [ %560, %570 ], [ %560, %567 ]
  %577 = phi i32 [ %484, %510 ], [ %484, %514 ], [ %568, %570 ], [ %568, %567 ]
  %578 = phi i32 [ %470, %510 ], [ %559, %514 ], [ %559, %570 ], [ %559, %567 ]
  %579 = sub nsw i32 %576, %390
  %580 = icmp ugt i32 %579, 31
  br i1 %580, label %585, label %581

; <label>:581                                     ; preds = %574
  %582 = and i32 %579, 31
  %583 = shl i32 1, %582
  %584 = add i32 %583, -1
  br label %585

; <label>:585                                     ; preds = %581, %574
  %586 = phi i32 [ %584, %581 ], [ -1, %574 ]
  %587 = shl i32 %586, %390
  %588 = xor i32 %587, -1
  %589 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %590 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %589, i32 1, i32 %389, i32 undef, i32 undef, i32 %588)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %591 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %592 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %591, i32 2, i32 %389, i32 undef, i32 undef, i32 %578)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %593 = icmp ugt i32 %576, 32
  br i1 %593, label %594, label %2672

; <label>:594                                     ; preds = %585
  %595 = and i32 %576, 31
  %596 = shl i32 -1, %595
  %597 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %598 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %597, i32 1, i32 %577, i32 undef, i32 undef, i32 %596)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %599 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %600 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %599, i32 2, i32 %577, i32 undef, i32 undef, i32 %575)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %2672

; <label>:601                                     ; preds = %382
  %602 = icmp eq i32 %93, 1
  br i1 %602, label %603, label %943

; <label>:603                                     ; preds = %601
  %604 = mul i32 %134, %89
  %605 = add i32 %88, %31
  %606 = lshr i32 %604, 5
  %607 = shl nuw nsw i32 %606, 2
  %608 = add i32 %605, %607
  %609 = and i32 %604, 31
  %610 = add i32 %608, 4
  %611 = mul nuw nsw i32 %232, %183
  %612 = add i32 %231, %200
  %613 = shl nuw nsw i32 %86, 1
  %614 = lshr i32 %611, 5
  %615 = shl nuw nsw i32 %614, 2
  %616 = add i32 %615, %612
  %617 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %618 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %617, i32 %616, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %619 = extractvalue %dx.types.ResRet.i32 %618, 0
  %620 = extractvalue %dx.types.ResRet.i32 %618, 1
  %621 = extractvalue %dx.types.ResRet.i32 %618, 2
  %622 = extractvalue %dx.types.ResRet.i32 %618, 3
  %623 = and i32 %611, 31
  %624 = lshr i32 %619, %623
  %625 = icmp eq i32 %623, 0
  br i1 %625, label %630, label %626

; <label>:626                                     ; preds = %603
  %627 = sub nsw i32 0, %611
  %628 = and i32 %627, 31
  %629 = shl i32 %620, %628
  br label %630

; <label>:630                                     ; preds = %626, %603
  %631 = phi i32 [ %629, %626 ], [ 0, %603 ]
  %632 = or i32 %631, %624
  %633 = lshr i32 %620, %623
  br i1 %625, label %638, label %634

; <label>:634                                     ; preds = %630
  %635 = sub nsw i32 0, %611
  %636 = and i32 %635, 31
  %637 = shl i32 %621, %636
  br label %638

; <label>:638                                     ; preds = %634, %630
  %639 = phi i32 [ %637, %634 ], [ 0, %630 ]
  %640 = or i32 %639, %633
  %641 = lshr i32 %621, %623
  br i1 %625, label %646, label %642

; <label>:642                                     ; preds = %638
  %643 = sub nsw i32 0, %611
  %644 = and i32 %643, 31
  %645 = shl i32 %622, %644
  br label %646

; <label>:646                                     ; preds = %642, %638
  %647 = phi i32 [ %645, %642 ], [ 0, %638 ]
  %648 = or i32 %647, %641
  %649 = lshr i32 %622, %623
  %650 = shl i32 1, %613
  %651 = add i32 %650, -1
  %652 = and i32 %632, %651
  %653 = shl i32 %652, %609
  %654 = add nuw nsw i32 %609, %613
  %655 = icmp ugt i32 %654, 31
  br i1 %655, label %656, label %660

; <label>:656                                     ; preds = %646
  %657 = sub i32 0, %604
  %658 = and i32 %657, 31
  %659 = lshr i32 %652, %658
  br label %660

; <label>:660                                     ; preds = %656, %646
  %661 = phi i32 [ %659, %656 ], [ 0, %646 ]
  %662 = add nuw nsw i32 %87, 1
  %663 = select i1 %91, i32 %662, i32 0
  %664 = lshr i32 %632, %613
  %665 = icmp eq i32 %86, 0
  br i1 %665, label %670, label %666

; <label>:666                                     ; preds = %660
  %667 = sub nsw i32 0, %613
  %668 = and i32 %667, 30
  %669 = shl i32 %640, %668
  br label %670

; <label>:670                                     ; preds = %666, %660
  %671 = phi i32 [ %669, %666 ], [ 0, %660 ]
  %672 = or i32 %671, %664
  %673 = lshr i32 %640, %613
  br i1 %665, label %678, label %674

; <label>:674                                     ; preds = %670
  %675 = sub nsw i32 0, %613
  %676 = and i32 %675, 30
  %677 = shl i32 %648, %676
  br label %678

; <label>:678                                     ; preds = %674, %670
  %679 = phi i32 [ %677, %674 ], [ 0, %670 ]
  %680 = or i32 %679, %673
  %681 = lshr i32 %648, %613
  br i1 %665, label %686, label %682

; <label>:682                                     ; preds = %678
  %683 = sub nsw i32 0, %613
  %684 = and i32 %683, 30
  %685 = shl i32 %649, %684
  br label %686

; <label>:686                                     ; preds = %682, %678
  %687 = phi i32 [ %685, %682 ], [ 0, %678 ]
  %688 = or i32 %687, %681
  %689 = shl i32 1, %663
  %690 = add i32 %689, -1
  %691 = and i32 %672, %690
  %692 = add i32 %604, %613
  %693 = and i32 %692, 31
  %694 = shl i32 %691, %693
  %695 = select i1 %655, i32 %694, i32 0
  %696 = or i32 %695, %661
  %697 = select i1 %655, i32 0, i32 %694
  %698 = or i32 %697, %653
  %699 = add nuw nsw i32 %654, %663
  %700 = xor i32 %699, %654
  %701 = icmp ugt i32 %700, 31
  br i1 %701, label %702, label %710

; <label>:702                                     ; preds = %686
  br i1 %655, label %703, label %705

; <label>:703                                     ; preds = %702
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %617, i32 %610, i32 undef, i32 %696, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %704 = add i32 %608, 8
  br label %705

; <label>:705                                     ; preds = %703, %702
  %706 = phi i32 [ %704, %703 ], [ %610, %702 ]
  %707 = sub nsw i32 0, %654
  %708 = and i32 %707, 31
  %709 = lshr i32 %691, %708
  br label %710

; <label>:710                                     ; preds = %705, %686
  %711 = phi i32 [ %709, %705 ], [ %696, %686 ]
  %712 = phi i32 [ %706, %705 ], [ %610, %686 ]
  %713 = and i32 %212, 15
  %714 = lshr i32 %212, 4
  %715 = and i32 %714, 15
  %716 = lshr i32 %212, 8
  %717 = and i32 %716, 15
  %718 = lshr i32 %212, 12
  %719 = and i32 %718, 15
  %720 = lshr i32 %672, %663
  %721 = shl i32 1, %713
  %722 = add i32 %721, -1
  %723 = and i32 %720, %722
  %724 = add nuw nsw i32 %713, %663
  %725 = and i32 %724, 31
  %726 = lshr i32 %672, %725
  %727 = shl i32 1, %715
  %728 = add i32 %727, 16777215
  %729 = and i32 %726, %728
  %730 = add nuw nsw i32 %724, %715
  %731 = and i32 %730, 31
  %732 = lshr i32 %672, %731
  %733 = icmp eq i32 %731, 0
  br i1 %733, label %738, label %734

; <label>:734                                     ; preds = %710
  %735 = sub nsw i32 0, %730
  %736 = and i32 %735, 31
  %737 = shl i32 %680, %736
  br label %738

; <label>:738                                     ; preds = %734, %710
  %739 = phi i32 [ %737, %734 ], [ 0, %710 ]
  %740 = or i32 %739, %732
  %741 = lshr i32 %680, %731
  br i1 %733, label %746, label %742

; <label>:742                                     ; preds = %738
  %743 = sub nsw i32 0, %730
  %744 = and i32 %743, 31
  %745 = shl i32 %688, %744
  br label %746

; <label>:746                                     ; preds = %742, %738
  %747 = phi i32 [ %745, %742 ], [ 0, %738 ]
  %748 = or i32 %747, %741
  %749 = add nuw nsw i32 %717, %719
  %750 = icmp eq i32 %95, 0
  br i1 %750, label %811, label %751

; <label>:751                                     ; preds = %746
  %752 = shl i32 1, %717
  %753 = add i32 %752, 65535
  %754 = and i32 %740, %753
  %755 = lshr i32 %740, %717
  %756 = shl i32 1, %719
  %757 = add i32 %756, 255
  %758 = and i32 %755, %757
  %759 = shl i32 %729, 8
  %760 = or i32 %759, %723
  %761 = shl i32 %754, 16
  %762 = or i32 %760, %761
  %763 = shl i32 %758, 24
  %764 = or i32 %762, %763
  %765 = and i32 %63, 15
  %766 = lshr i32 %63, 4
  %767 = and i32 %766, 15
  %768 = lshr i32 %63, 8
  %769 = and i32 %768, 15
  %770 = lshr i32 %63, 12
  %771 = and i32 %770, 15
  %772 = sub i32 %211, %62
  %773 = add i32 %772, %764
  %774 = and i32 %773, 255
  %775 = lshr i32 %773, 8
  %776 = and i32 %775, 255
  %777 = shl i32 %776, %765
  %778 = lshr i32 %773, 16
  %779 = and i32 %778, 255
  %780 = add nuw nsw i32 %767, %765
  %781 = shl i32 %779, %780
  %782 = lshr i32 %773, 24
  %783 = add nuw nsw i32 %780, %769
  %784 = and i32 %783, 31
  %785 = shl i32 %782, %784
  %786 = or i32 %785, %774
  %787 = or i32 %786, %777
  %788 = or i32 %787, %781
  %789 = add nuw nsw i32 %783, %771
  %790 = and i32 %699, 31
  %791 = shl i32 %788, %790
  %792 = icmp ugt i32 %699, 31
  %793 = select i1 %792, i32 %791, i32 0
  %794 = or i32 %793, %711
  %795 = select i1 %792, i32 0, i32 %791
  %796 = or i32 %795, %698
  %797 = add nuw nsw i32 %789, %699
  %798 = xor i32 %797, %699
  %799 = icmp ugt i32 %798, 31
  br i1 %799, label %800, label %811

; <label>:800                                     ; preds = %751
  br i1 %792, label %801, label %804

; <label>:801                                     ; preds = %800
  %802 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %802, i32 %712, i32 undef, i32 %794, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %803 = add i32 %712, 4
  br label %804

; <label>:804                                     ; preds = %801, %800
  %805 = phi i32 [ %803, %801 ], [ %712, %800 ]
  %806 = icmp eq i32 %790, 0
  br i1 %806, label %811, label %807

; <label>:807                                     ; preds = %804
  %808 = sub nsw i32 0, %699
  %809 = and i32 %808, 31
  %810 = lshr i32 %788, %809
  br label %811

; <label>:811                                     ; preds = %807, %804, %751, %746
  %812 = phi i32 [ 0, %804 ], [ %810, %807 ], [ %794, %751 ], [ %711, %746 ]
  %813 = phi i32 [ %797, %804 ], [ %797, %807 ], [ %797, %751 ], [ %699, %746 ]
  %814 = phi i32 [ %805, %804 ], [ %805, %807 ], [ %712, %751 ], [ %712, %746 ]
  %815 = phi i32 [ %796, %804 ], [ %796, %807 ], [ %796, %751 ], [ %698, %746 ]
  %816 = add i32 %233, %200
  %817 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %818 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %817, i32 %816, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %819 = extractvalue %dx.types.ResRet.i32 %818, 0
  %820 = extractvalue %dx.types.ResRet.i32 %818, 1
  %821 = and i32 %819, 31
  %822 = lshr i32 %819, 5
  %823 = and i32 %820, 31
  %824 = lshr i32 %820, 5
  %825 = shl i32 %36, 3
  %826 = add i32 %825, %29
  %827 = add i32 %826, %41
  %828 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %829 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %828, i32 %827, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %830 = extractvalue %dx.types.ResRet.i32 %829, 0
  %831 = extractvalue %dx.types.ResRet.i32 %829, 1
  %832 = and i32 %830, 31
  %833 = lshr i32 %830, 5
  %834 = and i32 %831, 31
  %835 = lshr i32 %831, 5
  %836 = add nuw nsw i32 %730, %613
  %837 = add nuw nsw i32 %836, %749
  %838 = add i32 %837, %611
  %839 = lshr i32 %740, %749
  %840 = icmp eq i32 %749, 0
  br i1 %840, label %845, label %841

; <label>:841                                     ; preds = %811
  %842 = sub nsw i32 0, %749
  %843 = and i32 %842, 31
  %844 = shl i32 %748, %843
  br label %845

; <label>:845                                     ; preds = %841, %811
  %846 = phi i32 [ %844, %841 ], [ 0, %811 ]
  %847 = or i32 %846, %839
  %848 = shl i32 1, %821
  %849 = add i32 %848, -1
  %850 = and i32 %847, %849
  %851 = add nsw i32 %821, %838
  %852 = ashr i32 %851, 5
  %853 = shl nsw i32 %852, 2
  %854 = add i32 %853, %612
  %855 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %817, i32 %854, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %856 = extractvalue %dx.types.ResRet.i32 %855, 0
  %857 = add i32 %819, %838
  %858 = and i32 %857, 31
  %859 = lshr i32 %856, %858
  %860 = icmp eq i32 %858, 0
  br i1 %860, label %866, label %861

; <label>:861                                     ; preds = %845
  %862 = extractvalue %dx.types.ResRet.i32 %855, 1
  %863 = sub i32 0, %857
  %864 = and i32 %863, 31
  %865 = shl i32 %862, %864
  br label %866

; <label>:866                                     ; preds = %861, %845
  %867 = phi i32 [ %865, %861 ], [ 0, %845 ]
  %868 = or i32 %867, %859
  %869 = shl i32 1, %823
  %870 = add i32 %869, -1
  %871 = and i32 %868, %870
  %872 = sub nsw i32 %822, %833
  %873 = add i32 %872, %850
  %874 = sub nsw i32 %824, %835
  %875 = add i32 %874, %871
  %876 = and i32 %813, 31
  %877 = shl i32 %873, %876
  %878 = icmp ugt i32 %813, 31
  %879 = select i1 %878, i32 %877, i32 0
  %880 = or i32 %879, %812
  %881 = select i1 %878, i32 0, i32 %877
  %882 = or i32 %881, %815
  %883 = add nsw i32 %832, %813
  %884 = xor i32 %883, %813
  %885 = icmp ugt i32 %884, 31
  br i1 %885, label %886, label %894

; <label>:886                                     ; preds = %866
  br i1 %878, label %887, label %889

; <label>:887                                     ; preds = %886
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %817, i32 %814, i32 undef, i32 %880, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %888 = add i32 %814, 4
  br label %889

; <label>:889                                     ; preds = %887, %886
  %890 = phi i32 [ %888, %887 ], [ %814, %886 ]
  %891 = sub nsw i32 0, %813
  %892 = and i32 %891, 31
  %893 = lshr i32 %873, %892
  br label %894

; <label>:894                                     ; preds = %889, %866
  %895 = phi i32 [ %893, %889 ], [ %880, %866 ]
  %896 = phi i32 [ %890, %889 ], [ %814, %866 ]
  %897 = add i32 %830, %813
  %898 = and i32 %897, 31
  %899 = shl i32 %875, %898
  %900 = icmp ugt i32 %883, 31
  %901 = select i1 %900, i32 %899, i32 0
  %902 = or i32 %895, %901
  %903 = select i1 %900, i32 0, i32 %899
  %904 = or i32 %882, %903
  %905 = add i32 %883, %834
  %906 = xor i32 %905, %883
  %907 = icmp ugt i32 %906, 31
  br i1 %907, label %908, label %917

; <label>:908                                     ; preds = %894
  br i1 %900, label %909, label %912

; <label>:909                                     ; preds = %908
  %910 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %910, i32 %896, i32 undef, i32 %902, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %911 = add i32 %896, 4
  br label %912

; <label>:912                                     ; preds = %909, %908
  %913 = phi i32 [ %911, %909 ], [ %896, %908 ]
  %914 = sub i32 0, %883
  %915 = and i32 %914, 31
  %916 = lshr i32 %875, %915
  br label %917

; <label>:917                                     ; preds = %912, %894
  %918 = phi i32 [ %916, %912 ], [ %902, %894 ]
  %919 = phi i32 [ %913, %912 ], [ %896, %894 ]
  %920 = sub i32 %905, %609
  %921 = icmp ugt i32 %920, 31
  br i1 %921, label %926, label %922

; <label>:922                                     ; preds = %917
  %923 = and i32 %920, 31
  %924 = shl i32 1, %923
  %925 = add i32 %924, -1
  br label %926

; <label>:926                                     ; preds = %922, %917
  %927 = phi i32 [ %925, %922 ], [ -1, %917 ]
  %928 = shl i32 %927, %609
  %929 = xor i32 %928, -1
  %930 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %931 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %930, i32 1, i32 %608, i32 undef, i32 undef, i32 %929)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %932 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %933 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %932, i32 2, i32 %608, i32 undef, i32 undef, i32 %904)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %934 = icmp ugt i32 %905, 32
  br i1 %934, label %935, label %2672

; <label>:935                                     ; preds = %926
  %936 = add i32 %883, %831
  %937 = and i32 %936, 31
  %938 = shl i32 -1, %937
  %939 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %940 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %939, i32 1, i32 %919, i32 undef, i32 undef, i32 %938)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %941 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %942 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %941, i32 2, i32 %919, i32 undef, i32 undef, i32 %918)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %2672

; <label>:943                                     ; preds = %601
  %944 = icmp eq i32 %93, 2
  br i1 %944, label %945, label %1395

; <label>:945                                     ; preds = %943
  %946 = mul i32 %134, %89
  %947 = add i32 %88, %31
  %948 = lshr i32 %946, 5
  %949 = shl nuw nsw i32 %948, 2
  %950 = add i32 %947, %949
  %951 = and i32 %946, 31
  %952 = add i32 %950, 4
  %953 = mul nuw nsw i32 %232, %183
  %954 = add i32 %231, %200
  %955 = shl nuw nsw i32 %86, 1
  %956 = lshr i32 %953, 5
  %957 = shl nuw nsw i32 %956, 2
  %958 = add i32 %957, %954
  %959 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %960 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %959, i32 %958, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %961 = extractvalue %dx.types.ResRet.i32 %960, 0
  %962 = extractvalue %dx.types.ResRet.i32 %960, 1
  %963 = extractvalue %dx.types.ResRet.i32 %960, 2
  %964 = extractvalue %dx.types.ResRet.i32 %960, 3
  %965 = and i32 %953, 31
  %966 = lshr i32 %961, %965
  %967 = icmp eq i32 %965, 0
  br i1 %967, label %972, label %968

; <label>:968                                     ; preds = %945
  %969 = sub nsw i32 0, %953
  %970 = and i32 %969, 31
  %971 = shl i32 %962, %970
  br label %972

; <label>:972                                     ; preds = %968, %945
  %973 = phi i32 [ %971, %968 ], [ 0, %945 ]
  %974 = or i32 %973, %966
  %975 = lshr i32 %962, %965
  br i1 %967, label %980, label %976

; <label>:976                                     ; preds = %972
  %977 = sub nsw i32 0, %953
  %978 = and i32 %977, 31
  %979 = shl i32 %963, %978
  br label %980

; <label>:980                                     ; preds = %976, %972
  %981 = phi i32 [ %979, %976 ], [ 0, %972 ]
  %982 = or i32 %981, %975
  %983 = lshr i32 %963, %965
  br i1 %967, label %988, label %984

; <label>:984                                     ; preds = %980
  %985 = sub nsw i32 0, %953
  %986 = and i32 %985, 31
  %987 = shl i32 %964, %986
  br label %988

; <label>:988                                     ; preds = %984, %980
  %989 = phi i32 [ %987, %984 ], [ 0, %980 ]
  %990 = or i32 %989, %983
  %991 = lshr i32 %964, %965
  %992 = shl i32 1, %955
  %993 = add i32 %992, -1
  %994 = and i32 %974, %993
  %995 = shl i32 %994, %951
  %996 = add nuw nsw i32 %951, %955
  %997 = icmp ugt i32 %996, 31
  br i1 %997, label %998, label %1002

; <label>:998                                     ; preds = %988
  %999 = sub i32 0, %946
  %1000 = and i32 %999, 31
  %1001 = lshr i32 %994, %1000
  br label %1002

; <label>:1002                                    ; preds = %998, %988
  %1003 = phi i32 [ %1001, %998 ], [ 0, %988 ]
  %1004 = add nuw nsw i32 %87, 1
  %1005 = select i1 %91, i32 %1004, i32 0
  %1006 = lshr i32 %974, %955
  %1007 = icmp eq i32 %86, 0
  br i1 %1007, label %1012, label %1008

; <label>:1008                                    ; preds = %1002
  %1009 = sub nsw i32 0, %955
  %1010 = and i32 %1009, 30
  %1011 = shl i32 %982, %1010
  br label %1012

; <label>:1012                                    ; preds = %1008, %1002
  %1013 = phi i32 [ %1011, %1008 ], [ 0, %1002 ]
  %1014 = or i32 %1013, %1006
  %1015 = lshr i32 %982, %955
  br i1 %1007, label %1020, label %1016

; <label>:1016                                    ; preds = %1012
  %1017 = sub nsw i32 0, %955
  %1018 = and i32 %1017, 30
  %1019 = shl i32 %990, %1018
  br label %1020

; <label>:1020                                    ; preds = %1016, %1012
  %1021 = phi i32 [ %1019, %1016 ], [ 0, %1012 ]
  %1022 = or i32 %1021, %1015
  %1023 = lshr i32 %990, %955
  br i1 %1007, label %1028, label %1024

; <label>:1024                                    ; preds = %1020
  %1025 = sub nsw i32 0, %955
  %1026 = and i32 %1025, 30
  %1027 = shl i32 %991, %1026
  br label %1028

; <label>:1028                                    ; preds = %1024, %1020
  %1029 = phi i32 [ %1027, %1024 ], [ 0, %1020 ]
  %1030 = or i32 %1029, %1023
  %1031 = shl i32 1, %1005
  %1032 = add i32 %1031, -1
  %1033 = and i32 %1014, %1032
  %1034 = add i32 %946, %955
  %1035 = and i32 %1034, 31
  %1036 = shl i32 %1033, %1035
  %1037 = select i1 %997, i32 %1036, i32 0
  %1038 = or i32 %1037, %1003
  %1039 = select i1 %997, i32 0, i32 %1036
  %1040 = or i32 %1039, %995
  %1041 = add nuw nsw i32 %996, %1005
  %1042 = xor i32 %1041, %996
  %1043 = icmp ugt i32 %1042, 31
  br i1 %1043, label %1044, label %1052

; <label>:1044                                    ; preds = %1028
  br i1 %997, label %1045, label %1047

; <label>:1045                                    ; preds = %1044
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %959, i32 %952, i32 undef, i32 %1038, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1046 = add i32 %950, 8
  br label %1047

; <label>:1047                                    ; preds = %1045, %1044
  %1048 = phi i32 [ %1046, %1045 ], [ %952, %1044 ]
  %1049 = sub nsw i32 0, %996
  %1050 = and i32 %1049, 31
  %1051 = lshr i32 %1033, %1050
  br label %1052

; <label>:1052                                    ; preds = %1047, %1028
  %1053 = phi i32 [ %1051, %1047 ], [ %1038, %1028 ]
  %1054 = phi i32 [ %1048, %1047 ], [ %952, %1028 ]
  %1055 = and i32 %212, 15
  %1056 = lshr i32 %212, 4
  %1057 = and i32 %1056, 15
  %1058 = lshr i32 %212, 8
  %1059 = and i32 %1058, 15
  %1060 = lshr i32 %212, 12
  %1061 = and i32 %1060, 15
  %1062 = lshr i32 %1014, %1005
  %1063 = shl i32 1, %1055
  %1064 = add i32 %1063, -1
  %1065 = and i32 %1062, %1064
  %1066 = add nuw nsw i32 %1055, %1005
  %1067 = and i32 %1066, 31
  %1068 = lshr i32 %1014, %1067
  %1069 = shl i32 1, %1057
  %1070 = add i32 %1069, 16777215
  %1071 = and i32 %1068, %1070
  %1072 = add nuw nsw i32 %1066, %1057
  %1073 = and i32 %1072, 31
  %1074 = lshr i32 %1014, %1073
  %1075 = icmp eq i32 %1073, 0
  br i1 %1075, label %1080, label %1076

; <label>:1076                                    ; preds = %1052
  %1077 = sub nsw i32 0, %1072
  %1078 = and i32 %1077, 31
  %1079 = shl i32 %1022, %1078
  br label %1080

; <label>:1080                                    ; preds = %1076, %1052
  %1081 = phi i32 [ %1079, %1076 ], [ 0, %1052 ]
  %1082 = or i32 %1081, %1074
  %1083 = lshr i32 %1022, %1073
  br i1 %1075, label %1088, label %1084

; <label>:1084                                    ; preds = %1080
  %1085 = sub nsw i32 0, %1072
  %1086 = and i32 %1085, 31
  %1087 = shl i32 %1030, %1086
  br label %1088

; <label>:1088                                    ; preds = %1084, %1080
  %1089 = phi i32 [ %1087, %1084 ], [ 0, %1080 ]
  %1090 = or i32 %1089, %1083
  %1091 = add nuw nsw i32 %1059, %1061
  %1092 = icmp eq i32 %95, 0
  br i1 %1092, label %1153, label %1093

; <label>:1093                                    ; preds = %1088
  %1094 = shl i32 1, %1059
  %1095 = add i32 %1094, 65535
  %1096 = and i32 %1082, %1095
  %1097 = lshr i32 %1082, %1059
  %1098 = shl i32 1, %1061
  %1099 = add i32 %1098, 255
  %1100 = and i32 %1097, %1099
  %1101 = shl i32 %1071, 8
  %1102 = or i32 %1101, %1065
  %1103 = shl i32 %1096, 16
  %1104 = or i32 %1102, %1103
  %1105 = shl i32 %1100, 24
  %1106 = or i32 %1104, %1105
  %1107 = and i32 %63, 15
  %1108 = lshr i32 %63, 4
  %1109 = and i32 %1108, 15
  %1110 = lshr i32 %63, 8
  %1111 = and i32 %1110, 15
  %1112 = lshr i32 %63, 12
  %1113 = and i32 %1112, 15
  %1114 = sub i32 %211, %62
  %1115 = add i32 %1114, %1106
  %1116 = and i32 %1115, 255
  %1117 = lshr i32 %1115, 8
  %1118 = and i32 %1117, 255
  %1119 = shl i32 %1118, %1107
  %1120 = lshr i32 %1115, 16
  %1121 = and i32 %1120, 255
  %1122 = add nuw nsw i32 %1109, %1107
  %1123 = shl i32 %1121, %1122
  %1124 = lshr i32 %1115, 24
  %1125 = add nuw nsw i32 %1122, %1111
  %1126 = and i32 %1125, 31
  %1127 = shl i32 %1124, %1126
  %1128 = or i32 %1127, %1116
  %1129 = or i32 %1128, %1119
  %1130 = or i32 %1129, %1123
  %1131 = add nuw nsw i32 %1125, %1113
  %1132 = and i32 %1041, 31
  %1133 = shl i32 %1130, %1132
  %1134 = icmp ugt i32 %1041, 31
  %1135 = select i1 %1134, i32 %1133, i32 0
  %1136 = or i32 %1135, %1053
  %1137 = select i1 %1134, i32 0, i32 %1133
  %1138 = or i32 %1137, %1040
  %1139 = add nuw nsw i32 %1131, %1041
  %1140 = xor i32 %1139, %1041
  %1141 = icmp ugt i32 %1140, 31
  br i1 %1141, label %1142, label %1153

; <label>:1142                                    ; preds = %1093
  br i1 %1134, label %1143, label %1146

; <label>:1143                                    ; preds = %1142
  %1144 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1144, i32 %1054, i32 undef, i32 %1136, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1145 = add i32 %1054, 4
  br label %1146

; <label>:1146                                    ; preds = %1143, %1142
  %1147 = phi i32 [ %1145, %1143 ], [ %1054, %1142 ]
  %1148 = icmp eq i32 %1132, 0
  br i1 %1148, label %1153, label %1149

; <label>:1149                                    ; preds = %1146
  %1150 = sub nsw i32 0, %1041
  %1151 = and i32 %1150, 31
  %1152 = lshr i32 %1130, %1151
  br label %1153

; <label>:1153                                    ; preds = %1149, %1146, %1093, %1088
  %1154 = phi i32 [ 0, %1146 ], [ %1152, %1149 ], [ %1136, %1093 ], [ %1053, %1088 ]
  %1155 = phi i32 [ %1139, %1146 ], [ %1139, %1149 ], [ %1139, %1093 ], [ %1041, %1088 ]
  %1156 = phi i32 [ %1147, %1146 ], [ %1147, %1149 ], [ %1054, %1093 ], [ %1054, %1088 ]
  %1157 = phi i32 [ %1138, %1146 ], [ %1138, %1149 ], [ %1138, %1093 ], [ %1040, %1088 ]
  %1158 = add i32 %233, %200
  %1159 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1160 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1159, i32 %1158, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1161 = extractvalue %dx.types.ResRet.i32 %1160, 0
  %1162 = extractvalue %dx.types.ResRet.i32 %1160, 1
  %1163 = and i32 %1161, 31
  %1164 = lshr i32 %1161, 5
  %1165 = and i32 %1162, 31
  %1166 = lshr i32 %1162, 5
  %1167 = add i32 %56, %29
  %1168 = add i32 %1167, %41
  %1169 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1170 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1169, i32 %1168, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1171 = extractvalue %dx.types.ResRet.i32 %1170, 0
  %1172 = extractvalue %dx.types.ResRet.i32 %1170, 1
  %1173 = and i32 %1171, 31
  %1174 = lshr i32 %1171, 5
  %1175 = and i32 %1172, 31
  %1176 = lshr i32 %1172, 5
  %1177 = add nuw nsw i32 %1072, %955
  %1178 = add nuw nsw i32 %1177, %1091
  %1179 = add i32 %1178, %953
  %1180 = lshr i32 %1082, %1091
  %1181 = icmp eq i32 %1091, 0
  br i1 %1181, label %1186, label %1182

; <label>:1182                                    ; preds = %1153
  %1183 = sub nsw i32 0, %1091
  %1184 = and i32 %1183, 31
  %1185 = shl i32 %1090, %1184
  br label %1186

; <label>:1186                                    ; preds = %1182, %1153
  %1187 = phi i32 [ %1185, %1182 ], [ 0, %1153 ]
  %1188 = or i32 %1187, %1180
  %1189 = shl i32 1, %1163
  %1190 = add i32 %1189, -1
  %1191 = and i32 %1188, %1190
  %1192 = add nsw i32 %1163, %1179
  %1193 = ashr i32 %1192, 5
  %1194 = shl nsw i32 %1193, 2
  %1195 = add i32 %1194, %954
  %1196 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1159, i32 %1195, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1197 = extractvalue %dx.types.ResRet.i32 %1196, 0
  %1198 = extractvalue %dx.types.ResRet.i32 %1196, 1
  %1199 = extractvalue %dx.types.ResRet.i32 %1196, 2
  %1200 = add i32 %1161, %1179
  %1201 = and i32 %1200, 31
  %1202 = lshr i32 %1197, %1201
  %1203 = icmp eq i32 %1201, 0
  br i1 %1203, label %1208, label %1204

; <label>:1204                                    ; preds = %1186
  %1205 = sub i32 0, %1200
  %1206 = and i32 %1205, 31
  %1207 = shl i32 %1198, %1206
  br label %1208

; <label>:1208                                    ; preds = %1204, %1186
  %1209 = phi i32 [ %1207, %1204 ], [ 0, %1186 ]
  %1210 = or i32 %1209, %1202
  %1211 = lshr i32 %1198, %1201
  br i1 %1203, label %1216, label %1212

; <label>:1212                                    ; preds = %1208
  %1213 = sub i32 0, %1200
  %1214 = and i32 %1213, 31
  %1215 = shl i32 %1199, %1214
  br label %1216

; <label>:1216                                    ; preds = %1212, %1208
  %1217 = phi i32 [ %1215, %1212 ], [ 0, %1208 ]
  %1218 = or i32 %1217, %1211
  %1219 = shl i32 1, %1165
  %1220 = add i32 %1219, -1
  %1221 = and i32 %1210, %1220
  %1222 = sub nsw i32 %1164, %1174
  %1223 = add i32 %1222, %1191
  %1224 = sub nsw i32 %1166, %1176
  %1225 = add i32 %1224, %1221
  %1226 = and i32 %1155, 31
  %1227 = shl i32 %1223, %1226
  %1228 = icmp ugt i32 %1155, 31
  %1229 = select i1 %1228, i32 %1227, i32 0
  %1230 = or i32 %1229, %1154
  %1231 = select i1 %1228, i32 0, i32 %1227
  %1232 = or i32 %1231, %1157
  %1233 = add nsw i32 %1173, %1155
  %1234 = xor i32 %1233, %1155
  %1235 = icmp ugt i32 %1234, 31
  br i1 %1235, label %1236, label %1244

; <label>:1236                                    ; preds = %1216
  br i1 %1228, label %1237, label %1239

; <label>:1237                                    ; preds = %1236
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1159, i32 %1156, i32 undef, i32 %1230, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1238 = add i32 %1156, 4
  br label %1239

; <label>:1239                                    ; preds = %1237, %1236
  %1240 = phi i32 [ %1238, %1237 ], [ %1156, %1236 ]
  %1241 = sub nsw i32 0, %1155
  %1242 = and i32 %1241, 31
  %1243 = lshr i32 %1223, %1242
  br label %1244

; <label>:1244                                    ; preds = %1239, %1216
  %1245 = phi i32 [ %1243, %1239 ], [ %1230, %1216 ]
  %1246 = phi i32 [ %1240, %1239 ], [ %1156, %1216 ]
  %1247 = add i32 %1171, %1155
  %1248 = and i32 %1247, 31
  %1249 = shl i32 %1225, %1248
  %1250 = icmp ugt i32 %1233, 31
  %1251 = select i1 %1250, i32 %1249, i32 0
  %1252 = or i32 %1245, %1251
  %1253 = select i1 %1250, i32 0, i32 %1249
  %1254 = or i32 %1232, %1253
  %1255 = add i32 %1233, %1175
  %1256 = xor i32 %1255, %1233
  %1257 = icmp ugt i32 %1256, 31
  br i1 %1257, label %1258, label %1267

; <label>:1258                                    ; preds = %1244
  br i1 %1250, label %1259, label %1262

; <label>:1259                                    ; preds = %1258
  %1260 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1260, i32 %1246, i32 undef, i32 %1252, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1261 = add i32 %1246, 4
  br label %1262

; <label>:1262                                    ; preds = %1259, %1258
  %1263 = phi i32 [ %1261, %1259 ], [ %1246, %1258 ]
  %1264 = sub i32 0, %1233
  %1265 = and i32 %1264, 31
  %1266 = lshr i32 %1225, %1265
  br label %1267

; <label>:1267                                    ; preds = %1262, %1244
  %1268 = phi i32 [ %1266, %1262 ], [ %1252, %1244 ]
  %1269 = phi i32 [ %1263, %1262 ], [ %1246, %1244 ]
  %1270 = add i32 %200, 8
  %1271 = add i32 %1270, %233
  %1272 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1273 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1272, i32 %1271, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1274 = extractvalue %dx.types.ResRet.i32 %1273, 0
  %1275 = extractvalue %dx.types.ResRet.i32 %1273, 1
  %1276 = and i32 %1274, 31
  %1277 = lshr i32 %1274, 5
  %1278 = and i32 %1275, 31
  %1279 = lshr i32 %1275, 5
  %1280 = add i32 %29, 8
  %1281 = add i32 %1280, %56
  %1282 = add i32 %1281, %41
  %1283 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1284 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1283, i32 %1282, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1285 = extractvalue %dx.types.ResRet.i32 %1284, 0
  %1286 = extractvalue %dx.types.ResRet.i32 %1284, 1
  %1287 = and i32 %1285, 31
  %1288 = lshr i32 %1285, 5
  %1289 = and i32 %1286, 31
  %1290 = lshr i32 %1286, 5
  %1291 = lshr i32 %1210, %1165
  %1292 = icmp eq i32 %1165, 0
  br i1 %1292, label %1297, label %1293

; <label>:1293                                    ; preds = %1267
  %1294 = sub i32 0, %1162
  %1295 = and i32 %1294, 31
  %1296 = shl i32 %1218, %1295
  br label %1297

; <label>:1297                                    ; preds = %1293, %1267
  %1298 = phi i32 [ %1296, %1293 ], [ 0, %1267 ]
  %1299 = or i32 %1298, %1291
  %1300 = lshr i32 %1218, %1165
  br i1 %1292, label %1305, label %1301

; <label>:1301                                    ; preds = %1297
  %1302 = sub i32 0, %1162
  %1303 = and i32 %1302, 31
  %1304 = shl i32 %1030, %1303
  br label %1305

; <label>:1305                                    ; preds = %1301, %1297
  %1306 = phi i32 [ %1304, %1301 ], [ 0, %1297 ]
  %1307 = shl i32 1, %1276
  %1308 = add i32 %1307, -1
  %1309 = and i32 %1299, %1308
  %1310 = lshr i32 %1299, %1276
  %1311 = icmp eq i32 %1276, 0
  br i1 %1311, label %1317, label %1312

; <label>:1312                                    ; preds = %1305
  %1313 = or i32 %1306, %1300
  %1314 = sub i32 0, %1274
  %1315 = and i32 %1314, 31
  %1316 = shl i32 %1313, %1315
  br label %1317

; <label>:1317                                    ; preds = %1312, %1305
  %1318 = phi i32 [ %1316, %1312 ], [ 0, %1305 ]
  %1319 = or i32 %1318, %1310
  %1320 = shl i32 1, %1278
  %1321 = add i32 %1320, -1
  %1322 = and i32 %1319, %1321
  %1323 = sub nsw i32 %1277, %1288
  %1324 = add i32 %1323, %1309
  %1325 = sub nsw i32 %1279, %1290
  %1326 = add i32 %1325, %1322
  %1327 = add i32 %1233, %1172
  %1328 = and i32 %1327, 31
  %1329 = shl i32 %1324, %1328
  %1330 = icmp ugt i32 %1255, 31
  %1331 = select i1 %1330, i32 %1329, i32 0
  %1332 = or i32 %1331, %1268
  %1333 = select i1 %1330, i32 0, i32 %1329
  %1334 = or i32 %1254, %1333
  %1335 = add i32 %1287, %1255
  %1336 = xor i32 %1335, %1255
  %1337 = icmp ugt i32 %1336, 31
  br i1 %1337, label %1338, label %1346

; <label>:1338                                    ; preds = %1317
  br i1 %1330, label %1339, label %1341

; <label>:1339                                    ; preds = %1338
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1272, i32 %1269, i32 undef, i32 %1332, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1340 = add i32 %1269, 4
  br label %1341

; <label>:1341                                    ; preds = %1339, %1338
  %1342 = phi i32 [ %1340, %1339 ], [ %1269, %1338 ]
  %1343 = sub i32 0, %1255
  %1344 = and i32 %1343, 31
  %1345 = lshr i32 %1324, %1344
  br label %1346

; <label>:1346                                    ; preds = %1341, %1317
  %1347 = phi i32 [ %1345, %1341 ], [ %1332, %1317 ]
  %1348 = phi i32 [ %1342, %1341 ], [ %1269, %1317 ]
  %1349 = add i32 %1285, %1255
  %1350 = and i32 %1349, 31
  %1351 = shl i32 %1326, %1350
  %1352 = icmp ugt i32 %1335, 31
  %1353 = select i1 %1352, i32 %1351, i32 0
  %1354 = or i32 %1347, %1353
  %1355 = select i1 %1352, i32 0, i32 %1351
  %1356 = or i32 %1334, %1355
  %1357 = add i32 %1335, %1289
  %1358 = xor i32 %1357, %1335
  %1359 = icmp ugt i32 %1358, 31
  br i1 %1359, label %1360, label %1369

; <label>:1360                                    ; preds = %1346
  br i1 %1352, label %1361, label %1364

; <label>:1361                                    ; preds = %1360
  %1362 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1362, i32 %1348, i32 undef, i32 %1354, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1363 = add i32 %1348, 4
  br label %1364

; <label>:1364                                    ; preds = %1361, %1360
  %1365 = phi i32 [ %1363, %1361 ], [ %1348, %1360 ]
  %1366 = sub i32 0, %1335
  %1367 = and i32 %1366, 31
  %1368 = lshr i32 %1326, %1367
  br label %1369

; <label>:1369                                    ; preds = %1364, %1346
  %1370 = phi i32 [ %1368, %1364 ], [ %1354, %1346 ]
  %1371 = phi i32 [ %1365, %1364 ], [ %1348, %1346 ]
  %1372 = sub i32 %1357, %951
  %1373 = icmp ugt i32 %1372, 31
  br i1 %1373, label %1378, label %1374

; <label>:1374                                    ; preds = %1369
  %1375 = and i32 %1372, 31
  %1376 = shl i32 1, %1375
  %1377 = add i32 %1376, -1
  br label %1378

; <label>:1378                                    ; preds = %1374, %1369
  %1379 = phi i32 [ %1377, %1374 ], [ -1, %1369 ]
  %1380 = shl i32 %1379, %951
  %1381 = xor i32 %1380, -1
  %1382 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1383 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1382, i32 1, i32 %950, i32 undef, i32 undef, i32 %1381)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1384 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1385 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1384, i32 2, i32 %950, i32 undef, i32 undef, i32 %1356)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1386 = icmp ugt i32 %1357, 32
  br i1 %1386, label %1387, label %2672

; <label>:1387                                    ; preds = %1378
  %1388 = add i32 %1335, %1286
  %1389 = and i32 %1388, 31
  %1390 = shl i32 -1, %1389
  %1391 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1392 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1391, i32 1, i32 %1371, i32 undef, i32 undef, i32 %1390)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1393 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1394 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1393, i32 2, i32 %1371, i32 undef, i32 undef, i32 %1370)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %2672

; <label>:1395                                    ; preds = %943
  %1396 = icmp eq i32 %93, 3
  br i1 %1396, label %1397, label %1979

; <label>:1397                                    ; preds = %1395
  %1398 = mul i32 %134, %89
  %1399 = add i32 %88, %31
  %1400 = lshr i32 %1398, 5
  %1401 = shl nuw nsw i32 %1400, 2
  %1402 = add i32 %1399, %1401
  %1403 = and i32 %1398, 31
  %1404 = add i32 %1402, 4
  %1405 = mul nuw nsw i32 %232, %183
  %1406 = add i32 %231, %200
  %1407 = shl nuw nsw i32 %86, 1
  %1408 = lshr i32 %1405, 5
  %1409 = shl nuw nsw i32 %1408, 2
  %1410 = add i32 %1409, %1406
  %1411 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1412 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1411, i32 %1410, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1413 = extractvalue %dx.types.ResRet.i32 %1412, 0
  %1414 = extractvalue %dx.types.ResRet.i32 %1412, 1
  %1415 = extractvalue %dx.types.ResRet.i32 %1412, 2
  %1416 = extractvalue %dx.types.ResRet.i32 %1412, 3
  %1417 = and i32 %1405, 31
  %1418 = lshr i32 %1413, %1417
  %1419 = icmp eq i32 %1417, 0
  br i1 %1419, label %1424, label %1420

; <label>:1420                                    ; preds = %1397
  %1421 = sub nsw i32 0, %1405
  %1422 = and i32 %1421, 31
  %1423 = shl i32 %1414, %1422
  br label %1424

; <label>:1424                                    ; preds = %1420, %1397
  %1425 = phi i32 [ %1423, %1420 ], [ 0, %1397 ]
  %1426 = or i32 %1425, %1418
  %1427 = lshr i32 %1414, %1417
  br i1 %1419, label %1432, label %1428

; <label>:1428                                    ; preds = %1424
  %1429 = sub nsw i32 0, %1405
  %1430 = and i32 %1429, 31
  %1431 = shl i32 %1415, %1430
  br label %1432

; <label>:1432                                    ; preds = %1428, %1424
  %1433 = phi i32 [ %1431, %1428 ], [ 0, %1424 ]
  %1434 = or i32 %1433, %1427
  %1435 = lshr i32 %1415, %1417
  br i1 %1419, label %1440, label %1436

; <label>:1436                                    ; preds = %1432
  %1437 = sub nsw i32 0, %1405
  %1438 = and i32 %1437, 31
  %1439 = shl i32 %1416, %1438
  br label %1440

; <label>:1440                                    ; preds = %1436, %1432
  %1441 = phi i32 [ %1439, %1436 ], [ 0, %1432 ]
  %1442 = or i32 %1441, %1435
  %1443 = lshr i32 %1416, %1417
  %1444 = shl i32 1, %1407
  %1445 = add i32 %1444, -1
  %1446 = and i32 %1426, %1445
  %1447 = shl i32 %1446, %1403
  %1448 = add nuw nsw i32 %1403, %1407
  %1449 = icmp ugt i32 %1448, 31
  br i1 %1449, label %1450, label %1454

; <label>:1450                                    ; preds = %1440
  %1451 = sub i32 0, %1398
  %1452 = and i32 %1451, 31
  %1453 = lshr i32 %1446, %1452
  br label %1454

; <label>:1454                                    ; preds = %1450, %1440
  %1455 = phi i32 [ %1453, %1450 ], [ 0, %1440 ]
  %1456 = add nuw nsw i32 %87, 1
  %1457 = select i1 %91, i32 %1456, i32 0
  %1458 = lshr i32 %1426, %1407
  %1459 = icmp eq i32 %86, 0
  br i1 %1459, label %1464, label %1460

; <label>:1460                                    ; preds = %1454
  %1461 = sub nsw i32 0, %1407
  %1462 = and i32 %1461, 30
  %1463 = shl i32 %1434, %1462
  br label %1464

; <label>:1464                                    ; preds = %1460, %1454
  %1465 = phi i32 [ %1463, %1460 ], [ 0, %1454 ]
  %1466 = or i32 %1465, %1458
  %1467 = lshr i32 %1434, %1407
  br i1 %1459, label %1472, label %1468

; <label>:1468                                    ; preds = %1464
  %1469 = sub nsw i32 0, %1407
  %1470 = and i32 %1469, 30
  %1471 = shl i32 %1442, %1470
  br label %1472

; <label>:1472                                    ; preds = %1468, %1464
  %1473 = phi i32 [ %1471, %1468 ], [ 0, %1464 ]
  %1474 = or i32 %1473, %1467
  %1475 = lshr i32 %1442, %1407
  br i1 %1459, label %1480, label %1476

; <label>:1476                                    ; preds = %1472
  %1477 = sub nsw i32 0, %1407
  %1478 = and i32 %1477, 30
  %1479 = shl i32 %1443, %1478
  br label %1480

; <label>:1480                                    ; preds = %1476, %1472
  %1481 = phi i32 [ %1479, %1476 ], [ 0, %1472 ]
  %1482 = or i32 %1481, %1475
  %1483 = shl i32 1, %1457
  %1484 = add i32 %1483, -1
  %1485 = and i32 %1466, %1484
  %1486 = add i32 %1398, %1407
  %1487 = and i32 %1486, 31
  %1488 = shl i32 %1485, %1487
  %1489 = select i1 %1449, i32 %1488, i32 0
  %1490 = or i32 %1489, %1455
  %1491 = select i1 %1449, i32 0, i32 %1488
  %1492 = or i32 %1491, %1447
  %1493 = add nuw nsw i32 %1448, %1457
  %1494 = xor i32 %1493, %1448
  %1495 = icmp ugt i32 %1494, 31
  br i1 %1495, label %1496, label %1504

; <label>:1496                                    ; preds = %1480
  br i1 %1449, label %1497, label %1499

; <label>:1497                                    ; preds = %1496
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1411, i32 %1404, i32 undef, i32 %1490, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1498 = add i32 %1402, 8
  br label %1499

; <label>:1499                                    ; preds = %1497, %1496
  %1500 = phi i32 [ %1498, %1497 ], [ %1404, %1496 ]
  %1501 = sub nsw i32 0, %1448
  %1502 = and i32 %1501, 31
  %1503 = lshr i32 %1485, %1502
  br label %1504

; <label>:1504                                    ; preds = %1499, %1480
  %1505 = phi i32 [ %1503, %1499 ], [ %1490, %1480 ]
  %1506 = phi i32 [ %1500, %1499 ], [ %1404, %1480 ]
  %1507 = and i32 %212, 15
  %1508 = lshr i32 %212, 4
  %1509 = and i32 %1508, 15
  %1510 = lshr i32 %212, 8
  %1511 = and i32 %1510, 15
  %1512 = lshr i32 %212, 12
  %1513 = and i32 %1512, 15
  %1514 = lshr i32 %1466, %1457
  %1515 = shl i32 1, %1507
  %1516 = add i32 %1515, -1
  %1517 = and i32 %1514, %1516
  %1518 = add nuw nsw i32 %1507, %1457
  %1519 = and i32 %1518, 31
  %1520 = lshr i32 %1466, %1519
  %1521 = shl i32 1, %1509
  %1522 = add i32 %1521, 16777215
  %1523 = and i32 %1520, %1522
  %1524 = add nuw nsw i32 %1518, %1509
  %1525 = and i32 %1524, 31
  %1526 = lshr i32 %1466, %1525
  %1527 = icmp eq i32 %1525, 0
  br i1 %1527, label %1532, label %1528

; <label>:1528                                    ; preds = %1504
  %1529 = sub nsw i32 0, %1524
  %1530 = and i32 %1529, 31
  %1531 = shl i32 %1474, %1530
  br label %1532

; <label>:1532                                    ; preds = %1528, %1504
  %1533 = phi i32 [ %1531, %1528 ], [ 0, %1504 ]
  %1534 = or i32 %1533, %1526
  %1535 = lshr i32 %1474, %1525
  br i1 %1527, label %1540, label %1536

; <label>:1536                                    ; preds = %1532
  %1537 = sub nsw i32 0, %1524
  %1538 = and i32 %1537, 31
  %1539 = shl i32 %1482, %1538
  br label %1540

; <label>:1540                                    ; preds = %1536, %1532
  %1541 = phi i32 [ %1539, %1536 ], [ 0, %1532 ]
  %1542 = or i32 %1541, %1535
  %1543 = add nuw nsw i32 %1511, %1513
  %1544 = icmp eq i32 %95, 0
  br i1 %1544, label %1605, label %1545

; <label>:1545                                    ; preds = %1540
  %1546 = shl i32 1, %1511
  %1547 = add i32 %1546, 65535
  %1548 = and i32 %1534, %1547
  %1549 = lshr i32 %1534, %1511
  %1550 = shl i32 1, %1513
  %1551 = add i32 %1550, 255
  %1552 = and i32 %1549, %1551
  %1553 = shl i32 %1523, 8
  %1554 = or i32 %1553, %1517
  %1555 = shl i32 %1548, 16
  %1556 = or i32 %1554, %1555
  %1557 = shl i32 %1552, 24
  %1558 = or i32 %1556, %1557
  %1559 = and i32 %63, 15
  %1560 = lshr i32 %63, 4
  %1561 = and i32 %1560, 15
  %1562 = lshr i32 %63, 8
  %1563 = and i32 %1562, 15
  %1564 = lshr i32 %63, 12
  %1565 = and i32 %1564, 15
  %1566 = sub i32 %211, %62
  %1567 = add i32 %1566, %1558
  %1568 = and i32 %1567, 255
  %1569 = lshr i32 %1567, 8
  %1570 = and i32 %1569, 255
  %1571 = shl i32 %1570, %1559
  %1572 = lshr i32 %1567, 16
  %1573 = and i32 %1572, 255
  %1574 = add nuw nsw i32 %1561, %1559
  %1575 = shl i32 %1573, %1574
  %1576 = lshr i32 %1567, 24
  %1577 = add nuw nsw i32 %1574, %1563
  %1578 = and i32 %1577, 31
  %1579 = shl i32 %1576, %1578
  %1580 = or i32 %1579, %1568
  %1581 = or i32 %1580, %1571
  %1582 = or i32 %1581, %1575
  %1583 = add nuw nsw i32 %1577, %1565
  %1584 = and i32 %1493, 31
  %1585 = shl i32 %1582, %1584
  %1586 = icmp ugt i32 %1493, 31
  %1587 = select i1 %1586, i32 %1585, i32 0
  %1588 = or i32 %1587, %1505
  %1589 = select i1 %1586, i32 0, i32 %1585
  %1590 = or i32 %1589, %1492
  %1591 = add nuw nsw i32 %1583, %1493
  %1592 = xor i32 %1591, %1493
  %1593 = icmp ugt i32 %1592, 31
  br i1 %1593, label %1594, label %1605

; <label>:1594                                    ; preds = %1545
  br i1 %1586, label %1595, label %1598

; <label>:1595                                    ; preds = %1594
  %1596 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1596, i32 %1506, i32 undef, i32 %1588, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1597 = add i32 %1506, 4
  br label %1598

; <label>:1598                                    ; preds = %1595, %1594
  %1599 = phi i32 [ %1597, %1595 ], [ %1506, %1594 ]
  %1600 = icmp eq i32 %1584, 0
  br i1 %1600, label %1605, label %1601

; <label>:1601                                    ; preds = %1598
  %1602 = sub nsw i32 0, %1493
  %1603 = and i32 %1602, 31
  %1604 = lshr i32 %1582, %1603
  br label %1605

; <label>:1605                                    ; preds = %1601, %1598, %1545, %1540
  %1606 = phi i32 [ 0, %1598 ], [ %1604, %1601 ], [ %1588, %1545 ], [ %1505, %1540 ]
  %1607 = phi i32 [ %1591, %1598 ], [ %1591, %1601 ], [ %1591, %1545 ], [ %1493, %1540 ]
  %1608 = phi i32 [ %1599, %1598 ], [ %1599, %1601 ], [ %1506, %1545 ], [ %1506, %1540 ]
  %1609 = phi i32 [ %1590, %1598 ], [ %1590, %1601 ], [ %1590, %1545 ], [ %1492, %1540 ]
  %1610 = add i32 %233, %200
  %1611 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1612 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1611, i32 %1610, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1613 = extractvalue %dx.types.ResRet.i32 %1612, 0
  %1614 = extractvalue %dx.types.ResRet.i32 %1612, 1
  %1615 = and i32 %1613, 31
  %1616 = lshr i32 %1613, 5
  %1617 = and i32 %1614, 31
  %1618 = lshr i32 %1614, 5
  %1619 = mul i32 %36, 24
  %1620 = add i32 %1619, %29
  %1621 = add i32 %1620, %41
  %1622 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1623 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1622, i32 %1621, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1624 = extractvalue %dx.types.ResRet.i32 %1623, 0
  %1625 = extractvalue %dx.types.ResRet.i32 %1623, 1
  %1626 = and i32 %1624, 31
  %1627 = lshr i32 %1624, 5
  %1628 = and i32 %1625, 31
  %1629 = lshr i32 %1625, 5
  %1630 = add nuw nsw i32 %1524, %1407
  %1631 = add nuw nsw i32 %1630, %1543
  %1632 = add i32 %1631, %1405
  %1633 = lshr i32 %1534, %1543
  %1634 = icmp eq i32 %1543, 0
  br i1 %1634, label %1639, label %1635

; <label>:1635                                    ; preds = %1605
  %1636 = sub nsw i32 0, %1543
  %1637 = and i32 %1636, 31
  %1638 = shl i32 %1542, %1637
  br label %1639

; <label>:1639                                    ; preds = %1635, %1605
  %1640 = phi i32 [ %1638, %1635 ], [ 0, %1605 ]
  %1641 = or i32 %1640, %1633
  %1642 = shl i32 1, %1615
  %1643 = add i32 %1642, -1
  %1644 = and i32 %1641, %1643
  %1645 = add nsw i32 %1615, %1632
  %1646 = ashr i32 %1645, 5
  %1647 = shl nsw i32 %1646, 2
  %1648 = add i32 %1647, %1406
  %1649 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1611, i32 %1648, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1650 = extractvalue %dx.types.ResRet.i32 %1649, 0
  %1651 = extractvalue %dx.types.ResRet.i32 %1649, 1
  %1652 = extractvalue %dx.types.ResRet.i32 %1649, 2
  %1653 = extractvalue %dx.types.ResRet.i32 %1649, 3
  %1654 = add i32 %1613, %1632
  %1655 = and i32 %1654, 31
  %1656 = lshr i32 %1650, %1655
  %1657 = icmp eq i32 %1655, 0
  br i1 %1657, label %1662, label %1658

; <label>:1658                                    ; preds = %1639
  %1659 = sub i32 0, %1654
  %1660 = and i32 %1659, 31
  %1661 = shl i32 %1651, %1660
  br label %1662

; <label>:1662                                    ; preds = %1658, %1639
  %1663 = phi i32 [ %1661, %1658 ], [ 0, %1639 ]
  %1664 = or i32 %1663, %1656
  %1665 = lshr i32 %1651, %1655
  br i1 %1657, label %1670, label %1666

; <label>:1666                                    ; preds = %1662
  %1667 = sub i32 0, %1654
  %1668 = and i32 %1667, 31
  %1669 = shl i32 %1652, %1668
  br label %1670

; <label>:1670                                    ; preds = %1666, %1662
  %1671 = phi i32 [ %1669, %1666 ], [ 0, %1662 ]
  %1672 = or i32 %1671, %1665
  %1673 = lshr i32 %1652, %1655
  br i1 %1657, label %1678, label %1674

; <label>:1674                                    ; preds = %1670
  %1675 = sub i32 0, %1654
  %1676 = and i32 %1675, 31
  %1677 = shl i32 %1653, %1676
  br label %1678

; <label>:1678                                    ; preds = %1674, %1670
  %1679 = phi i32 [ %1677, %1674 ], [ 0, %1670 ]
  %1680 = or i32 %1679, %1673
  %1681 = lshr i32 %1653, %1655
  %1682 = shl i32 1, %1617
  %1683 = add i32 %1682, -1
  %1684 = and i32 %1664, %1683
  %1685 = sub nsw i32 %1616, %1627
  %1686 = add i32 %1685, %1644
  %1687 = sub nsw i32 %1618, %1629
  %1688 = add i32 %1687, %1684
  %1689 = and i32 %1607, 31
  %1690 = shl i32 %1686, %1689
  %1691 = icmp ugt i32 %1607, 31
  %1692 = select i1 %1691, i32 %1690, i32 0
  %1693 = or i32 %1692, %1606
  %1694 = select i1 %1691, i32 0, i32 %1690
  %1695 = or i32 %1694, %1609
  %1696 = add nsw i32 %1626, %1607
  %1697 = xor i32 %1696, %1607
  %1698 = icmp ugt i32 %1697, 31
  br i1 %1698, label %1699, label %1707

; <label>:1699                                    ; preds = %1678
  br i1 %1691, label %1700, label %1702

; <label>:1700                                    ; preds = %1699
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1611, i32 %1608, i32 undef, i32 %1693, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1701 = add i32 %1608, 4
  br label %1702

; <label>:1702                                    ; preds = %1700, %1699
  %1703 = phi i32 [ %1701, %1700 ], [ %1608, %1699 ]
  %1704 = sub nsw i32 0, %1607
  %1705 = and i32 %1704, 31
  %1706 = lshr i32 %1686, %1705
  br label %1707

; <label>:1707                                    ; preds = %1702, %1678
  %1708 = phi i32 [ %1706, %1702 ], [ %1693, %1678 ]
  %1709 = phi i32 [ %1703, %1702 ], [ %1608, %1678 ]
  %1710 = add i32 %1624, %1607
  %1711 = and i32 %1710, 31
  %1712 = shl i32 %1688, %1711
  %1713 = icmp ugt i32 %1696, 31
  %1714 = select i1 %1713, i32 %1712, i32 0
  %1715 = or i32 %1708, %1714
  %1716 = select i1 %1713, i32 0, i32 %1712
  %1717 = or i32 %1695, %1716
  %1718 = add i32 %1696, %1628
  %1719 = xor i32 %1718, %1696
  %1720 = icmp ugt i32 %1719, 31
  br i1 %1720, label %1721, label %1730

; <label>:1721                                    ; preds = %1707
  br i1 %1713, label %1722, label %1725

; <label>:1722                                    ; preds = %1721
  %1723 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1723, i32 %1709, i32 undef, i32 %1715, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1724 = add i32 %1709, 4
  br label %1725

; <label>:1725                                    ; preds = %1722, %1721
  %1726 = phi i32 [ %1724, %1722 ], [ %1709, %1721 ]
  %1727 = sub i32 0, %1696
  %1728 = and i32 %1727, 31
  %1729 = lshr i32 %1688, %1728
  br label %1730

; <label>:1730                                    ; preds = %1725, %1707
  %1731 = phi i32 [ %1729, %1725 ], [ %1715, %1707 ]
  %1732 = phi i32 [ %1726, %1725 ], [ %1709, %1707 ]
  %1733 = add i32 %200, 8
  %1734 = add i32 %1733, %233
  %1735 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1736 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1735, i32 %1734, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1737 = extractvalue %dx.types.ResRet.i32 %1736, 0
  %1738 = extractvalue %dx.types.ResRet.i32 %1736, 1
  %1739 = and i32 %1737, 31
  %1740 = lshr i32 %1737, 5
  %1741 = and i32 %1738, 31
  %1742 = lshr i32 %1738, 5
  %1743 = add i32 %29, 8
  %1744 = add i32 %1743, %1619
  %1745 = add i32 %1744, %41
  %1746 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1747 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1746, i32 %1745, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1748 = extractvalue %dx.types.ResRet.i32 %1747, 0
  %1749 = extractvalue %dx.types.ResRet.i32 %1747, 1
  %1750 = and i32 %1748, 31
  %1751 = lshr i32 %1748, 5
  %1752 = and i32 %1749, 31
  %1753 = lshr i32 %1749, 5
  %1754 = add nsw i32 %1645, %1617
  %1755 = lshr i32 %1664, %1617
  %1756 = icmp eq i32 %1617, 0
  br i1 %1756, label %1761, label %1757

; <label>:1757                                    ; preds = %1730
  %1758 = sub i32 0, %1614
  %1759 = and i32 %1758, 31
  %1760 = shl i32 %1672, %1759
  br label %1761

; <label>:1761                                    ; preds = %1757, %1730
  %1762 = phi i32 [ %1760, %1757 ], [ 0, %1730 ]
  %1763 = or i32 %1762, %1755
  %1764 = lshr i32 %1672, %1617
  br i1 %1756, label %1769, label %1765

; <label>:1765                                    ; preds = %1761
  %1766 = sub i32 0, %1614
  %1767 = and i32 %1766, 31
  %1768 = shl i32 %1680, %1767
  br label %1769

; <label>:1769                                    ; preds = %1765, %1761
  %1770 = phi i32 [ %1768, %1765 ], [ 0, %1761 ]
  %1771 = or i32 %1770, %1764
  %1772 = lshr i32 %1680, %1617
  br i1 %1756, label %1777, label %1773

; <label>:1773                                    ; preds = %1769
  %1774 = sub i32 0, %1614
  %1775 = and i32 %1774, 31
  %1776 = shl i32 %1681, %1775
  br label %1777

; <label>:1777                                    ; preds = %1773, %1769
  %1778 = phi i32 [ %1776, %1773 ], [ 0, %1769 ]
  %1779 = or i32 %1778, %1772
  %1780 = shl i32 1, %1739
  %1781 = add i32 %1780, -1
  %1782 = and i32 %1763, %1781
  %1783 = add nsw i32 %1754, %1739
  %1784 = lshr i32 %1763, %1739
  %1785 = icmp eq i32 %1739, 0
  br i1 %1785, label %1790, label %1786

; <label>:1786                                    ; preds = %1777
  %1787 = sub i32 0, %1737
  %1788 = and i32 %1787, 31
  %1789 = shl i32 %1771, %1788
  br label %1790

; <label>:1790                                    ; preds = %1786, %1777
  %1791 = phi i32 [ %1789, %1786 ], [ 0, %1777 ]
  %1792 = or i32 %1791, %1784
  %1793 = lshr i32 %1771, %1739
  br i1 %1785, label %1798, label %1794

; <label>:1794                                    ; preds = %1790
  %1795 = sub i32 0, %1737
  %1796 = and i32 %1795, 31
  %1797 = shl i32 %1779, %1796
  br label %1798

; <label>:1798                                    ; preds = %1794, %1790
  %1799 = phi i32 [ %1797, %1794 ], [ 0, %1790 ]
  %1800 = or i32 %1799, %1793
  %1801 = shl i32 1, %1741
  %1802 = add i32 %1801, -1
  %1803 = and i32 %1792, %1802
  %1804 = sub nsw i32 %1740, %1751
  %1805 = add i32 %1804, %1782
  %1806 = sub nsw i32 %1742, %1753
  %1807 = add i32 %1806, %1803
  %1808 = add i32 %1696, %1625
  %1809 = and i32 %1808, 31
  %1810 = shl i32 %1805, %1809
  %1811 = icmp ugt i32 %1718, 31
  %1812 = select i1 %1811, i32 %1810, i32 0
  %1813 = or i32 %1812, %1731
  %1814 = select i1 %1811, i32 0, i32 %1810
  %1815 = or i32 %1717, %1814
  %1816 = add i32 %1750, %1718
  %1817 = xor i32 %1816, %1718
  %1818 = icmp ugt i32 %1817, 31
  br i1 %1818, label %1819, label %1827

; <label>:1819                                    ; preds = %1798
  br i1 %1811, label %1820, label %1822

; <label>:1820                                    ; preds = %1819
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1735, i32 %1732, i32 undef, i32 %1813, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1821 = add i32 %1732, 4
  br label %1822

; <label>:1822                                    ; preds = %1820, %1819
  %1823 = phi i32 [ %1821, %1820 ], [ %1732, %1819 ]
  %1824 = sub i32 0, %1718
  %1825 = and i32 %1824, 31
  %1826 = lshr i32 %1805, %1825
  br label %1827

; <label>:1827                                    ; preds = %1822, %1798
  %1828 = phi i32 [ %1826, %1822 ], [ %1813, %1798 ]
  %1829 = phi i32 [ %1823, %1822 ], [ %1732, %1798 ]
  %1830 = add i32 %1748, %1718
  %1831 = and i32 %1830, 31
  %1832 = shl i32 %1807, %1831
  %1833 = icmp ugt i32 %1816, 31
  %1834 = select i1 %1833, i32 %1832, i32 0
  %1835 = or i32 %1828, %1834
  %1836 = select i1 %1833, i32 0, i32 %1832
  %1837 = or i32 %1815, %1836
  %1838 = add i32 %1816, %1752
  %1839 = xor i32 %1838, %1816
  %1840 = icmp ugt i32 %1839, 31
  br i1 %1840, label %1841, label %1850

; <label>:1841                                    ; preds = %1827
  br i1 %1833, label %1842, label %1845

; <label>:1842                                    ; preds = %1841
  %1843 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1843, i32 %1829, i32 undef, i32 %1835, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1844 = add i32 %1829, 4
  br label %1845

; <label>:1845                                    ; preds = %1842, %1841
  %1846 = phi i32 [ %1844, %1842 ], [ %1829, %1841 ]
  %1847 = sub i32 0, %1816
  %1848 = and i32 %1847, 31
  %1849 = lshr i32 %1807, %1848
  br label %1850

; <label>:1850                                    ; preds = %1845, %1827
  %1851 = phi i32 [ %1849, %1845 ], [ %1835, %1827 ]
  %1852 = phi i32 [ %1846, %1845 ], [ %1829, %1827 ]
  %1853 = add i32 %200, 16
  %1854 = add i32 %1853, %233
  %1855 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1856 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1855, i32 %1854, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1857 = extractvalue %dx.types.ResRet.i32 %1856, 0
  %1858 = extractvalue %dx.types.ResRet.i32 %1856, 1
  %1859 = and i32 %1857, 31
  %1860 = lshr i32 %1857, 5
  %1861 = and i32 %1858, 31
  %1862 = lshr i32 %1858, 5
  %1863 = add i32 %42, %1619
  %1864 = add i32 %1863, %41
  %1865 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1866 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1865, i32 %1864, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1867 = extractvalue %dx.types.ResRet.i32 %1866, 0
  %1868 = extractvalue %dx.types.ResRet.i32 %1866, 1
  %1869 = and i32 %1867, 31
  %1870 = lshr i32 %1867, 5
  %1871 = and i32 %1868, 31
  %1872 = lshr i32 %1868, 5
  %1873 = add nsw i32 %1783, %1741
  %1874 = lshr i32 %1792, %1741
  %1875 = icmp eq i32 %1741, 0
  br i1 %1875, label %1880, label %1876

; <label>:1876                                    ; preds = %1850
  %1877 = sub i32 0, %1738
  %1878 = and i32 %1877, 31
  %1879 = shl i32 %1800, %1878
  br label %1880

; <label>:1880                                    ; preds = %1876, %1850
  %1881 = phi i32 [ %1879, %1876 ], [ 0, %1850 ]
  %1882 = or i32 %1881, %1874
  %1883 = shl i32 1, %1859
  %1884 = add i32 %1883, -1
  %1885 = and i32 %1882, %1884
  %1886 = add nsw i32 %1859, %1873
  %1887 = ashr i32 %1886, 5
  %1888 = shl nsw i32 %1887, 2
  %1889 = add i32 %1888, %1406
  %1890 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1855, i32 %1889, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1891 = extractvalue %dx.types.ResRet.i32 %1890, 0
  %1892 = add i32 %1857, %1873
  %1893 = and i32 %1892, 31
  %1894 = lshr i32 %1891, %1893
  %1895 = icmp eq i32 %1893, 0
  br i1 %1895, label %1901, label %1896

; <label>:1896                                    ; preds = %1880
  %1897 = extractvalue %dx.types.ResRet.i32 %1890, 1
  %1898 = sub i32 0, %1892
  %1899 = and i32 %1898, 31
  %1900 = shl i32 %1897, %1899
  br label %1901

; <label>:1901                                    ; preds = %1896, %1880
  %1902 = phi i32 [ %1900, %1896 ], [ 0, %1880 ]
  %1903 = or i32 %1902, %1894
  %1904 = shl i32 1, %1861
  %1905 = add i32 %1904, -1
  %1906 = and i32 %1903, %1905
  %1907 = sub nsw i32 %1860, %1870
  %1908 = add i32 %1907, %1885
  %1909 = sub nsw i32 %1862, %1872
  %1910 = add i32 %1909, %1906
  %1911 = add i32 %1816, %1749
  %1912 = and i32 %1911, 31
  %1913 = shl i32 %1908, %1912
  %1914 = icmp ugt i32 %1838, 31
  %1915 = select i1 %1914, i32 %1913, i32 0
  %1916 = or i32 %1915, %1851
  %1917 = select i1 %1914, i32 0, i32 %1913
  %1918 = or i32 %1837, %1917
  %1919 = add i32 %1869, %1838
  %1920 = xor i32 %1919, %1838
  %1921 = icmp ugt i32 %1920, 31
  br i1 %1921, label %1922, label %1930

; <label>:1922                                    ; preds = %1901
  br i1 %1914, label %1923, label %1925

; <label>:1923                                    ; preds = %1922
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1855, i32 %1852, i32 undef, i32 %1916, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1924 = add i32 %1852, 4
  br label %1925

; <label>:1925                                    ; preds = %1923, %1922
  %1926 = phi i32 [ %1924, %1923 ], [ %1852, %1922 ]
  %1927 = sub i32 0, %1838
  %1928 = and i32 %1927, 31
  %1929 = lshr i32 %1908, %1928
  br label %1930

; <label>:1930                                    ; preds = %1925, %1901
  %1931 = phi i32 [ %1929, %1925 ], [ %1916, %1901 ]
  %1932 = phi i32 [ %1926, %1925 ], [ %1852, %1901 ]
  %1933 = add i32 %1867, %1838
  %1934 = and i32 %1933, 31
  %1935 = shl i32 %1910, %1934
  %1936 = icmp ugt i32 %1919, 31
  %1937 = select i1 %1936, i32 %1935, i32 0
  %1938 = or i32 %1931, %1937
  %1939 = select i1 %1936, i32 0, i32 %1935
  %1940 = or i32 %1918, %1939
  %1941 = add i32 %1919, %1871
  %1942 = xor i32 %1941, %1919
  %1943 = icmp ugt i32 %1942, 31
  br i1 %1943, label %1944, label %1953

; <label>:1944                                    ; preds = %1930
  br i1 %1936, label %1945, label %1948

; <label>:1945                                    ; preds = %1944
  %1946 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1946, i32 %1932, i32 undef, i32 %1938, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %1947 = add i32 %1932, 4
  br label %1948

; <label>:1948                                    ; preds = %1945, %1944
  %1949 = phi i32 [ %1947, %1945 ], [ %1932, %1944 ]
  %1950 = sub i32 0, %1919
  %1951 = and i32 %1950, 31
  %1952 = lshr i32 %1910, %1951
  br label %1953

; <label>:1953                                    ; preds = %1948, %1930
  %1954 = phi i32 [ %1952, %1948 ], [ %1938, %1930 ]
  %1955 = phi i32 [ %1949, %1948 ], [ %1932, %1930 ]
  %1956 = sub i32 %1941, %1403
  %1957 = icmp ugt i32 %1956, 31
  br i1 %1957, label %1962, label %1958

; <label>:1958                                    ; preds = %1953
  %1959 = and i32 %1956, 31
  %1960 = shl i32 1, %1959
  %1961 = add i32 %1960, -1
  br label %1962

; <label>:1962                                    ; preds = %1958, %1953
  %1963 = phi i32 [ %1961, %1958 ], [ -1, %1953 ]
  %1964 = shl i32 %1963, %1403
  %1965 = xor i32 %1964, -1
  %1966 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1967 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1966, i32 1, i32 %1402, i32 undef, i32 undef, i32 %1965)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1968 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1969 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1968, i32 2, i32 %1402, i32 undef, i32 undef, i32 %1940)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1970 = icmp ugt i32 %1941, 32
  br i1 %1970, label %1971, label %2672

; <label>:1971                                    ; preds = %1962
  %1972 = add i32 %1919, %1868
  %1973 = and i32 %1972, 31
  %1974 = shl i32 -1, %1973
  %1975 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1976 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1975, i32 1, i32 %1955, i32 undef, i32 undef, i32 %1974)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %1977 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1978 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1977, i32 2, i32 %1955, i32 undef, i32 undef, i32 %1954)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %2672

; <label>:1979                                    ; preds = %1395
  %1980 = icmp eq i32 %93, 4
  br i1 %1980, label %1981, label %2672

; <label>:1981                                    ; preds = %1979
  %1982 = mul i32 %134, %89
  %1983 = add i32 %88, %31
  %1984 = lshr i32 %1982, 5
  %1985 = shl nuw nsw i32 %1984, 2
  %1986 = add i32 %1983, %1985
  %1987 = and i32 %1982, 31
  %1988 = add i32 %1986, 4
  %1989 = mul nuw nsw i32 %232, %183
  %1990 = add i32 %231, %200
  %1991 = shl nuw nsw i32 %86, 1
  %1992 = lshr i32 %1989, 5
  %1993 = shl nuw nsw i32 %1992, 2
  %1994 = add i32 %1993, %1990
  %1995 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %1996 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1995, i32 %1994, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1997 = extractvalue %dx.types.ResRet.i32 %1996, 0
  %1998 = extractvalue %dx.types.ResRet.i32 %1996, 1
  %1999 = extractvalue %dx.types.ResRet.i32 %1996, 2
  %2000 = extractvalue %dx.types.ResRet.i32 %1996, 3
  %2001 = and i32 %1989, 31
  %2002 = lshr i32 %1997, %2001
  %2003 = icmp eq i32 %2001, 0
  br i1 %2003, label %2008, label %2004

; <label>:2004                                    ; preds = %1981
  %2005 = sub nsw i32 0, %1989
  %2006 = and i32 %2005, 31
  %2007 = shl i32 %1998, %2006
  br label %2008

; <label>:2008                                    ; preds = %2004, %1981
  %2009 = phi i32 [ %2007, %2004 ], [ 0, %1981 ]
  %2010 = or i32 %2009, %2002
  %2011 = lshr i32 %1998, %2001
  br i1 %2003, label %2016, label %2012

; <label>:2012                                    ; preds = %2008
  %2013 = sub nsw i32 0, %1989
  %2014 = and i32 %2013, 31
  %2015 = shl i32 %1999, %2014
  br label %2016

; <label>:2016                                    ; preds = %2012, %2008
  %2017 = phi i32 [ %2015, %2012 ], [ 0, %2008 ]
  %2018 = or i32 %2017, %2011
  %2019 = lshr i32 %1999, %2001
  br i1 %2003, label %2024, label %2020

; <label>:2020                                    ; preds = %2016
  %2021 = sub nsw i32 0, %1989
  %2022 = and i32 %2021, 31
  %2023 = shl i32 %2000, %2022
  br label %2024

; <label>:2024                                    ; preds = %2020, %2016
  %2025 = phi i32 [ %2023, %2020 ], [ 0, %2016 ]
  %2026 = or i32 %2025, %2019
  %2027 = lshr i32 %2000, %2001
  %2028 = shl i32 1, %1991
  %2029 = add i32 %2028, -1
  %2030 = and i32 %2010, %2029
  %2031 = shl i32 %2030, %1987
  %2032 = add nuw nsw i32 %1987, %1991
  %2033 = icmp ugt i32 %2032, 31
  br i1 %2033, label %2034, label %2038

; <label>:2034                                    ; preds = %2024
  %2035 = sub i32 0, %1982
  %2036 = and i32 %2035, 31
  %2037 = lshr i32 %2030, %2036
  br label %2038

; <label>:2038                                    ; preds = %2034, %2024
  %2039 = phi i32 [ %2037, %2034 ], [ 0, %2024 ]
  %2040 = add nuw nsw i32 %87, 1
  %2041 = select i1 %91, i32 %2040, i32 0
  %2042 = lshr i32 %2010, %1991
  %2043 = icmp eq i32 %86, 0
  br i1 %2043, label %2048, label %2044

; <label>:2044                                    ; preds = %2038
  %2045 = sub nsw i32 0, %1991
  %2046 = and i32 %2045, 30
  %2047 = shl i32 %2018, %2046
  br label %2048

; <label>:2048                                    ; preds = %2044, %2038
  %2049 = phi i32 [ %2047, %2044 ], [ 0, %2038 ]
  %2050 = or i32 %2049, %2042
  %2051 = lshr i32 %2018, %1991
  br i1 %2043, label %2056, label %2052

; <label>:2052                                    ; preds = %2048
  %2053 = sub nsw i32 0, %1991
  %2054 = and i32 %2053, 30
  %2055 = shl i32 %2026, %2054
  br label %2056

; <label>:2056                                    ; preds = %2052, %2048
  %2057 = phi i32 [ %2055, %2052 ], [ 0, %2048 ]
  %2058 = or i32 %2057, %2051
  %2059 = lshr i32 %2026, %1991
  br i1 %2043, label %2064, label %2060

; <label>:2060                                    ; preds = %2056
  %2061 = sub nsw i32 0, %1991
  %2062 = and i32 %2061, 30
  %2063 = shl i32 %2027, %2062
  br label %2064

; <label>:2064                                    ; preds = %2060, %2056
  %2065 = phi i32 [ %2063, %2060 ], [ 0, %2056 ]
  %2066 = or i32 %2065, %2059
  %2067 = shl i32 1, %2041
  %2068 = add i32 %2067, -1
  %2069 = and i32 %2050, %2068
  %2070 = add i32 %1982, %1991
  %2071 = and i32 %2070, 31
  %2072 = shl i32 %2069, %2071
  %2073 = select i1 %2033, i32 %2072, i32 0
  %2074 = or i32 %2073, %2039
  %2075 = select i1 %2033, i32 0, i32 %2072
  %2076 = or i32 %2075, %2031
  %2077 = add nuw nsw i32 %2032, %2041
  %2078 = xor i32 %2077, %2032
  %2079 = icmp ugt i32 %2078, 31
  br i1 %2079, label %2080, label %2088

; <label>:2080                                    ; preds = %2064
  br i1 %2033, label %2081, label %2083

; <label>:2081                                    ; preds = %2080
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %1995, i32 %1988, i32 undef, i32 %2074, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2082 = add i32 %1986, 8
  br label %2083

; <label>:2083                                    ; preds = %2081, %2080
  %2084 = phi i32 [ %2082, %2081 ], [ %1988, %2080 ]
  %2085 = sub nsw i32 0, %2032
  %2086 = and i32 %2085, 31
  %2087 = lshr i32 %2069, %2086
  br label %2088

; <label>:2088                                    ; preds = %2083, %2064
  %2089 = phi i32 [ %2087, %2083 ], [ %2074, %2064 ]
  %2090 = phi i32 [ %2084, %2083 ], [ %1988, %2064 ]
  %2091 = and i32 %212, 15
  %2092 = lshr i32 %212, 4
  %2093 = and i32 %2092, 15
  %2094 = lshr i32 %212, 8
  %2095 = and i32 %2094, 15
  %2096 = lshr i32 %212, 12
  %2097 = and i32 %2096, 15
  %2098 = lshr i32 %2050, %2041
  %2099 = shl i32 1, %2091
  %2100 = add i32 %2099, -1
  %2101 = and i32 %2098, %2100
  %2102 = add nuw nsw i32 %2091, %2041
  %2103 = and i32 %2102, 31
  %2104 = lshr i32 %2050, %2103
  %2105 = shl i32 1, %2093
  %2106 = add i32 %2105, 16777215
  %2107 = and i32 %2104, %2106
  %2108 = add nuw nsw i32 %2102, %2093
  %2109 = and i32 %2108, 31
  %2110 = lshr i32 %2050, %2109
  %2111 = icmp eq i32 %2109, 0
  br i1 %2111, label %2116, label %2112

; <label>:2112                                    ; preds = %2088
  %2113 = sub nsw i32 0, %2108
  %2114 = and i32 %2113, 31
  %2115 = shl i32 %2058, %2114
  br label %2116

; <label>:2116                                    ; preds = %2112, %2088
  %2117 = phi i32 [ %2115, %2112 ], [ 0, %2088 ]
  %2118 = or i32 %2117, %2110
  %2119 = lshr i32 %2058, %2109
  br i1 %2111, label %2124, label %2120

; <label>:2120                                    ; preds = %2116
  %2121 = sub nsw i32 0, %2108
  %2122 = and i32 %2121, 31
  %2123 = shl i32 %2066, %2122
  br label %2124

; <label>:2124                                    ; preds = %2120, %2116
  %2125 = phi i32 [ %2123, %2120 ], [ 0, %2116 ]
  %2126 = or i32 %2125, %2119
  %2127 = add nuw nsw i32 %2095, %2097
  %2128 = icmp eq i32 %95, 0
  br i1 %2128, label %2189, label %2129

; <label>:2129                                    ; preds = %2124
  %2130 = shl i32 1, %2095
  %2131 = add i32 %2130, 65535
  %2132 = and i32 %2118, %2131
  %2133 = lshr i32 %2118, %2095
  %2134 = shl i32 1, %2097
  %2135 = add i32 %2134, 255
  %2136 = and i32 %2133, %2135
  %2137 = shl i32 %2107, 8
  %2138 = or i32 %2137, %2101
  %2139 = shl i32 %2132, 16
  %2140 = or i32 %2138, %2139
  %2141 = shl i32 %2136, 24
  %2142 = or i32 %2140, %2141
  %2143 = and i32 %63, 15
  %2144 = lshr i32 %63, 4
  %2145 = and i32 %2144, 15
  %2146 = lshr i32 %63, 8
  %2147 = and i32 %2146, 15
  %2148 = lshr i32 %63, 12
  %2149 = and i32 %2148, 15
  %2150 = sub i32 %211, %62
  %2151 = add i32 %2150, %2142
  %2152 = and i32 %2151, 255
  %2153 = lshr i32 %2151, 8
  %2154 = and i32 %2153, 255
  %2155 = shl i32 %2154, %2143
  %2156 = lshr i32 %2151, 16
  %2157 = and i32 %2156, 255
  %2158 = add nuw nsw i32 %2145, %2143
  %2159 = shl i32 %2157, %2158
  %2160 = lshr i32 %2151, 24
  %2161 = add nuw nsw i32 %2158, %2147
  %2162 = and i32 %2161, 31
  %2163 = shl i32 %2160, %2162
  %2164 = or i32 %2163, %2152
  %2165 = or i32 %2164, %2155
  %2166 = or i32 %2165, %2159
  %2167 = add nuw nsw i32 %2161, %2149
  %2168 = and i32 %2077, 31
  %2169 = shl i32 %2166, %2168
  %2170 = icmp ugt i32 %2077, 31
  %2171 = select i1 %2170, i32 %2169, i32 0
  %2172 = or i32 %2171, %2089
  %2173 = select i1 %2170, i32 0, i32 %2169
  %2174 = or i32 %2173, %2076
  %2175 = add nuw nsw i32 %2167, %2077
  %2176 = xor i32 %2175, %2077
  %2177 = icmp ugt i32 %2176, 31
  br i1 %2177, label %2178, label %2189

; <label>:2178                                    ; preds = %2129
  br i1 %2170, label %2179, label %2182

; <label>:2179                                    ; preds = %2178
  %2180 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2180, i32 %2090, i32 undef, i32 %2172, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2181 = add i32 %2090, 4
  br label %2182

; <label>:2182                                    ; preds = %2179, %2178
  %2183 = phi i32 [ %2181, %2179 ], [ %2090, %2178 ]
  %2184 = icmp eq i32 %2168, 0
  br i1 %2184, label %2189, label %2185

; <label>:2185                                    ; preds = %2182
  %2186 = sub nsw i32 0, %2077
  %2187 = and i32 %2186, 31
  %2188 = lshr i32 %2166, %2187
  br label %2189

; <label>:2189                                    ; preds = %2185, %2182, %2129, %2124
  %2190 = phi i32 [ 0, %2182 ], [ %2188, %2185 ], [ %2172, %2129 ], [ %2089, %2124 ]
  %2191 = phi i32 [ %2175, %2182 ], [ %2175, %2185 ], [ %2175, %2129 ], [ %2077, %2124 ]
  %2192 = phi i32 [ %2183, %2182 ], [ %2183, %2185 ], [ %2090, %2129 ], [ %2090, %2124 ]
  %2193 = phi i32 [ %2174, %2182 ], [ %2174, %2185 ], [ %2174, %2129 ], [ %2076, %2124 ]
  %2194 = add i32 %233, %200
  %2195 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %2196 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2195, i32 %2194, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2197 = extractvalue %dx.types.ResRet.i32 %2196, 0
  %2198 = extractvalue %dx.types.ResRet.i32 %2196, 1
  %2199 = and i32 %2197, 31
  %2200 = lshr i32 %2197, 5
  %2201 = and i32 %2198, 31
  %2202 = lshr i32 %2198, 5
  %2203 = add i32 %96, %29
  %2204 = add i32 %2203, %41
  %2205 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2206 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2205, i32 %2204, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2207 = extractvalue %dx.types.ResRet.i32 %2206, 0
  %2208 = extractvalue %dx.types.ResRet.i32 %2206, 1
  %2209 = and i32 %2207, 31
  %2210 = lshr i32 %2207, 5
  %2211 = and i32 %2208, 31
  %2212 = lshr i32 %2208, 5
  %2213 = add nuw nsw i32 %2108, %1991
  %2214 = add nuw nsw i32 %2213, %2127
  %2215 = add i32 %2214, %1989
  %2216 = lshr i32 %2118, %2127
  %2217 = icmp eq i32 %2127, 0
  br i1 %2217, label %2222, label %2218

; <label>:2218                                    ; preds = %2189
  %2219 = sub nsw i32 0, %2127
  %2220 = and i32 %2219, 31
  %2221 = shl i32 %2126, %2220
  br label %2222

; <label>:2222                                    ; preds = %2218, %2189
  %2223 = phi i32 [ %2221, %2218 ], [ 0, %2189 ]
  %2224 = or i32 %2223, %2216
  %2225 = shl i32 1, %2199
  %2226 = add i32 %2225, -1
  %2227 = and i32 %2224, %2226
  %2228 = add nsw i32 %2199, %2215
  %2229 = ashr i32 %2228, 5
  %2230 = shl nsw i32 %2229, 2
  %2231 = add i32 %2230, %1990
  %2232 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2195, i32 %2231, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2233 = extractvalue %dx.types.ResRet.i32 %2232, 0
  %2234 = extractvalue %dx.types.ResRet.i32 %2232, 1
  %2235 = extractvalue %dx.types.ResRet.i32 %2232, 2
  %2236 = extractvalue %dx.types.ResRet.i32 %2232, 3
  %2237 = add i32 %2197, %2215
  %2238 = and i32 %2237, 31
  %2239 = lshr i32 %2233, %2238
  %2240 = icmp eq i32 %2238, 0
  br i1 %2240, label %2245, label %2241

; <label>:2241                                    ; preds = %2222
  %2242 = sub i32 0, %2237
  %2243 = and i32 %2242, 31
  %2244 = shl i32 %2234, %2243
  br label %2245

; <label>:2245                                    ; preds = %2241, %2222
  %2246 = phi i32 [ %2244, %2241 ], [ 0, %2222 ]
  %2247 = or i32 %2246, %2239
  %2248 = lshr i32 %2234, %2238
  br i1 %2240, label %2253, label %2249

; <label>:2249                                    ; preds = %2245
  %2250 = sub i32 0, %2237
  %2251 = and i32 %2250, 31
  %2252 = shl i32 %2235, %2251
  br label %2253

; <label>:2253                                    ; preds = %2249, %2245
  %2254 = phi i32 [ %2252, %2249 ], [ 0, %2245 ]
  %2255 = or i32 %2254, %2248
  %2256 = lshr i32 %2235, %2238
  br i1 %2240, label %2261, label %2257

; <label>:2257                                    ; preds = %2253
  %2258 = sub i32 0, %2237
  %2259 = and i32 %2258, 31
  %2260 = shl i32 %2236, %2259
  br label %2261

; <label>:2261                                    ; preds = %2257, %2253
  %2262 = phi i32 [ %2260, %2257 ], [ 0, %2253 ]
  %2263 = or i32 %2262, %2256
  %2264 = lshr i32 %2236, %2238
  %2265 = shl i32 1, %2201
  %2266 = add i32 %2265, -1
  %2267 = and i32 %2247, %2266
  %2268 = sub nsw i32 %2200, %2210
  %2269 = add i32 %2268, %2227
  %2270 = sub nsw i32 %2202, %2212
  %2271 = add i32 %2270, %2267
  %2272 = and i32 %2191, 31
  %2273 = shl i32 %2269, %2272
  %2274 = icmp ugt i32 %2191, 31
  %2275 = select i1 %2274, i32 %2273, i32 0
  %2276 = or i32 %2275, %2190
  %2277 = select i1 %2274, i32 0, i32 %2273
  %2278 = or i32 %2277, %2193
  %2279 = add nsw i32 %2209, %2191
  %2280 = xor i32 %2279, %2191
  %2281 = icmp ugt i32 %2280, 31
  br i1 %2281, label %2282, label %2290

; <label>:2282                                    ; preds = %2261
  br i1 %2274, label %2283, label %2285

; <label>:2283                                    ; preds = %2282
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2195, i32 %2192, i32 undef, i32 %2276, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2284 = add i32 %2192, 4
  br label %2285

; <label>:2285                                    ; preds = %2283, %2282
  %2286 = phi i32 [ %2284, %2283 ], [ %2192, %2282 ]
  %2287 = sub nsw i32 0, %2191
  %2288 = and i32 %2287, 31
  %2289 = lshr i32 %2269, %2288
  br label %2290

; <label>:2290                                    ; preds = %2285, %2261
  %2291 = phi i32 [ %2289, %2285 ], [ %2276, %2261 ]
  %2292 = phi i32 [ %2286, %2285 ], [ %2192, %2261 ]
  %2293 = add i32 %2207, %2191
  %2294 = and i32 %2293, 31
  %2295 = shl i32 %2271, %2294
  %2296 = icmp ugt i32 %2279, 31
  %2297 = select i1 %2296, i32 %2295, i32 0
  %2298 = or i32 %2291, %2297
  %2299 = select i1 %2296, i32 0, i32 %2295
  %2300 = or i32 %2278, %2299
  %2301 = add i32 %2279, %2211
  %2302 = xor i32 %2301, %2279
  %2303 = icmp ugt i32 %2302, 31
  br i1 %2303, label %2304, label %2313

; <label>:2304                                    ; preds = %2290
  br i1 %2296, label %2305, label %2308

; <label>:2305                                    ; preds = %2304
  %2306 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2306, i32 %2292, i32 undef, i32 %2298, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2307 = add i32 %2292, 4
  br label %2308

; <label>:2308                                    ; preds = %2305, %2304
  %2309 = phi i32 [ %2307, %2305 ], [ %2292, %2304 ]
  %2310 = sub i32 0, %2279
  %2311 = and i32 %2310, 31
  %2312 = lshr i32 %2271, %2311
  br label %2313

; <label>:2313                                    ; preds = %2308, %2290
  %2314 = phi i32 [ %2312, %2308 ], [ %2298, %2290 ]
  %2315 = phi i32 [ %2309, %2308 ], [ %2292, %2290 ]
  %2316 = add i32 %200, 8
  %2317 = add i32 %2316, %233
  %2318 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %2319 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2318, i32 %2317, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2320 = extractvalue %dx.types.ResRet.i32 %2319, 0
  %2321 = extractvalue %dx.types.ResRet.i32 %2319, 1
  %2322 = and i32 %2320, 31
  %2323 = lshr i32 %2320, 5
  %2324 = and i32 %2321, 31
  %2325 = lshr i32 %2321, 5
  %2326 = add i32 %29, 8
  %2327 = add i32 %2326, %96
  %2328 = add i32 %2327, %41
  %2329 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2330 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2329, i32 %2328, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2331 = extractvalue %dx.types.ResRet.i32 %2330, 0
  %2332 = extractvalue %dx.types.ResRet.i32 %2330, 1
  %2333 = and i32 %2331, 31
  %2334 = lshr i32 %2331, 5
  %2335 = and i32 %2332, 31
  %2336 = lshr i32 %2332, 5
  %2337 = add nsw i32 %2228, %2201
  %2338 = lshr i32 %2247, %2201
  %2339 = icmp eq i32 %2201, 0
  br i1 %2339, label %2344, label %2340

; <label>:2340                                    ; preds = %2313
  %2341 = sub i32 0, %2198
  %2342 = and i32 %2341, 31
  %2343 = shl i32 %2255, %2342
  br label %2344

; <label>:2344                                    ; preds = %2340, %2313
  %2345 = phi i32 [ %2343, %2340 ], [ 0, %2313 ]
  %2346 = or i32 %2345, %2338
  %2347 = lshr i32 %2255, %2201
  br i1 %2339, label %2352, label %2348

; <label>:2348                                    ; preds = %2344
  %2349 = sub i32 0, %2198
  %2350 = and i32 %2349, 31
  %2351 = shl i32 %2263, %2350
  br label %2352

; <label>:2352                                    ; preds = %2348, %2344
  %2353 = phi i32 [ %2351, %2348 ], [ 0, %2344 ]
  %2354 = or i32 %2353, %2347
  %2355 = lshr i32 %2263, %2201
  br i1 %2339, label %2360, label %2356

; <label>:2356                                    ; preds = %2352
  %2357 = sub i32 0, %2198
  %2358 = and i32 %2357, 31
  %2359 = shl i32 %2264, %2358
  br label %2360

; <label>:2360                                    ; preds = %2356, %2352
  %2361 = phi i32 [ %2359, %2356 ], [ 0, %2352 ]
  %2362 = or i32 %2361, %2355
  %2363 = shl i32 1, %2322
  %2364 = add i32 %2363, -1
  %2365 = and i32 %2346, %2364
  %2366 = add nsw i32 %2337, %2322
  %2367 = lshr i32 %2346, %2322
  %2368 = icmp eq i32 %2322, 0
  br i1 %2368, label %2373, label %2369

; <label>:2369                                    ; preds = %2360
  %2370 = sub i32 0, %2320
  %2371 = and i32 %2370, 31
  %2372 = shl i32 %2354, %2371
  br label %2373

; <label>:2373                                    ; preds = %2369, %2360
  %2374 = phi i32 [ %2372, %2369 ], [ 0, %2360 ]
  %2375 = or i32 %2374, %2367
  %2376 = lshr i32 %2354, %2322
  br i1 %2368, label %2381, label %2377

; <label>:2377                                    ; preds = %2373
  %2378 = sub i32 0, %2320
  %2379 = and i32 %2378, 31
  %2380 = shl i32 %2362, %2379
  br label %2381

; <label>:2381                                    ; preds = %2377, %2373
  %2382 = phi i32 [ %2380, %2377 ], [ 0, %2373 ]
  %2383 = or i32 %2382, %2376
  %2384 = shl i32 1, %2324
  %2385 = add i32 %2384, -1
  %2386 = and i32 %2375, %2385
  %2387 = sub nsw i32 %2323, %2334
  %2388 = add i32 %2387, %2365
  %2389 = sub nsw i32 %2325, %2336
  %2390 = add i32 %2389, %2386
  %2391 = add i32 %2279, %2208
  %2392 = and i32 %2391, 31
  %2393 = shl i32 %2388, %2392
  %2394 = icmp ugt i32 %2301, 31
  %2395 = select i1 %2394, i32 %2393, i32 0
  %2396 = or i32 %2395, %2314
  %2397 = select i1 %2394, i32 0, i32 %2393
  %2398 = or i32 %2300, %2397
  %2399 = add i32 %2333, %2301
  %2400 = xor i32 %2399, %2301
  %2401 = icmp ugt i32 %2400, 31
  br i1 %2401, label %2402, label %2410

; <label>:2402                                    ; preds = %2381
  br i1 %2394, label %2403, label %2405

; <label>:2403                                    ; preds = %2402
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2318, i32 %2315, i32 undef, i32 %2396, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2404 = add i32 %2315, 4
  br label %2405

; <label>:2405                                    ; preds = %2403, %2402
  %2406 = phi i32 [ %2404, %2403 ], [ %2315, %2402 ]
  %2407 = sub i32 0, %2301
  %2408 = and i32 %2407, 31
  %2409 = lshr i32 %2388, %2408
  br label %2410

; <label>:2410                                    ; preds = %2405, %2381
  %2411 = phi i32 [ %2409, %2405 ], [ %2396, %2381 ]
  %2412 = phi i32 [ %2406, %2405 ], [ %2315, %2381 ]
  %2413 = add i32 %2331, %2301
  %2414 = and i32 %2413, 31
  %2415 = shl i32 %2390, %2414
  %2416 = icmp ugt i32 %2399, 31
  %2417 = select i1 %2416, i32 %2415, i32 0
  %2418 = or i32 %2411, %2417
  %2419 = select i1 %2416, i32 0, i32 %2415
  %2420 = or i32 %2398, %2419
  %2421 = add i32 %2399, %2335
  %2422 = xor i32 %2421, %2399
  %2423 = icmp ugt i32 %2422, 31
  br i1 %2423, label %2424, label %2433

; <label>:2424                                    ; preds = %2410
  br i1 %2416, label %2425, label %2428

; <label>:2425                                    ; preds = %2424
  %2426 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2426, i32 %2412, i32 undef, i32 %2418, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2427 = add i32 %2412, 4
  br label %2428

; <label>:2428                                    ; preds = %2425, %2424
  %2429 = phi i32 [ %2427, %2425 ], [ %2412, %2424 ]
  %2430 = sub i32 0, %2399
  %2431 = and i32 %2430, 31
  %2432 = lshr i32 %2390, %2431
  br label %2433

; <label>:2433                                    ; preds = %2428, %2410
  %2434 = phi i32 [ %2432, %2428 ], [ %2418, %2410 ]
  %2435 = phi i32 [ %2429, %2428 ], [ %2412, %2410 ]
  %2436 = add i32 %200, 16
  %2437 = add i32 %2436, %233
  %2438 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %2439 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2438, i32 %2437, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2440 = extractvalue %dx.types.ResRet.i32 %2439, 0
  %2441 = extractvalue %dx.types.ResRet.i32 %2439, 1
  %2442 = and i32 %2440, 31
  %2443 = lshr i32 %2440, 5
  %2444 = and i32 %2441, 31
  %2445 = lshr i32 %2441, 5
  %2446 = add i32 %42, %96
  %2447 = add i32 %2446, %41
  %2448 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2449 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2448, i32 %2447, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2450 = extractvalue %dx.types.ResRet.i32 %2449, 0
  %2451 = extractvalue %dx.types.ResRet.i32 %2449, 1
  %2452 = and i32 %2450, 31
  %2453 = lshr i32 %2450, 5
  %2454 = and i32 %2451, 31
  %2455 = lshr i32 %2451, 5
  %2456 = add nsw i32 %2366, %2324
  %2457 = lshr i32 %2375, %2324
  %2458 = icmp eq i32 %2324, 0
  br i1 %2458, label %2463, label %2459

; <label>:2459                                    ; preds = %2433
  %2460 = sub i32 0, %2321
  %2461 = and i32 %2460, 31
  %2462 = shl i32 %2383, %2461
  br label %2463

; <label>:2463                                    ; preds = %2459, %2433
  %2464 = phi i32 [ %2462, %2459 ], [ 0, %2433 ]
  %2465 = or i32 %2464, %2457
  %2466 = shl i32 1, %2442
  %2467 = add i32 %2466, -1
  %2468 = and i32 %2465, %2467
  %2469 = add nsw i32 %2442, %2456
  %2470 = ashr i32 %2469, 5
  %2471 = shl nsw i32 %2470, 2
  %2472 = add i32 %2471, %1990
  %2473 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2438, i32 %2472, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2474 = extractvalue %dx.types.ResRet.i32 %2473, 0
  %2475 = extractvalue %dx.types.ResRet.i32 %2473, 1
  %2476 = extractvalue %dx.types.ResRet.i32 %2473, 2
  %2477 = add i32 %2440, %2456
  %2478 = and i32 %2477, 31
  %2479 = lshr i32 %2474, %2478
  %2480 = icmp eq i32 %2478, 0
  br i1 %2480, label %2485, label %2481

; <label>:2481                                    ; preds = %2463
  %2482 = sub i32 0, %2477
  %2483 = and i32 %2482, 31
  %2484 = shl i32 %2475, %2483
  br label %2485

; <label>:2485                                    ; preds = %2481, %2463
  %2486 = phi i32 [ %2484, %2481 ], [ 0, %2463 ]
  %2487 = or i32 %2486, %2479
  %2488 = lshr i32 %2475, %2478
  br i1 %2480, label %2493, label %2489

; <label>:2489                                    ; preds = %2485
  %2490 = sub i32 0, %2477
  %2491 = and i32 %2490, 31
  %2492 = shl i32 %2476, %2491
  br label %2493

; <label>:2493                                    ; preds = %2489, %2485
  %2494 = phi i32 [ %2492, %2489 ], [ 0, %2485 ]
  %2495 = or i32 %2494, %2488
  %2496 = shl i32 1, %2444
  %2497 = add i32 %2496, -1
  %2498 = and i32 %2487, %2497
  %2499 = sub nsw i32 %2443, %2453
  %2500 = add i32 %2499, %2468
  %2501 = sub nsw i32 %2445, %2455
  %2502 = add i32 %2501, %2498
  %2503 = add i32 %2399, %2332
  %2504 = and i32 %2503, 31
  %2505 = shl i32 %2500, %2504
  %2506 = icmp ugt i32 %2421, 31
  %2507 = select i1 %2506, i32 %2505, i32 0
  %2508 = or i32 %2507, %2434
  %2509 = select i1 %2506, i32 0, i32 %2505
  %2510 = or i32 %2420, %2509
  %2511 = add i32 %2452, %2421
  %2512 = xor i32 %2511, %2421
  %2513 = icmp ugt i32 %2512, 31
  br i1 %2513, label %2514, label %2522

; <label>:2514                                    ; preds = %2493
  br i1 %2506, label %2515, label %2517

; <label>:2515                                    ; preds = %2514
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2438, i32 %2435, i32 undef, i32 %2508, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2516 = add i32 %2435, 4
  br label %2517

; <label>:2517                                    ; preds = %2515, %2514
  %2518 = phi i32 [ %2516, %2515 ], [ %2435, %2514 ]
  %2519 = sub i32 0, %2421
  %2520 = and i32 %2519, 31
  %2521 = lshr i32 %2500, %2520
  br label %2522

; <label>:2522                                    ; preds = %2517, %2493
  %2523 = phi i32 [ %2521, %2517 ], [ %2508, %2493 ]
  %2524 = phi i32 [ %2518, %2517 ], [ %2435, %2493 ]
  %2525 = add i32 %2450, %2421
  %2526 = and i32 %2525, 31
  %2527 = shl i32 %2502, %2526
  %2528 = icmp ugt i32 %2511, 31
  %2529 = select i1 %2528, i32 %2527, i32 0
  %2530 = or i32 %2523, %2529
  %2531 = select i1 %2528, i32 0, i32 %2527
  %2532 = or i32 %2510, %2531
  %2533 = add i32 %2511, %2454
  %2534 = xor i32 %2533, %2511
  %2535 = icmp ugt i32 %2534, 31
  br i1 %2535, label %2536, label %2545

; <label>:2536                                    ; preds = %2522
  br i1 %2528, label %2537, label %2540

; <label>:2537                                    ; preds = %2536
  %2538 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2538, i32 %2524, i32 undef, i32 %2530, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2539 = add i32 %2524, 4
  br label %2540

; <label>:2540                                    ; preds = %2537, %2536
  %2541 = phi i32 [ %2539, %2537 ], [ %2524, %2536 ]
  %2542 = sub i32 0, %2511
  %2543 = and i32 %2542, 31
  %2544 = lshr i32 %2502, %2543
  br label %2545

; <label>:2545                                    ; preds = %2540, %2522
  %2546 = phi i32 [ %2544, %2540 ], [ %2530, %2522 ]
  %2547 = phi i32 [ %2541, %2540 ], [ %2524, %2522 ]
  %2548 = add i32 %200, 24
  %2549 = add i32 %2548, %233
  %2550 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %2551 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2550, i32 %2549, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2552 = extractvalue %dx.types.ResRet.i32 %2551, 0
  %2553 = extractvalue %dx.types.ResRet.i32 %2551, 1
  %2554 = and i32 %2552, 31
  %2555 = lshr i32 %2552, 5
  %2556 = and i32 %2553, 31
  %2557 = lshr i32 %2553, 5
  %2558 = add i32 %45, %96
  %2559 = add i32 %2558, %41
  %2560 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %2561 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2560, i32 %2559, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2562 = extractvalue %dx.types.ResRet.i32 %2561, 0
  %2563 = extractvalue %dx.types.ResRet.i32 %2561, 1
  %2564 = and i32 %2562, 31
  %2565 = lshr i32 %2562, 5
  %2566 = and i32 %2563, 31
  %2567 = lshr i32 %2563, 5
  %2568 = lshr i32 %2487, %2444
  %2569 = icmp eq i32 %2444, 0
  br i1 %2569, label %2574, label %2570

; <label>:2570                                    ; preds = %2545
  %2571 = sub i32 0, %2441
  %2572 = and i32 %2571, 31
  %2573 = shl i32 %2495, %2572
  br label %2574

; <label>:2574                                    ; preds = %2570, %2545
  %2575 = phi i32 [ %2573, %2570 ], [ 0, %2545 ]
  %2576 = or i32 %2575, %2568
  %2577 = lshr i32 %2495, %2444
  br i1 %2569, label %2582, label %2578

; <label>:2578                                    ; preds = %2574
  %2579 = sub i32 0, %2441
  %2580 = and i32 %2579, 31
  %2581 = shl i32 %2362, %2580
  br label %2582

; <label>:2582                                    ; preds = %2578, %2574
  %2583 = phi i32 [ %2581, %2578 ], [ 0, %2574 ]
  %2584 = shl i32 1, %2554
  %2585 = add i32 %2584, -1
  %2586 = and i32 %2576, %2585
  %2587 = lshr i32 %2576, %2554
  %2588 = icmp eq i32 %2554, 0
  br i1 %2588, label %2594, label %2589

; <label>:2589                                    ; preds = %2582
  %2590 = or i32 %2583, %2577
  %2591 = sub i32 0, %2552
  %2592 = and i32 %2591, 31
  %2593 = shl i32 %2590, %2592
  br label %2594

; <label>:2594                                    ; preds = %2589, %2582
  %2595 = phi i32 [ %2593, %2589 ], [ 0, %2582 ]
  %2596 = or i32 %2595, %2587
  %2597 = shl i32 1, %2556
  %2598 = add i32 %2597, -1
  %2599 = and i32 %2596, %2598
  %2600 = sub nsw i32 %2555, %2565
  %2601 = add i32 %2600, %2586
  %2602 = sub nsw i32 %2557, %2567
  %2603 = add i32 %2602, %2599
  %2604 = add i32 %2511, %2451
  %2605 = and i32 %2604, 31
  %2606 = shl i32 %2601, %2605
  %2607 = icmp ugt i32 %2533, 31
  %2608 = select i1 %2607, i32 %2606, i32 0
  %2609 = or i32 %2608, %2546
  %2610 = select i1 %2607, i32 0, i32 %2606
  %2611 = or i32 %2532, %2610
  %2612 = add i32 %2564, %2533
  %2613 = xor i32 %2612, %2533
  %2614 = icmp ugt i32 %2613, 31
  br i1 %2614, label %2615, label %2623

; <label>:2615                                    ; preds = %2594
  br i1 %2607, label %2616, label %2618

; <label>:2616                                    ; preds = %2615
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2550, i32 %2547, i32 undef, i32 %2609, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2617 = add i32 %2547, 4
  br label %2618

; <label>:2618                                    ; preds = %2616, %2615
  %2619 = phi i32 [ %2617, %2616 ], [ %2547, %2615 ]
  %2620 = sub i32 0, %2533
  %2621 = and i32 %2620, 31
  %2622 = lshr i32 %2601, %2621
  br label %2623

; <label>:2623                                    ; preds = %2618, %2594
  %2624 = phi i32 [ %2622, %2618 ], [ %2609, %2594 ]
  %2625 = phi i32 [ %2619, %2618 ], [ %2547, %2594 ]
  %2626 = add i32 %2562, %2533
  %2627 = and i32 %2626, 31
  %2628 = shl i32 %2603, %2627
  %2629 = icmp ugt i32 %2612, 31
  %2630 = select i1 %2629, i32 %2628, i32 0
  %2631 = or i32 %2624, %2630
  %2632 = select i1 %2629, i32 0, i32 %2628
  %2633 = or i32 %2611, %2632
  %2634 = add i32 %2612, %2566
  %2635 = xor i32 %2634, %2612
  %2636 = icmp ugt i32 %2635, 31
  br i1 %2636, label %2637, label %2646

; <label>:2637                                    ; preds = %2623
  br i1 %2629, label %2638, label %2641

; <label>:2638                                    ; preds = %2637
  %2639 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  call void @dx.op.rawBufferStore.i32(i32 140, %dx.types.Handle %2639, i32 %2625, i32 undef, i32 %2631, i32 undef, i32 undef, i32 undef, i8 1, i32 4)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %2640 = add i32 %2625, 4
  br label %2641

; <label>:2641                                    ; preds = %2638, %2637
  %2642 = phi i32 [ %2640, %2638 ], [ %2625, %2637 ]
  %2643 = sub i32 0, %2612
  %2644 = and i32 %2643, 31
  %2645 = lshr i32 %2603, %2644
  br label %2646

; <label>:2646                                    ; preds = %2641, %2623
  %2647 = phi i32 [ %2645, %2641 ], [ %2631, %2623 ]
  %2648 = phi i32 [ %2642, %2641 ], [ %2625, %2623 ]
  %2649 = sub i32 %2634, %1987
  %2650 = icmp ugt i32 %2649, 31
  br i1 %2650, label %2655, label %2651

; <label>:2651                                    ; preds = %2646
  %2652 = and i32 %2649, 31
  %2653 = shl i32 1, %2652
  %2654 = add i32 %2653, -1
  br label %2655

; <label>:2655                                    ; preds = %2651, %2646
  %2656 = phi i32 [ %2654, %2651 ], [ -1, %2646 ]
  %2657 = shl i32 %2656, %1987
  %2658 = xor i32 %2657, -1
  %2659 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %2660 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2659, i32 1, i32 %1986, i32 undef, i32 undef, i32 %2658)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %2661 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %2662 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2661, i32 2, i32 %1986, i32 undef, i32 undef, i32 %2633)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %2663 = icmp ugt i32 %2634, 32
  br i1 %2663, label %2664, label %2672

; <label>:2664                                    ; preds = %2655
  %2665 = add i32 %2612, %2563
  %2666 = and i32 %2665, 31
  %2667 = shl i32 -1, %2666
  %2668 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %2669 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2668, i32 1, i32 %2648, i32 undef, i32 undef, i32 %2667)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %2670 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4107, i32 0 })  ; AnnotateHandle(res,props)  resource: RWByteAddressBuffer
  %2671 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %2670, i32 2, i32 %2648, i32 undef, i32 undef, i32 %2647)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %2672

; <label>:2672                                    ; preds = %2664, %2655, %1979, %1971, %1962, %1387, %1378, %935, %926, %594, %585
  %2673 = add i32 %132, %24
  %2674 = icmp ult i32 %2673, %54
  br i1 %2674, label %127, label %2675

; <label>:2675                                    ; preds = %2672
  br label %2676

; <label>:2676                                    ; preds = %2675, %124, %18, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.waveGetLaneCount(i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.waveAllOp(i32, i1) #3

; Function Attrs: nounwind
declare i32 @dx.op.wavePrefixOp(i32, i1) #3

; Function Attrs: nounwind
declare i32 @dx.op.wavePrefixOp.i32(i32, i32, i8, i8) #3

; Function Attrs: nounwind
declare i32 @dx.op.waveReadLaneAt.i32(i32, i32, i32) #3

; Function Attrs: nounwind
declare %dx.types.fouri32 @dx.op.waveActiveBallot(i32, i1) #3

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i8, i32) #3

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate nounwind }
attributes #2 = { nounwind readonly }
attributes #3 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!15}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !11, !13, null}
!5 = !{!6, !8, !10}
!6 = !{i32 0, %"class.StructuredBuffer<FPackedClusterInstallInfo>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !9}
!9 = !{i32 1, i32 4}
!10 = !{i32 2, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 2, i32 1, i32 11, i32 0, null}
!11 = !{!12}
!12 = !{i32 0, %struct.RWByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i1 false, i1 false, i1 false, null}
!13 = !{!14}
!14 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 32, null}
!15 = !{void ()* @TranscodePageToGPU, !"TranscodePageToGPU", null, !4, !16}
!16 = !{i32 0, i64 524304, i32 4, !17, i32 11, !18, i32 5, !19}
!17 = !{i32 8, i32 1, i32 1}
!18 = !{i32 8}
!19 = !{i32 0}
!20 = !{!21, !21, i64 0}
!21 = !{!"int", !22, i64 0}
!22 = !{!"omnipotent char", !23, i64 0}
!23 = !{!"Simple C/C++ TBAA"}
