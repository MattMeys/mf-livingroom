;
; User Info:
;
;       Shader uses derivative ops
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; SV_Position              0   xyzw        1      POS   float       
; SV_RenderTargetArrayIndex     0   x           2  RTINDEX    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
;
; shader hash: ee99af1f6d7923843bbb09b1bff3d181
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0          noperspective       
; SV_Position              0          noperspective       
; SV_RenderTargetArrayIndex     0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
;
; Buffer Definitions:
;
; cbuffer $Globals
; {
;
;   struct hostlayout.$Globals
;   {
;
;       float4 ShadowBufferSize;                      ; Offset:    0
;       row_major float4x4 ShadowViewProjectionMatrices[6];; Offset:   16
;       float InvShadowmapResolution;                 ; Offset:  400
;       row_major float4x4 TranslatedWorldToShadowMatrix;; Offset:  416
;       float4 ShadowmapMinMax;                       ; Offset:  480
;       float4 ShadowInjectParams;                    ; Offset:  496
;       float4 DepthBiasParameters;                   ; Offset:  512
;       uint bStaticallyShadowed;                     ; Offset:  528
;       row_major float4x4 TranslatedWorldToStaticShadowMatrix;; Offset:  544
;       float4 StaticShadowBufferSize;                ; Offset:  608
;       uint VolumeCascadeIndex;                      ; Offset:  624
;       float4 LightFunctionParameters;               ; Offset:  640
;       row_major float4x4 LightFunctionTranslatedWorldToLight;; Offset:  656
;       float SpotlightMask;                          ; Offset:  720
;       int VirtualShadowMapId;                       ; Offset:  724
;   
;   } $Globals;                                       ; Offset:    0 Size:   728
;
; }
;
; cbuffer View
; {
;
;   struct hostlayout.View
;   {
;
;       struct hostlayout.struct.FViewConstants
;       {
;
;           row_major float4x4 TranslatedWorldToClip; ; Offset:    0
;           row_major float4x4 RelativeWorldToClip;   ; Offset:   64
;           row_major float4x4 ClipToRelativeWorld;   ; Offset:  128
;           row_major float4x4 TranslatedWorldToView; ; Offset:  192
;           row_major float4x4 ViewToTranslatedWorld; ; Offset:  256
;           row_major float4x4 TranslatedWorldToCameraView;; Offset:  320
;           row_major float4x4 CameraViewToTranslatedWorld;; Offset:  384
;           row_major float4x4 ViewToClip;            ; Offset:  448
;           row_major float4x4 ViewToClipNoAA;        ; Offset:  512
;           row_major float4x4 ClipToView;            ; Offset:  576
;           row_major float4x4 ClipToTranslatedWorld; ; Offset:  640
;           row_major float4x4 SVPositionToTranslatedWorld;; Offset:  704
;           row_major float4x4 ScreenToRelativeWorld; ; Offset:  768
;           row_major float4x4 ScreenToTranslatedWorld;; Offset:  832
;           row_major float4x4 MobileMultiviewShadowTransform;; Offset:  896
;           float3 ViewOriginHigh;                    ; Offset:  960
;           float Padding972;                         ; Offset:  972
;           float3 ViewForward;                       ; Offset:  976
;           float Padding988;                         ; Offset:  988
;           float3 ViewUp;                            ; Offset:  992
;           float Padding1004;                        ; Offset: 1004
;           float3 ViewRight;                         ; Offset: 1008
;           float Padding1020;                        ; Offset: 1020
;           float3 HMDViewNoRollUp;                   ; Offset: 1024
;           float Padding1036;                        ; Offset: 1036
;           float3 HMDViewNoRollRight;                ; Offset: 1040
;           float Padding1052;                        ; Offset: 1052
;           float4 InvDeviceZToWorldZTransform;       ; Offset: 1056
;           float4 ScreenPositionScaleBias;           ; Offset: 1072
;           float3 ViewOriginLow;                     ; Offset: 1088
;           float Padding1100;                        ; Offset: 1100
;           float3 TranslatedWorldCameraOrigin;       ; Offset: 1104
;           float Padding1116;                        ; Offset: 1116
;           float3 WorldViewOriginHigh;               ; Offset: 1120
;           float Padding1132;                        ; Offset: 1132
;           float3 WorldViewOriginLow;                ; Offset: 1136
;           float Padding1148;                        ; Offset: 1148
;           float3 PreViewTranslationHigh;            ; Offset: 1152
;           float Padding1164;                        ; Offset: 1164
;           float3 PreViewTranslationLow;             ; Offset: 1168
;           float Padding1180;                        ; Offset: 1180
;           row_major float4x4 PrevViewToClip;        ; Offset: 1184
;           row_major float4x4 PrevClipToView;        ; Offset: 1248
;           row_major float4x4 PrevTranslatedWorldToClip;; Offset: 1312
;           row_major float4x4 PrevTranslatedWorldToView;; Offset: 1376
;           row_major float4x4 PrevViewToTranslatedWorld;; Offset: 1440
;           row_major float4x4 PrevTranslatedWorldToCameraView;; Offset: 1504
;           row_major float4x4 PrevCameraViewToTranslatedWorld;; Offset: 1568
;           float3 PrevTranslatedWorldCameraOrigin;   ; Offset: 1632
;           float Padding1644;                        ; Offset: 1644
;           float3 PrevWorldCameraOriginHigh;         ; Offset: 1648
;           float Padding1660;                        ; Offset: 1660
;           float3 PrevWorldCameraOriginLow;          ; Offset: 1664
;           float Padding1676;                        ; Offset: 1676
;           float3 PrevWorldViewOriginHigh;           ; Offset: 1680
;           float Padding1692;                        ; Offset: 1692
;           float3 PrevWorldViewOriginLow;            ; Offset: 1696
;           float Padding1708;                        ; Offset: 1708
;           float3 PrevPreViewTranslationHigh;        ; Offset: 1712
;           float Padding1724;                        ; Offset: 1724
;           float3 PrevPreViewTranslationLow;         ; Offset: 1728
;           float Padding1740;                        ; Offset: 1740
;           float3 ViewTilePosition;                  ; Offset: 1744
;           float Padding1756;                        ; Offset: 1756
;           float3 RelativeWorldCameraOriginTO;       ; Offset: 1760
;           float Padding1772;                        ; Offset: 1772
;           float3 RelativeWorldViewOriginTO;         ; Offset: 1776
;           float Padding1788;                        ; Offset: 1788
;           float3 RelativePreViewTranslationTO;      ; Offset: 1792
;           float Padding1804;                        ; Offset: 1804
;           float3 PrevRelativeWorldCameraOriginTO;   ; Offset: 1808
;           float Padding1820;                        ; Offset: 1820
;           float3 PrevRelativeWorldViewOriginTO;     ; Offset: 1824
;           float Padding1836;                        ; Offset: 1836
;           float3 RelativePrevPreViewTranslationTO;  ; Offset: 1840
;           float Padding1852;                        ; Offset: 1852
;           row_major float4x4 PrevClipToRelativeWorld;; Offset: 1856
;           row_major float4x4 PrevScreenToTranslatedWorld;; Offset: 1920
;           row_major float4x4 ClipToPrevClip;        ; Offset: 1984
;           row_major float4x4 ClipToPrevClipWithAA;  ; Offset: 2048
;           float4 TemporalAAJitter;                  ; Offset: 2112
;           float4 GlobalClippingPlane;               ; Offset: 2128
;           float2 FieldOfViewWideAngles;             ; Offset: 2144
;           float2 PrevFieldOfViewWideAngles;         ; Offset: 2152
;           float4 ViewRectMin;                       ; Offset: 2160
;           float4 ViewSizeAndInvSize;                ; Offset: 2176
;           uint4 ViewRectMinAndSize;                 ; Offset: 2192
;           float4 LightProbeSizeRatioAndInvSizeRatio;; Offset: 2208
;           float4 BufferSizeAndInvSize;              ; Offset: 2224
;           float4 BufferBilinearUVMinMax;            ; Offset: 2240
;           float4 ScreenToViewSpace;                 ; Offset: 2256
;           float2 BufferToSceneTextureScale;         ; Offset: 2272
;           float2 ResolutionFractionAndInv;          ; Offset: 2280
;           int NumSceneColorMSAASamples;             ; Offset: 2288
;           float ProjectionDepthThicknessScale;      ; Offset: 2292
;           float PreExposure;                        ; Offset: 2296
;           float OneOverPreExposure;                 ; Offset: 2300
;           float4 DiffuseOverrideParameter;          ; Offset: 2304
;           float4 SpecularOverrideParameter;         ; Offset: 2320
;           float4 NormalOverrideParameter;           ; Offset: 2336
;           float2 RoughnessOverrideParameter;        ; Offset: 2352
;           float PrevFrameGameTime;                  ; Offset: 2360
;           float PrevFrameRealTime;                  ; Offset: 2364
;           float OutOfBoundsMask;                    ; Offset: 2368
;           float Padding2372;                        ; Offset: 2372
;           float Padding2376;                        ; Offset: 2376
;           float Padding2380;                        ; Offset: 2380
;           float3 WorldCameraMovementSinceLastFrame; ; Offset: 2384
;           float CullingSign;                        ; Offset: 2396
;           float NearPlane;                          ; Offset: 2400
;           float GameTime;                           ; Offset: 2404
;           float RealTime;                           ; Offset: 2408
;           float DeltaTime;                          ; Offset: 2412
;           float MaterialTextureMipBias;             ; Offset: 2416
;           float MaterialTextureDerivativeMultiply;  ; Offset: 2420
;           uint Random;                              ; Offset: 2424
;           uint FrameNumber;                         ; Offset: 2428
;           uint FrameCounter;                        ; Offset: 2432
;           uint StateFrameIndexMod8;                 ; Offset: 2436
;           uint StateFrameIndex;                     ; Offset: 2440
;           uint DebugViewModeMask;                   ; Offset: 2444
;           uint WorldIsPaused;                       ; Offset: 2448
;           float CameraCut;                          ; Offset: 2452
;           float UnlitViewmodeMask;                  ; Offset: 2456
;           float Padding2460;                        ; Offset: 2460
;           float4 DirectionalLightColor;             ; Offset: 2464
;           float3 DirectionalLightDirection;         ; Offset: 2480
;           float Padding2492;                        ; Offset: 2492
;           float4 TranslucencyLightingVolumeMin[2];  ; Offset: 2496
;           float4 TranslucencyLightingVolumeInvSize[2];; Offset: 2528
;           float4 TemporalAAParams;                  ; Offset: 2560
;           float4 CircleDOFParams;                   ; Offset: 2576
;           float DepthOfFieldSensorWidth;            ; Offset: 2592
;           float DepthOfFieldFocalDistance;          ; Offset: 2596
;           float DepthOfFieldScale;                  ; Offset: 2600
;           float DepthOfFieldFocalLength;            ; Offset: 2604
;           float DepthOfFieldFocalRegion;            ; Offset: 2608
;           float DepthOfFieldNearTransitionRegion;   ; Offset: 2612
;           float DepthOfFieldFarTransitionRegion;    ; Offset: 2616
;           float MotionBlurNormalizedToPixel;        ; Offset: 2620
;           float GeneralPurposeTweak;                ; Offset: 2624
;           float GeneralPurposeTweak2;               ; Offset: 2628
;           float DemosaicVposOffset;                 ; Offset: 2632
;           float DecalDepthBias;                     ; Offset: 2636
;           float3 IndirectLightingColorScale;        ; Offset: 2640
;           float Padding2652;                        ; Offset: 2652
;           float3 PrecomputedIndirectLightingColorScale;; Offset: 2656
;           float Padding2668;                        ; Offset: 2668
;           float3 PrecomputedIndirectSpecularColorScale;; Offset: 2672
;           float Padding2684;                        ; Offset: 2684
;           float4 AtmosphereLightDirection[2];       ; Offset: 2688
;           float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2720
;           float4 AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2752
;           float4 AtmosphereLightDiscLuminance[2];   ; Offset: 2784
;           float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2816
;           float4 SkyViewLutSizeAndInvSize;          ; Offset: 2848
;           float3 SkyCameraTranslatedWorldOrigin;    ; Offset: 2864
;           float Padding2876;                        ; Offset: 2876
;           float4 SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2880
;           row_major float4x4 SkyViewLutReferential; ; Offset: 2896
;           float4 SkyAtmosphereSkyLuminanceFactor;   ; Offset: 2960
;           float SkyAtmospherePresentInScene;        ; Offset: 2976
;           float SkyAtmosphereHeightFogContribution; ; Offset: 2980
;           float SkyAtmosphereBottomRadiusKm;        ; Offset: 2984
;           float SkyAtmosphereTopRadiusKm;           ; Offset: 2988
;           float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2992
;           float SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 3008
;           float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 3012
;           float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 3016
;           float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 3020
;           float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 3024
;           float SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 3028
;           float Padding3032;                        ; Offset: 3032
;           float Padding3036;                        ; Offset: 3036
;           float3 NormalCurvatureToRoughnessScaleBias;; Offset: 3040
;           float RenderingReflectionCaptureMask;     ; Offset: 3052
;           float RealTimeReflectionCapture;          ; Offset: 3056
;           float RealTimeReflectionCapturePreExposure;; Offset: 3060
;           float Padding3064;                        ; Offset: 3064
;           float Padding3068;                        ; Offset: 3068
;           float4 AmbientCubemapTint;                ; Offset: 3072
;           float AmbientCubemapIntensity;            ; Offset: 3088
;           float SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 3092
;           float SkyLightAffectReflectionFlag;       ; Offset: 3096
;           float SkyLightAffectGlobalIlluminationFlag;; Offset: 3100
;           float4 SkyLightColor;                     ; Offset: 3104
;           float SkyLightVolumetricScatteringIntensity;; Offset: 3120
;           float Padding3124;                        ; Offset: 3124
;           float Padding3128;                        ; Offset: 3128
;           float Padding3132;                        ; Offset: 3132
;           float4 MobileSkyIrradianceEnvironmentMap[8];; Offset: 3136
;           float MobilePreviewMode;                  ; Offset: 3264
;           float HMDEyePaddingOffset;                ; Offset: 3268
;           float ReflectionCubemapMaxMip;            ; Offset: 3272
;           float ShowDecalsMask;                     ; Offset: 3276
;           uint DistanceFieldAOSpecularOcclusionMode;; Offset: 3280
;           float IndirectCapsuleSelfShadowingIntensity;; Offset: 3284
;           float Padding3288;                        ; Offset: 3288
;           float Padding3292;                        ; Offset: 3292
;           float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3296
;           int StereoPassIndex;                      ; Offset: 3308
;           float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3312
;           float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3408
;           float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3504
;           float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3600
;           float GlobalDistanceFieldMipFactor;       ; Offset: 3696
;           float GlobalDistanceFieldMipTransition;   ; Offset: 3700
;           int GlobalDistanceFieldClipmapSizeInPages;; Offset: 3704
;           int Padding3708;                          ; Offset: 3708
;           float3 GlobalDistanceFieldInvPageAtlasSize;; Offset: 3712
;           float Padding3724;                        ; Offset: 3724
;           float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3728
;           float GlobalVolumeDimension;              ; Offset: 3740
;           float GlobalVolumeTexelSize;              ; Offset: 3744
;           float MaxGlobalDFAOConeDistance;          ; Offset: 3748
;           uint NumGlobalSDFClipmaps;                ; Offset: 3752
;           float CoveredExpandSurfaceScale;          ; Offset: 3756
;           float NotCoveredExpandSurfaceScale;       ; Offset: 3760
;           float NotCoveredMinStepScale;             ; Offset: 3764
;           float DitheredTransparencyStepThreshold;  ; Offset: 3768
;           float DitheredTransparencyTraceThreshold; ; Offset: 3772
;           int2 CursorPosition;                      ; Offset: 3776
;           float bCheckerboardSubsurfaceProfileRendering;; Offset: 3784
;           float Padding3788;                        ; Offset: 3788
;           float3 VolumetricFogInvGridSize;          ; Offset: 3792
;           float Padding3804;                        ; Offset: 3804
;           float3 VolumetricFogGridZParams;          ; Offset: 3808
;           float Padding3820;                        ; Offset: 3820
;           float2 VolumetricFogSVPosToVolumeUV;      ; Offset: 3824
;           float2 VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3832
;           float2 VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3840
;           float2 VolumetricFogPrevUVMax;            ; Offset: 3848
;           float2 VolumetricFogPrevUVMaxForTemporalBlend;; Offset: 3856
;           float2 VolumetricFogScreenToResourceUV;   ; Offset: 3864
;           float2 VolumetricFogUVMax;                ; Offset: 3872
;           float VolumetricFogMaxDistance;           ; Offset: 3880
;           float Padding3884;                        ; Offset: 3884
;           float3 VolumetricLightmapWorldToUVScale;  ; Offset: 3888
;           float Padding3900;                        ; Offset: 3900
;           float3 VolumetricLightmapWorldToUVAdd;    ; Offset: 3904
;           float Padding3916;                        ; Offset: 3916
;           float3 VolumetricLightmapIndirectionTextureSize;; Offset: 3920
;           float VolumetricLightmapBrickSize;        ; Offset: 3932
;           float3 VolumetricLightmapBrickTexelSize;  ; Offset: 3936
;           float IndirectLightingCacheShowFlag;      ; Offset: 3948
;           float EyeToPixelSpreadAngle;              ; Offset: 3952
;           float Padding3956;                        ; Offset: 3956
;           float Padding3960;                        ; Offset: 3960
;           float Padding3964;                        ; Offset: 3964
;           float4 XRPassthroughCameraUVs[2];         ; Offset: 3968
;           float GlobalVirtualTextureMipBias;        ; Offset: 4000
;           uint VirtualTextureFeedbackShift;         ; Offset: 4004
;           uint VirtualTextureFeedbackMask;          ; Offset: 4008
;           uint VirtualTextureFeedbackStride;        ; Offset: 4012
;           uint VirtualTextureFeedbackJitterOffset;  ; Offset: 4016
;           uint VirtualTextureFeedbackSampleOffset;  ; Offset: 4020
;           uint Padding4024;                         ; Offset: 4024
;           uint Padding4028;                         ; Offset: 4028
;           float4 RuntimeVirtualTextureMipLevel;     ; Offset: 4032
;           float2 RuntimeVirtualTexturePackHeight;   ; Offset: 4048
;           float Padding4056;                        ; Offset: 4056
;           float Padding4060;                        ; Offset: 4060
;           float4 RuntimeVirtualTextureDebugParams;  ; Offset: 4064
;           int FarShadowStaticMeshLODBias;           ; Offset: 4080
;           float MinRoughness;                       ; Offset: 4084
;           float Padding4088;                        ; Offset: 4088
;           float Padding4092;                        ; Offset: 4092
;           float4 HairRenderInfo;                    ; Offset: 4096
;           uint EnableSkyLight;                      ; Offset: 4112
;           uint HairRenderInfoBits;                  ; Offset: 4116
;           uint HairComponents;                      ; Offset: 4120
;           float bSubsurfacePostprocessEnabled;      ; Offset: 4124
;           float4 SSProfilesTextureSizeAndInvSize;   ; Offset: 4128
;           float4 SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 4144
;           float4 SpecularProfileTextureSizeAndInvSize;; Offset: 4160
;           float3 PhysicsFieldClipmapCenter;         ; Offset: 4176
;           float PhysicsFieldClipmapDistance;        ; Offset: 4188
;           int PhysicsFieldClipmapResolution;        ; Offset: 4192
;           int PhysicsFieldClipmapExponent;          ; Offset: 4196
;           int PhysicsFieldClipmapCount;             ; Offset: 4200
;           int PhysicsFieldTargetCount;              ; Offset: 4204
;           int4 PhysicsFieldTargets[32];             ; Offset: 4208
;           uint GPUSceneViewId;                      ; Offset: 4720
;           float ViewResolutionFraction;             ; Offset: 4724
;           float SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4728
;           float Padding4732;                        ; Offset: 4732
;           float4 TanAndInvTanHalfFOV;               ; Offset: 4736
;           float4 PrevTanAndInvTanHalfFOV;           ; Offset: 4752
;           float2 WorldDepthToPixelWorldRadius;      ; Offset: 4768
;           float Padding4776;                        ; Offset: 4776
;           float Padding4780;                        ; Offset: 4780
;           float4 ScreenRayLengthMultiplier;         ; Offset: 4784
;           float4 GlintLUTParameters0;               ; Offset: 4800
;           float4 GlintLUTParameters1;               ; Offset: 4816
;           int4 EnvironmentComponentsFlags;          ; Offset: 4832
;           uint BindlessSampler_MaterialTextureBilinearWrapedSampler;; Offset: 4848
;           uint Padding4852;                         ; Offset: 4852
;           uint BindlessSampler_MaterialTextureBilinearClampedSampler;; Offset: 4856
;           uint Padding4860;                         ; Offset: 4860
;           uint BindlessSRV_VolumetricLightmapIndirectionTexture;; Offset: 4864
;           uint Padding4868;                         ; Offset: 4868
;           uint BindlessSRV_VolumetricLightmapBrickAmbientVector;; Offset: 4872
;           uint Padding4876;                         ; Offset: 4876
;           uint BindlessSRV_VolumetricLightmapBrickSHCoefficients0;; Offset: 4880
;           uint Padding4884;                         ; Offset: 4884
;           uint BindlessSRV_VolumetricLightmapBrickSHCoefficients1;; Offset: 4888
;           uint Padding4892;                         ; Offset: 4892
;           uint BindlessSRV_VolumetricLightmapBrickSHCoefficients2;; Offset: 4896
;           uint Padding4900;                         ; Offset: 4900
;           uint BindlessSRV_VolumetricLightmapBrickSHCoefficients3;; Offset: 4904
;           uint Padding4908;                         ; Offset: 4908
;           uint BindlessSRV_VolumetricLightmapBrickSHCoefficients4;; Offset: 4912
;           uint Padding4916;                         ; Offset: 4916
;           uint BindlessSRV_VolumetricLightmapBrickSHCoefficients5;; Offset: 4920
;           uint Padding4924;                         ; Offset: 4924
;           uint BindlessSRV_SkyBentNormalBrickTexture;; Offset: 4928
;           uint Padding4932;                         ; Offset: 4932
;           uint BindlessSRV_DirectionalLightShadowingBrickTexture;; Offset: 4936
;           uint Padding4940;                         ; Offset: 4940
;           uint BindlessSampler_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4944
;           uint Padding4948;                         ; Offset: 4948
;           uint BindlessSampler_VolumetricLightmapTextureSampler0;; Offset: 4952
;           uint Padding4956;                         ; Offset: 4956
;           uint BindlessSampler_VolumetricLightmapTextureSampler1;; Offset: 4960
;           uint Padding4964;                         ; Offset: 4964
;           uint BindlessSampler_VolumetricLightmapTextureSampler2;; Offset: 4968
;           uint Padding4972;                         ; Offset: 4972
;           uint BindlessSampler_VolumetricLightmapTextureSampler3;; Offset: 4976
;           uint Padding4980;                         ; Offset: 4980
;           uint BindlessSampler_VolumetricLightmapTextureSampler4;; Offset: 4984
;           uint Padding4988;                         ; Offset: 4988
;           uint BindlessSampler_VolumetricLightmapTextureSampler5;; Offset: 4992
;           uint Padding4996;                         ; Offset: 4996
;           uint BindlessSampler_SkyBentNormalTextureSampler;; Offset: 5000
;           uint Padding5004;                         ; Offset: 5004
;           uint BindlessSampler_DirectionalLightShadowingTextureSampler;; Offset: 5008
;           uint Padding5012;                         ; Offset: 5012
;           uint BindlessSRV_GlobalDistanceFieldPageAtlasTexture;; Offset: 5016
;           uint Padding5020;                         ; Offset: 5020
;           uint BindlessSRV_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 5024
;           uint Padding5028;                         ; Offset: 5028
;           uint BindlessSRV_GlobalDistanceFieldPageTableTexture;; Offset: 5032
;           uint Padding5036;                         ; Offset: 5036
;           uint BindlessSRV_GlobalDistanceFieldMipTexture;; Offset: 5040
;           uint Padding5044;                         ; Offset: 5044
;           uint BindlessSampler_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 5048
;           uint Padding5052;                         ; Offset: 5052
;           uint BindlessSampler_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 5056
;           uint Padding5060;                         ; Offset: 5060
;           uint BindlessSampler_GlobalDistanceFieldMipTextureSampler;; Offset: 5064
;           uint Padding5068;                         ; Offset: 5068
;           uint BindlessSRV_AtmosphereTransmittanceTexture;; Offset: 5072
;           uint Padding5076;                         ; Offset: 5076
;           uint BindlessSampler_AtmosphereTransmittanceTextureSampler;; Offset: 5080
;           uint Padding5084;                         ; Offset: 5084
;           uint BindlessSRV_AtmosphereIrradianceTexture;; Offset: 5088
;           uint Padding5092;                         ; Offset: 5092
;           uint BindlessSampler_AtmosphereIrradianceTextureSampler;; Offset: 5096
;           uint Padding5100;                         ; Offset: 5100
;           uint BindlessSRV_AtmosphereInscatterTexture;; Offset: 5104
;           uint Padding5108;                         ; Offset: 5108
;           uint BindlessSampler_AtmosphereInscatterTextureSampler;; Offset: 5112
;           uint Padding5116;                         ; Offset: 5116
;           uint BindlessSRV_PerlinNoiseGradientTexture;; Offset: 5120
;           uint Padding5124;                         ; Offset: 5124
;           uint BindlessSampler_PerlinNoiseGradientTextureSampler;; Offset: 5128
;           uint Padding5132;                         ; Offset: 5132
;           uint BindlessSRV_PerlinNoise3DTexture;    ; Offset: 5136
;           uint Padding5140;                         ; Offset: 5140
;           uint BindlessSampler_PerlinNoise3DTextureSampler;; Offset: 5144
;           uint Padding5148;                         ; Offset: 5148
;           uint BindlessSRV_SobolSamplingTexture;    ; Offset: 5152
;           uint Padding5156;                         ; Offset: 5156
;           uint BindlessSampler_SharedPointWrappedSampler;; Offset: 5160
;           uint Padding5164;                         ; Offset: 5164
;           uint BindlessSampler_SharedPointClampedSampler;; Offset: 5168
;           uint Padding5172;                         ; Offset: 5172
;           uint BindlessSampler_SharedBilinearWrappedSampler;; Offset: 5176
;           uint Padding5180;                         ; Offset: 5180
;           uint BindlessSampler_SharedBilinearClampedSampler;; Offset: 5184
;           uint Padding5188;                         ; Offset: 5188
;           uint BindlessSampler_SharedBilinearAnisoClampedSampler;; Offset: 5192
;           uint Padding5196;                         ; Offset: 5196
;           uint BindlessSampler_SharedTrilinearWrappedSampler;; Offset: 5200
;           uint Padding5204;                         ; Offset: 5204
;           uint BindlessSampler_SharedTrilinearClampedSampler;; Offset: 5208
;           uint Padding5212;                         ; Offset: 5212
;           uint BindlessSRV_PreIntegratedBRDF;       ; Offset: 5216
;           uint Padding5220;                         ; Offset: 5220
;           uint BindlessSampler_PreIntegratedBRDFSampler;; Offset: 5224
;           uint Padding5228;                         ; Offset: 5228
;           uint BindlessSRV_SkyIrradianceEnvironmentMap;; Offset: 5232
;           uint Padding5236;                         ; Offset: 5236
;           uint BindlessSRV_TransmittanceLutTexture; ; Offset: 5240
;           uint Padding5244;                         ; Offset: 5244
;           uint BindlessSampler_TransmittanceLutTextureSampler;; Offset: 5248
;           uint Padding5252;                         ; Offset: 5252
;           uint BindlessSRV_SkyViewLutTexture;       ; Offset: 5256
;           uint Padding5260;                         ; Offset: 5260
;           uint BindlessSampler_SkyViewLutTextureSampler;; Offset: 5264
;           uint Padding5268;                         ; Offset: 5268
;           uint BindlessSRV_DistantSkyLightLutTexture;; Offset: 5272
;           uint Padding5276;                         ; Offset: 5276
;           uint BindlessSampler_DistantSkyLightLutTextureSampler;; Offset: 5280
;           uint Padding5284;                         ; Offset: 5284
;           uint BindlessSRV_CameraAerialPerspectiveVolume;; Offset: 5288
;           uint Padding5292;                         ; Offset: 5292
;           uint BindlessSampler_CameraAerialPerspectiveVolumeSampler;; Offset: 5296
;           uint Padding5300;                         ; Offset: 5300
;           uint BindlessSRV_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5304
;           uint Padding5308;                         ; Offset: 5308
;           uint BindlessSampler_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5312
;           uint Padding5316;                         ; Offset: 5316
;           uint BindlessSRV_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5320
;           uint Padding5324;                         ; Offset: 5324
;           uint BindlessSampler_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5328
;           uint Padding5332;                         ; Offset: 5332
;           uint BindlessSRV_HairScatteringLUTTexture;; Offset: 5336
;           uint Padding5340;                         ; Offset: 5340
;           uint BindlessSampler_HairScatteringLUTSampler;; Offset: 5344
;           uint Padding5348;                         ; Offset: 5348
;           uint BindlessSRV_GGXLTCMatTexture;        ; Offset: 5352
;           uint Padding5356;                         ; Offset: 5356
;           uint BindlessSampler_GGXLTCMatSampler;    ; Offset: 5360
;           uint Padding5364;                         ; Offset: 5364
;           uint BindlessSRV_GGXLTCAmpTexture;        ; Offset: 5368
;           uint Padding5372;                         ; Offset: 5372
;           uint BindlessSampler_GGXLTCAmpSampler;    ; Offset: 5376
;           uint Padding5380;                         ; Offset: 5380
;           uint BindlessSRV_SheenLTCTexture;         ; Offset: 5384
;           uint Padding5388;                         ; Offset: 5388
;           uint BindlessSampler_SheenLTCSampler;     ; Offset: 5392
;           uint Padding5396;                         ; Offset: 5396
;           uint bShadingEnergyConservation;          ; Offset: 5400
;           uint bShadingEnergyPreservation;          ; Offset: 5404
;           uint BindlessSRV_ShadingEnergyGGXSpecTexture;; Offset: 5408
;           uint Padding5412;                         ; Offset: 5412
;           uint BindlessSRV_ShadingEnergyGGXGlassTexture;; Offset: 5416
;           uint Padding5420;                         ; Offset: 5420
;           uint BindlessSRV_ShadingEnergyClothSpecTexture;; Offset: 5424
;           uint Padding5428;                         ; Offset: 5428
;           uint BindlessSRV_ShadingEnergyDiffuseTexture;; Offset: 5432
;           uint Padding5436;                         ; Offset: 5436
;           uint BindlessSampler_ShadingEnergySampler;; Offset: 5440
;           uint Padding5444;                         ; Offset: 5444
;           uint BindlessSRV_GlintTexture;            ; Offset: 5448
;           uint Padding5452;                         ; Offset: 5452
;           uint BindlessSampler_GlintSampler;        ; Offset: 5456
;           uint Padding5460;                         ; Offset: 5460
;           uint BindlessSRV_SimpleVolumeTexture;     ; Offset: 5464
;           uint Padding5468;                         ; Offset: 5468
;           uint BindlessSampler_SimpleVolumeTextureSampler;; Offset: 5472
;           uint Padding5476;                         ; Offset: 5476
;           uint BindlessSRV_SimpleVolumeEnvTexture;  ; Offset: 5480
;           uint Padding5484;                         ; Offset: 5484
;           uint BindlessSampler_SimpleVolumeEnvTextureSampler;; Offset: 5488
;           uint Padding5492;                         ; Offset: 5492
;           uint BindlessSRV_SSProfilesTexture;       ; Offset: 5496
;           uint Padding5500;                         ; Offset: 5500
;           uint BindlessSampler_SSProfilesSampler;   ; Offset: 5504
;           uint Padding5508;                         ; Offset: 5508
;           uint BindlessSampler_SSProfilesTransmissionSampler;; Offset: 5512
;           uint Padding5516;                         ; Offset: 5516
;           uint BindlessSRV_SSProfilesPreIntegratedTexture;; Offset: 5520
;           uint Padding5524;                         ; Offset: 5524
;           uint BindlessSampler_SSProfilesPreIntegratedSampler;; Offset: 5528
;           uint Padding5532;                         ; Offset: 5532
;           uint BindlessSRV_SpecularProfileTexture;  ; Offset: 5536
;           uint Padding5540;                         ; Offset: 5540
;           uint BindlessSampler_SpecularProfileSampler;; Offset: 5544
;           uint Padding5548;                         ; Offset: 5548
;           uint BindlessSRV_WaterIndirection;        ; Offset: 5552
;           uint Padding5556;                         ; Offset: 5556
;           uint BindlessSRV_WaterData;               ; Offset: 5560
;           uint Padding5564;                         ; Offset: 5564
;           float4 RectLightAtlasSizeAndInvSize;      ; Offset: 5568
;           float RectLightAtlasMaxMipLevel;          ; Offset: 5584
;           float Padding5588;                        ; Offset: 5588
;           uint BindlessSRV_RectLightAtlasTexture;   ; Offset: 5592
;           uint Padding5596;                         ; Offset: 5596
;           uint BindlessSampler_RectLightAtlasSampler;; Offset: 5600
;           uint Padding5604;                         ; Offset: 5604
;           uint Padding5608;                         ; Offset: 5608
;           uint Padding5612;                         ; Offset: 5612
;           float4 IESAtlasSizeAndInvSize;            ; Offset: 5616
;           uint BindlessSRV_IESAtlasTexture;         ; Offset: 5632
;           uint Padding5636;                         ; Offset: 5636
;           uint BindlessSampler_IESAtlasSampler;     ; Offset: 5640
;           uint Padding5644;                         ; Offset: 5644
;           uint BindlessSampler_LandscapeWeightmapSampler;; Offset: 5648
;           uint Padding5652;                         ; Offset: 5652
;           uint BindlessSRV_LandscapeIndirection;    ; Offset: 5656
;           uint Padding5660;                         ; Offset: 5660
;           uint BindlessSRV_LandscapePerComponentData;; Offset: 5664
;           uint Padding5668;                         ; Offset: 5668
;           uint BindlessUAV_VTFeedbackBuffer;        ; Offset: 5672
;           uint Padding5676;                         ; Offset: 5676
;           uint BindlessSRV_PhysicsFieldClipmapBuffer;; Offset: 5680
;           uint Padding5684;                         ; Offset: 5684
;           uint Padding5688;                         ; Offset: 5688
;           uint Padding5692;                         ; Offset: 5692
;           float3 TLASPreViewTranslationHigh;        ; Offset: 5696
;           float Padding5708;                        ; Offset: 5708
;           float3 TLASPreViewTranslationLow;         ; Offset: 5712
;       
;       } View;                                       ; Offset:    0
;
;   
;   } View;                                           ; Offset:    0 Size:  5724
;
; }
;
; cbuffer DeferredLightUniforms
; {
;
;   struct DeferredLightUniforms
;   {
;
;       struct struct.FDeferredLightUniformsConstants
;       {
;
;           float4 ShadowMapChannelMask;              ; Offset:    0
;           float2 DistanceFadeMAD;                   ; Offset:   16
;           float ContactShadowLength;                ; Offset:   24
;           float ContactShadowCastingIntensity;      ; Offset:   28
;           float ContactShadowNonCastingIntensity;   ; Offset:   32
;           float VolumetricScatteringIntensity;      ; Offset:   36
;           uint ShadowedBits;                        ; Offset:   40
;           uint LightingChannelMask;                 ; Offset:   44
;           float3 TranslatedWorldPosition;           ; Offset:   48
;           float InvRadius;                          ; Offset:   60
;           float3 Color;                             ; Offset:   64
;           float FalloffExponent;                    ; Offset:   76
;           float3 Direction;                         ; Offset:   80
;           float SpecularScale;                      ; Offset:   92
;           float3 Tangent;                           ; Offset:   96
;           float SourceRadius;                       ; Offset:  108
;           float2 SpotAngles;                        ; Offset:  112
;           float SoftSourceRadius;                   ; Offset:  120
;           float SourceLength;                       ; Offset:  124
;           float RectLightBarnCosAngle;              ; Offset:  128
;           float RectLightBarnLength;                ; Offset:  132
;           float2 RectLightAtlasUVOffset;            ; Offset:  136
;           float2 RectLightAtlasUVScale;             ; Offset:  144
;           float RectLightAtlasMaxLevel;             ; Offset:  152
;           float IESAtlasIndex;                      ; Offset:  156
;           uint LightFunctionAtlasLightIndex;        ; Offset:  160
;       
;       } DeferredLightUniforms;                      ; Offset:    0
;
;   
;   } DeferredLightUniforms;                          ; Offset:    0 Size:   164
;
; }
;
; cbuffer VirtualShadowMap
; {
;
;   struct VirtualShadowMap
;   {
;
;       struct struct.FVirtualShadowMapConstants
;       {
;
;           uint NumFullShadowMaps;                   ; Offset:    0
;           uint NumSinglePageShadowMaps;             ; Offset:    4
;           uint MaxPhysicalPages;                    ; Offset:    8
;           uint NumShadowMapSlots;                   ; Offset:   12
;           uint StaticCachedArrayIndex;              ; Offset:   16
;           uint PhysicalPageRowMask;                 ; Offset:   20
;           uint PhysicalPageRowShift;                ; Offset:   24
;           uint PackedShadowMaskMaxLightCount;       ; Offset:   28
;           float4 RecPhysicalPoolSize;               ; Offset:   32
;           int2 PhysicalPoolSize;                    ; Offset:   48
;           int2 PhysicalPoolSizePages;               ; Offset:   56
;           uint bExcludeNonNaniteFromCoarsePages;    ; Offset:   64
;           float CoarsePagePixelThresholdDynamic;    ; Offset:   68
;           float CoarsePagePixelThresholdStatic;     ; Offset:   72
;           float CoarsePagePixelThresholdDynamicNanite;; Offset:   76
;           uint SceneFrameNumber;                    ; Offset:   80
;           uint bClipmapGreedyLevelSelection;        ; Offset:   84
;           float GlobalResolutionLodBias;            ; Offset:   88
;           float Padding92;                          ; Offset:   92
;           uint BindlessSRV_ProjectionData;          ; Offset:   96
;           uint Padding100;                          ; Offset:  100
;           uint BindlessSRV_PageTable;               ; Offset:  104
;           uint Padding108;                          ; Offset:  108
;           uint BindlessSRV_PageFlags;               ; Offset:  112
;           uint Padding116;                          ; Offset:  116
;           uint BindlessSRV_PageRectBounds;          ; Offset:  120
;           uint Padding124;                          ; Offset:  124
;           uint BindlessSRV_PhysicalPagePool;        ; Offset:  128
;           uint Padding132;                          ; Offset:  132
;           uint BindlessSRV_CachePrimitiveAsDynamic; ; Offset:  136
;           uint Padding140;                          ; Offset:  140
;           uint BindlessSRV_LightGridData;           ; Offset:  144
;           uint Padding148;                          ; Offset:  148
;           uint BindlessSRV_NumCulledLightsGrid;     ; Offset:  152
;       
;       } VirtualShadowMap;                           ; Offset:    0
;
;   
;   } VirtualShadowMap;                               ; Offset:    0 Size:   156
;
; }
;
; cbuffer AVSM
; {
;
;   struct hostlayout.AVSM
;   {
;
;       struct hostlayout.struct.FAVSMConstants
;       {
;
;           row_major float4x4 TranslatedWorldToShadow[6];; Offset:    0
;           float3 TranslatedWorldOrigin;             ; Offset:  384
;           float Padding396;                         ; Offset:  396
;           float4 TranslatedWorldPlane;              ; Offset:  400
;           int2 Resolution;                          ; Offset:  416
;           int NumShadowMatrices;                    ; Offset:  424
;           int MaxSampleCount;                       ; Offset:  428
;           int bIsEmpty;                             ; Offset:  432
;           int bIsDirectionalLight;                  ; Offset:  436
;           uint BindlessSRV_LinkedListBuffer;        ; Offset:  440
;           uint Padding444;                          ; Offset:  444
;           uint BindlessSRV_IndirectionBuffer;       ; Offset:  448
;           uint Padding452;                          ; Offset:  452
;           uint BindlessSRV_SampleBuffer;            ; Offset:  456
;       
;       } AVSM;                                       ; Offset:    0
;
;   
;   } AVSM;                                           ; Offset:    0 Size:   460
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       struct struct.FMaterialConstants
;       {
;
;           float4 PreshaderBuffer[1];                ; Offset:    0
;           uint BindlessSRV_Texture2D_0;             ; Offset:   16
;           uint Padding20;                           ; Offset:   20
;           uint BindlessSampler_Texture2D_0Sampler;  ; Offset:   24
;           uint Padding28;                           ; Offset:   28
;           uint BindlessSRV_Texture2D_1;             ; Offset:   32
;           uint Padding36;                           ; Offset:   36
;           uint BindlessSampler_Texture2D_1Sampler;  ; Offset:   40
;           uint Padding44;                           ; Offset:   44
;           uint BindlessSampler_Wrap_WorldGroupSettings;; Offset:   48
;           uint Padding52;                           ; Offset:   52
;           uint BindlessSampler_Clamp_WorldGroupSettings;; Offset:   56
;       
;       } Material;                                   ; Offset:    0
;
;   
;   } Material;                                       ; Offset:    0 Size:    60
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for AVSM_IndirectionBuffer
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
; Resource bind info for AVSM_SampleBuffer
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; $Globals                          cbuffer      NA          NA     CB0            cb0     1
; View                              cbuffer      NA          NA     CB1            cb1     1
; DeferredLightUniforms             cbuffer      NA          NA     CB2            cb2     1
; VirtualShadowMap                  cbuffer      NA          NA     CB3            cb3     1
; AVSM                              cbuffer      NA          NA     CB4            cb4     1
; Material                          cbuffer      NA          NA     CB5            cb5     1
; ShadowDepthTextureSampler         sampler      NA          NA      S0             s0     1
; ShadowDepthCubeTextureSampler     sampler      NA          NA      S1             s1     1
; StaticShadowDepthTextureSampler   sampler      NA          NA      S2             s2     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T0             t0     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T1             t1     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T2             t2     1
; AVSM_IndirectionBuffer            texture  struct         r/o      T3             t3     1
; AVSM_SampleBuffer                 texture  struct         r/o      T4             t4     1
; ShadowDepthTexture                texture     f32          2d      T5             t5     1
; ShadowDepthCubeTexture            texture     f32        cube      T6             t6     1
; StaticShadowDepthTexture          texture     f32          2d      T7             t7     1
;
;
; ViewId state:
;
; Number of inputs: 9, outputs: 8
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 8 }
;   output 1 depends on inputs: { 0, 1, 8 }
;   output 2 depends on inputs: { 0, 1, 8 }
;   output 4 depends on inputs: { 0, 1, 8 }
;   output 5 depends on inputs: { 0, 1, 8 }
;   output 6 depends on inputs: { 0, 1, 8 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"hostlayout.$Globals" = type { <4 x float>, [6 x [4 x <4 x float>]], float, [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, i32, [4 x <4 x float>], <4 x float>, i32, <4 x float>, [4 x <4 x float>], float, i32 }
%hostlayout.View = type { %hostlayout.struct.FViewConstants }
%hostlayout.struct.FViewConstants = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, i32, float, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <2 x float>, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%DeferredLightUniforms = type { %struct.FDeferredLightUniformsConstants }
%struct.FDeferredLightUniformsConstants = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float, i32 }
%VirtualShadowMap = type { %struct.FVirtualShadowMapConstants }
%struct.FVirtualShadowMapConstants = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x i32>, <2 x i32>, i32, float, float, float, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%hostlayout.AVSM = type { %hostlayout.struct.FAVSMConstants }
%hostlayout.struct.FAVSMConstants = type { [6 x [4 x <4 x float>]], <3 x float>, float, <4 x float>, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%Material = type { %struct.FMaterialConstants }
%struct.FMaterialConstants = type { [1 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }
%struct.SamplerComparisonState = type { i32 }

define void @InjectMainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 13, i32 60 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %19 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 13, i32 460 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %20 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 13, i32 156 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %21 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 13, i32 164 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 13, i32 5724 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 13, i32 728 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %25 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef), !dx.precise !43  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %26 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef), !dx.precise !43  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %27 = alloca [3 x float], align 4
  %28 = alloca [3 x float], align 4
  %29 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.i32 %29, 0
  %31 = add i32 %30, 156
  %32 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %31)  ; CBufferLoadLegacy(handle,regIndex)
  %33 = extractvalue %dx.types.CBufRet.f32 %32, 2
  %34 = uitofp i32 %24 to float
  %35 = fadd float %34, 5.000000e-01
  %36 = add i32 %30, 158
  %37 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %36)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.f32 %37, 3
  %39 = fmul float %35, %38
  %40 = fadd float %33, %39
  %41 = extractvalue %dx.types.CBufRet.f32 %32, 0
  %42 = extractvalue %dx.types.CBufRet.f32 %32, 1
  %43 = extractvalue %dx.types.CBufRet.f32 %37, 0
  %44 = extractvalue %dx.types.CBufRet.f32 %37, 1
  %45 = fdiv float %25, %43
  %46 = fdiv float %26, %44
  %47 = fadd float %41, %45
  %48 = fadd float %42, %46
  %49 = fmul float %38, 5.000000e-01
  %50 = fsub float %47, %49
  %51 = fsub float %48, %49
  %52 = extractvalue %dx.types.CBufRet.f32 %32, 3
  %53 = fmul fast float %52, %35
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = fsub fast float %55, %50
  %59 = fsub fast float %56, %51
  %60 = fsub fast float %57, %40
  %61 = extractvalue %dx.types.CBufRet.f32 %54, 3
  %62 = fmul fast float %61, %61
  %63 = fdiv fast float 1.000000e+00, %62
  %64 = call float @dx.op.dot3.f32(i32 55, float %58, float %59, float %60, float %58, float %59, float %60)  ; Dot3(ax,ay,az,bx,by,bz)
  %65 = fsub fast float %63, %64
  %66 = fcmp fast olt float %65, 0.000000e+00
  call void @dx.op.discard(i32 82, i1 %66)  ; Discard(condition)
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = fsub float %68, %50
  %72 = fsub float %69, %51
  %73 = fsub float %70, %40
  %74 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %71, float %72, float %73), !dx.precise !43  ; Dot3(ax,ay,az,bx,by,bz)
  %75 = call float @dx.op.unary.f32(i32 25, float %74), !dx.precise !43  ; Rsqrt(value)
  %76 = fmul float %71, %75
  %77 = fmul float %72, %75
  %78 = fmul float %73, %75
  %79 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.i32 %79, 0
  %81 = add i32 %80, 158
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %81)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 3
  %84 = fmul float %83, 5.000000e-01
  %85 = fmul float %76, %84
  %86 = fmul float %77, %84
  %87 = fmul float %78, %84
  %88 = call float @dx.op.unary.f32(i32 6, float %85), !dx.precise !43  ; FAbs(value)
  %89 = call float @dx.op.unary.f32(i32 6, float %86), !dx.precise !43  ; FAbs(value)
  %90 = call float @dx.op.unary.f32(i32 6, float %87), !dx.precise !43  ; FAbs(value)
  %91 = call float @dx.op.dot3.f32(i32 55, float %88, float %89, float %90, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00), !dx.precise !43  ; Dot3(ax,ay,az,bx,by,bz)
  %92 = fadd float %50, %91
  %93 = fadd float %51, %91
  %94 = fadd float %40, %91
  %95 = fsub fast float %68, %92
  %96 = fsub fast float %69, %93
  %97 = fsub fast float %70, %94
  %98 = call float @dx.op.dot3.f32(i32 55, float %95, float %96, float %97, float %95, float %96, float %97)  ; Dot3(ax,ay,az,bx,by,bz)
  %99 = fadd fast float %98, 1.000000e+00
  %100 = fdiv fast float 1.000000e+00, %99
  %101 = extractvalue %dx.types.CBufRet.f32 %67, 3
  %102 = fmul fast float %101, %101
  %103 = fmul fast float %102, %98
  %104 = fmul fast float %103, %103
  %105 = fsub fast float 1.000000e+00, %104
  %106 = call float @dx.op.unary.f32(i32 7, float %105)  ; Saturate(value)
  %107 = fmul fast float %106, %106
  %108 = fmul fast float %107, %100
  %109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %110 = extractvalue %dx.types.CBufRet.f32 %109, 3
  %111 = fcmp fast ogt float %110, 0.000000e+00
  br i1 %111, label %112, label %122

; <label>:112                                     ; preds = %0
  %113 = fmul fast float %101, %95
  %114 = fmul fast float %101, %96
  %115 = fmul fast float %101, %97
  %116 = call float @dx.op.dot3.f32(i32 55, float %113, float %114, float %115, float %113, float %114, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %117 = call float @dx.op.unary.f32(i32 7, float %116)  ; Saturate(value)
  %118 = fsub fast float 1.000000e+00, %117
  %119 = call float @dx.op.unary.f32(i32 23, float %118)  ; Log(value)
  %120 = fmul fast float %119, %110
  %121 = call float @dx.op.unary.f32(i32 21, float %120)  ; Exp(value)
  br label %122

; <label>:122                                     ; preds = %112, %0
  %123 = phi float [ %121, %112 ], [ %108, %0 ]
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 0
  %126 = extractvalue %dx.types.CBufRet.f32 %124, 1
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 0
  %129 = extractvalue %dx.types.CBufRet.f32 %127, 1
  %130 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %131 = call float @dx.op.unary.f32(i32 25, float %98)  ; Rsqrt(value)
  %132 = fmul fast float %131, %95
  %133 = fmul fast float %131, %96
  %134 = fmul fast float %131, %97
  %135 = call float @dx.op.dot3.f32(i32 55, float %132, float %133, float %134, float %128, float %129, float %130)  ; Dot3(ax,ay,az,bx,by,bz)
  %136 = fsub fast float %135, %125
  %137 = fmul fast float %136, %126
  %138 = call float @dx.op.unary.f32(i32 7, float %137)  ; Saturate(value)
  %139 = fmul fast float %138, %138
  %140 = fmul fast float %139, %123
  %141 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.f32 %141, 0
  %143 = fcmp fast olt float %142, 1.000000e+00
  %144 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.i32 %144, 0
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %300, label %147, !dx.controlflow.hints !45

; <label>:147                                     ; preds = %122
  br i1 %143, label %148, label %190, !dx.controlflow.hints !46

; <label>:148                                     ; preds = %147
  %149 = fsub fast float %92, %68
  %150 = fsub fast float %93, %69
  %151 = fsub fast float %94, %70
  %152 = fmul fast float %149, %149
  %153 = fmul fast float %150, %150
  %154 = fadd fast float %152, %153
  %155 = fmul fast float %151, %151
  %156 = fadd fast float %154, %155
  %157 = call float @dx.op.unary.f32(i32 24, float %156)  ; Sqrt(value)
  %158 = fdiv fast float %149, %157
  %159 = fdiv fast float %150, %157
  %160 = fdiv fast float %151, %157
  %161 = fdiv fast float %159, %158
  %162 = call float @dx.op.unary.f32(i32 17, float %161)  ; Atan(value)
  %163 = fadd fast float %162, 0x400921FB60000000
  %164 = fadd fast float %162, 0xC00921FB60000000
  %165 = fcmp fast olt float %158, 0.000000e+00
  %166 = fcmp fast oeq float %158, 0.000000e+00
  %167 = fcmp fast oge float %159, 0.000000e+00
  %168 = fcmp fast olt float %159, 0.000000e+00
  %169 = and i1 %165, %167
  %170 = select i1 %169, float %163, float %162
  %171 = and i1 %165, %168
  %172 = select i1 %171, float %164, float %170
  %173 = and i1 %166, %168
  %174 = and i1 %166, %167
  %175 = fmul fast float %172, 0x3FC45F3060000000
  %176 = select i1 %173, float -2.500000e-01, float %175
  %177 = select i1 %174, float 2.500000e-01, float %176
  %178 = fcmp fast ogt float %177, 0.000000e+00
  %179 = fadd fast float %177, 1.000000e+00
  %180 = select i1 %178, float %177, float %179
  %181 = call float @dx.op.unary.f32(i32 15, float %160)  ; Acos(value)
  %182 = fmul fast float %181, 0x3FD45F3060000000
  %183 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %184 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %185 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %183, %dx.types.Handle %184, float %180, float %182, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %186 = extractvalue %dx.types.ResRet.f32 %185, 0
  %187 = fmul fast float %101, %157
  %188 = fcmp fast olt float %187, %186
  %189 = uitofp i1 %188 to float
  br label %300

; <label>:190                                     ; preds = %147
  %191 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %192 = extractvalue %dx.types.CBufRet.f32 %191, 0
  %193 = extractvalue %dx.types.CBufRet.f32 %191, 1
  %194 = extractvalue %dx.types.CBufRet.f32 %191, 3
  %195 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.f32 %195, 0
  %197 = extractvalue %dx.types.CBufRet.f32 %195, 1
  %198 = extractvalue %dx.types.CBufRet.f32 %195, 3
  %199 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %200 = extractvalue %dx.types.CBufRet.f32 %199, 0
  %201 = extractvalue %dx.types.CBufRet.f32 %199, 1
  %202 = extractvalue %dx.types.CBufRet.f32 %199, 3
  %203 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %204 = extractvalue %dx.types.CBufRet.f32 %203, 0
  %205 = extractvalue %dx.types.CBufRet.f32 %203, 1
  %206 = extractvalue %dx.types.CBufRet.f32 %203, 3
  %207 = fmul fast float %192, %92
  %208 = call float @dx.op.tertiary.f32(i32 46, float %93, float %196, float %207)  ; FMad(a,b,c)
  %209 = call float @dx.op.tertiary.f32(i32 46, float %94, float %200, float %208)  ; FMad(a,b,c)
  %210 = fadd fast float %209, %204
  %211 = fmul fast float %193, %92
  %212 = call float @dx.op.tertiary.f32(i32 46, float %93, float %197, float %211)  ; FMad(a,b,c)
  %213 = call float @dx.op.tertiary.f32(i32 46, float %94, float %201, float %212)  ; FMad(a,b,c)
  %214 = fadd fast float %213, %205
  %215 = fmul fast float %194, %92
  %216 = call float @dx.op.tertiary.f32(i32 46, float %93, float %198, float %215)  ; FMad(a,b,c)
  %217 = call float @dx.op.tertiary.f32(i32 46, float %94, float %202, float %216)  ; FMad(a,b,c)
  %218 = fadd fast float %217, %206
  %219 = fdiv fast float %210, %218
  %220 = fdiv fast float %214, %218
  %221 = fcmp fast ole float %219, 1.000000e+00
  %222 = fcmp fast ole float %220, 1.000000e+00
  %223 = fcmp fast oge float %219, 0.000000e+00
  %224 = fcmp fast oge float %220, 0.000000e+00
  %225 = and i1 %223, %221
  %226 = and i1 %224, %222
  %227 = and i1 %225, %226
  br i1 %227, label %228, label %300

; <label>:228                                     ; preds = %190
  %229 = extractvalue %dx.types.CBufRet.f32 %203, 2
  %230 = extractvalue %dx.types.CBufRet.f32 %199, 2
  %231 = extractvalue %dx.types.CBufRet.f32 %195, 2
  %232 = extractvalue %dx.types.CBufRet.f32 %191, 2
  %233 = fmul fast float %232, %92
  %234 = call float @dx.op.tertiary.f32(i32 46, float %93, float %231, float %233)  ; FMad(a,b,c)
  %235 = call float @dx.op.tertiary.f32(i32 46, float %94, float %230, float %234)  ; FMad(a,b,c)
  %236 = fadd fast float %235, %229
  %237 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %238 = extractvalue %dx.types.CBufRet.f32 %237, 0
  %239 = extractvalue %dx.types.CBufRet.f32 %237, 1
  %240 = extractvalue %dx.types.CBufRet.f32 %237, 2
  %241 = extractvalue %dx.types.CBufRet.f32 %237, 3
  %242 = fmul fast float %238, %219
  %243 = fmul fast float %239, %220
  %244 = fadd fast float %242, -5.000000e-01
  %245 = fadd fast float %243, -5.000000e-01
  %246 = call float @dx.op.unary.f32(i32 22, float %244)  ; Frc(value)
  %247 = call float @dx.op.unary.f32(i32 22, float %245)  ; Frc(value)
  %248 = call float @dx.op.unary.f32(i32 27, float %244)  ; Round_ni(value)
  %249 = call float @dx.op.unary.f32(i32 27, float %245)  ; Round_ni(value)
  %250 = fadd fast float %248, 1.000000e+00
  %251 = fadd fast float %249, 1.000000e+00
  %252 = fmul fast float %250, %240
  %253 = fmul fast float %251, %241
  %254 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %255 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %256 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %254, %dx.types.Handle %255, float %252, float %253, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %257 = extractvalue %dx.types.ResRet.f32 %256, 0
  %258 = extractvalue %dx.types.ResRet.f32 %256, 1
  %259 = extractvalue %dx.types.ResRet.f32 %256, 2
  %260 = extractvalue %dx.types.ResRet.f32 %256, 3
  %261 = fmul fast float %236, 4.000000e+01
  %262 = fadd fast float %261, -1.000000e+00
  %263 = fmul fast float %257, 4.000000e+01
  %264 = fmul fast float %258, 4.000000e+01
  %265 = fmul fast float %259, 4.000000e+01
  %266 = fmul fast float %260, 4.000000e+01
  %267 = fsub fast float %263, %262
  %268 = fsub fast float %264, %262
  %269 = fsub fast float %265, %262
  %270 = fsub fast float %266, %262
  %271 = call float @dx.op.unary.f32(i32 7, float %267)  ; Saturate(value)
  %272 = call float @dx.op.unary.f32(i32 7, float %268)  ; Saturate(value)
  %273 = call float @dx.op.unary.f32(i32 7, float %269)  ; Saturate(value)
  %274 = call float @dx.op.unary.f32(i32 7, float %270)  ; Saturate(value)
  %275 = fcmp fast ogt float %257, 0x3FEFAE1480000000
  %276 = fcmp fast ogt float %258, 0x3FEFAE1480000000
  %277 = fcmp fast ogt float %259, 0x3FEFAE1480000000
  %278 = fcmp fast ogt float %260, 0x3FEFAE1480000000
  %279 = uitofp i1 %275 to float
  %280 = uitofp i1 %276 to float
  %281 = uitofp i1 %277 to float
  %282 = uitofp i1 %278 to float
  %283 = fadd fast float %279, %271
  %284 = fadd fast float %280, %272
  %285 = fadd fast float %273, %281
  %286 = fadd fast float %274, %282
  %287 = call float @dx.op.unary.f32(i32 7, float %283)  ; Saturate(value)
  %288 = call float @dx.op.unary.f32(i32 7, float %284)  ; Saturate(value)
  %289 = call float @dx.op.unary.f32(i32 7, float %285)  ; Saturate(value)
  %290 = call float @dx.op.unary.f32(i32 7, float %286)  ; Saturate(value)
  %291 = fsub fast float %289, %290
  %292 = fsub fast float %288, %287
  %293 = fmul fast float %291, %246
  %294 = fmul fast float %292, %246
  %295 = fadd fast float %293, %290
  %296 = fadd fast float %294, %287
  %297 = fsub fast float %296, %295
  %298 = fmul fast float %297, %247
  %299 = fadd fast float %298, %295
  br label %300

; <label>:300                                     ; preds = %228, %190, %148, %122
  %301 = phi float [ %189, %148 ], [ %299, %228 ], [ 1.000000e+00, %190 ], [ 1.000000e+00, %122 ]
  br i1 %143, label %302, label %370

; <label>:302                                     ; preds = %300
  %303 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %304 = extractvalue %dx.types.CBufRet.f32 %303, 0
  %305 = fmul fast float %304, 0x402EB851E0000000
  %306 = fmul fast float %95, %95
  %307 = fmul fast float %96, %96
  %308 = fadd fast float %306, %307
  %309 = fmul fast float %97, %97
  %310 = fadd fast float %308, %309
  %311 = call float @dx.op.unary.f32(i32 24, float %310)  ; Sqrt(value)
  %312 = fmul fast float %311, %101
  %313 = fcmp fast olt float %312, 1.000000e+00
  br i1 %313, label %314, label %367, !dx.controlflow.hints !47

; <label>:314                                     ; preds = %302
  %315 = call float @dx.op.unary.f32(i32 6, float %95)  ; FAbs(value)
  %316 = call float @dx.op.unary.f32(i32 6, float %96)  ; FAbs(value)
  %317 = call float @dx.op.unary.f32(i32 6, float %97)  ; FAbs(value)
  %318 = call float @dx.op.binary.f32(i32 35, float %316, float %317)  ; FMax(a,b)
  %319 = call float @dx.op.binary.f32(i32 35, float %315, float %318)  ; FMax(a,b)
  %320 = fcmp fast oeq float %319, %315
  br i1 %320, label %321, label %324

; <label>:321                                     ; preds = %314
  %322 = fcmp fast oeq float %315, %95
  %323 = select i1 %322, i32 0, i32 4
  br label %332

; <label>:324                                     ; preds = %314
  %325 = fcmp fast oeq float %319, %316
  br i1 %325, label %326, label %329

; <label>:326                                     ; preds = %324
  %327 = fcmp fast oeq float %316, %96
  %328 = select i1 %327, i32 8, i32 12
  br label %332

; <label>:329                                     ; preds = %324
  %330 = fcmp fast oeq float %317, %97
  %331 = select i1 %330, i32 16, i32 20
  br label %332

; <label>:332                                     ; preds = %329, %326, %321
  %333 = phi i32 [ %323, %321 ], [ %328, %326 ], [ %331, %329 ]
  %334 = or i32 %333, 1
  %335 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 %334)  ; CBufferLoadLegacy(handle,regIndex)
  %336 = extractvalue %dx.types.CBufRet.f32 %335, 2
  %337 = extractvalue %dx.types.CBufRet.f32 %335, 3
  %338 = add nuw nsw i32 %334, 1
  %339 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 %338)  ; CBufferLoadLegacy(handle,regIndex)
  %340 = extractvalue %dx.types.CBufRet.f32 %339, 2
  %341 = extractvalue %dx.types.CBufRet.f32 %339, 3
  %342 = or i32 %333, 3
  %343 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 %342)  ; CBufferLoadLegacy(handle,regIndex)
  %344 = extractvalue %dx.types.CBufRet.f32 %343, 2
  %345 = extractvalue %dx.types.CBufRet.f32 %343, 3
  %346 = add nuw nsw i32 %342, 1
  %347 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 %346)  ; CBufferLoadLegacy(handle,regIndex)
  %348 = extractvalue %dx.types.CBufRet.f32 %347, 2
  %349 = extractvalue %dx.types.CBufRet.f32 %347, 3
  %350 = fsub fast float -0.000000e+00, %95
  %351 = fsub fast float -0.000000e+00, %96
  %352 = fsub fast float -0.000000e+00, %97
  %353 = fmul fast float %336, %350
  %354 = call float @dx.op.tertiary.f32(i32 46, float %351, float %340, float %353)  ; FMad(a,b,c)
  %355 = call float @dx.op.tertiary.f32(i32 46, float %352, float %344, float %354)  ; FMad(a,b,c)
  %356 = fmul fast float %337, %350
  %357 = call float @dx.op.tertiary.f32(i32 46, float %351, float %341, float %356)  ; FMad(a,b,c)
  %358 = call float @dx.op.tertiary.f32(i32 46, float %352, float %345, float %357)  ; FMad(a,b,c)
  %359 = fadd fast float %358, %349
  %360 = fadd fast float %348, %305
  %361 = fadd fast float %360, %355
  %362 = fdiv fast float %361, %359
  %363 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %364 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 32782, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerComparisonState
  %365 = call %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32 65, %dx.types.Handle %363, %dx.types.Handle %364, float %95, float %96, float %97, float undef, i32 undef, i32 undef, i32 undef, float %362)  ; SampleCmpLevelZero(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)
  %366 = extractvalue %dx.types.ResRet.f32 %365, 0
  br label %367

; <label>:367                                     ; preds = %332, %302
  %368 = phi float [ %366, %332 ], [ 1.000000e+00, %302 ]
  %369 = fsub fast float 1.000000e+00, %368
  br label %436

; <label>:370                                     ; preds = %300
  %371 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %372 = extractvalue %dx.types.CBufRet.f32 %371, 0
  %373 = extractvalue %dx.types.CBufRet.f32 %371, 1
  %374 = extractvalue %dx.types.CBufRet.f32 %371, 3
  %375 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 27)  ; CBufferLoadLegacy(handle,regIndex)
  %376 = extractvalue %dx.types.CBufRet.f32 %375, 0
  %377 = extractvalue %dx.types.CBufRet.f32 %375, 1
  %378 = extractvalue %dx.types.CBufRet.f32 %375, 3
  %379 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %380 = extractvalue %dx.types.CBufRet.f32 %379, 0
  %381 = extractvalue %dx.types.CBufRet.f32 %379, 1
  %382 = extractvalue %dx.types.CBufRet.f32 %379, 3
  %383 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %384 = extractvalue %dx.types.CBufRet.f32 %383, 0
  %385 = extractvalue %dx.types.CBufRet.f32 %383, 1
  %386 = extractvalue %dx.types.CBufRet.f32 %383, 3
  %387 = fmul fast float %372, %92
  %388 = call float @dx.op.tertiary.f32(i32 46, float %93, float %376, float %387)  ; FMad(a,b,c)
  %389 = call float @dx.op.tertiary.f32(i32 46, float %94, float %380, float %388)  ; FMad(a,b,c)
  %390 = fadd fast float %389, %384
  %391 = fmul fast float %373, %92
  %392 = call float @dx.op.tertiary.f32(i32 46, float %93, float %377, float %391)  ; FMad(a,b,c)
  %393 = call float @dx.op.tertiary.f32(i32 46, float %94, float %381, float %392)  ; FMad(a,b,c)
  %394 = fadd fast float %393, %385
  %395 = fmul fast float %374, %92
  %396 = call float @dx.op.tertiary.f32(i32 46, float %93, float %378, float %395)  ; FMad(a,b,c)
  %397 = call float @dx.op.tertiary.f32(i32 46, float %94, float %382, float %396)  ; FMad(a,b,c)
  %398 = fadd fast float %397, %386
  %399 = fdiv fast float %390, %398
  %400 = fdiv fast float %394, %398
  %401 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %402 = extractvalue %dx.types.CBufRet.f32 %401, 0
  %403 = extractvalue %dx.types.CBufRet.f32 %401, 1
  %404 = fcmp fast oge float %399, %402
  %405 = fcmp fast oge float %400, %403
  %406 = and i1 %404, %405
  %407 = extractvalue %dx.types.CBufRet.f32 %401, 2
  %408 = extractvalue %dx.types.CBufRet.f32 %401, 3
  %409 = fcmp fast ole float %399, %407
  %410 = fcmp fast ole float %400, %408
  %411 = and i1 %409, %410
  %412 = and i1 %406, %411
  br i1 %412, label %413, label %436

; <label>:413                                     ; preds = %370
  %414 = extractvalue %dx.types.CBufRet.f32 %383, 2
  %415 = extractvalue %dx.types.CBufRet.f32 %379, 2
  %416 = extractvalue %dx.types.CBufRet.f32 %375, 2
  %417 = extractvalue %dx.types.CBufRet.f32 %371, 2
  %418 = fmul fast float %417, %92
  %419 = call float @dx.op.tertiary.f32(i32 46, float %93, float %416, float %418)  ; FMad(a,b,c)
  %420 = call float @dx.op.tertiary.f32(i32 46, float %94, float %415, float %419)  ; FMad(a,b,c)
  %421 = fsub fast float 1.000000e+00, %414
  %422 = fsub fast float %421, %420
  %423 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %425 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %423, %dx.types.Handle %424, float %399, float %400, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %426 = extractvalue %dx.types.ResRet.f32 %425, 0
  %427 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %428 = extractvalue %dx.types.CBufRet.f32 %427, 0
  %429 = fsub fast float %426, %428
  %430 = fcmp fast olt float %422, %429
  %431 = uitofp i1 %430 to float
  %432 = fcmp fast oeq float %426, 1.000000e+00
  %433 = uitofp i1 %432 to float
  %434 = fadd fast float %431, %433
  %435 = call float @dx.op.unary.f32(i32 7, float %434)  ; Saturate(value)
  br label %436

; <label>:436                                     ; preds = %413, %370, %367
  %437 = phi float [ %369, %367 ], [ %435, %413 ], [ 1.000000e+00, %370 ]
  %438 = xor i1 %143, true
  %439 = fcmp ult float %142, 1.000000e+00
  %440 = and i1 %439, %438
  br i1 %440, label %441, label %464

; <label>:441                                     ; preds = %436
  %442 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %443 = extractvalue %dx.types.CBufRet.f32 %442, 0
  %444 = extractvalue %dx.types.CBufRet.f32 %442, 1
  %445 = extractvalue %dx.types.CBufRet.f32 %442, 2
  %446 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %447 = extractvalue %dx.types.CBufRet.f32 %446, 0
  %448 = extractvalue %dx.types.CBufRet.f32 %446, 1
  %449 = extractvalue %dx.types.CBufRet.f32 %446, 2
  %450 = fsub fast float %92, %447
  %451 = fsub fast float %93, %448
  %452 = fsub fast float %94, %449
  %453 = call float @dx.op.dot3.f32(i32 55, float %450, float %451, float %452, float %443, float %444, float %445)  ; Dot3(ax,ay,az,bx,by,bz)
  %454 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %455 = extractvalue %dx.types.CBufRet.f32 %454, 2
  %456 = fmul fast float %455, %453
  %457 = extractvalue %dx.types.CBufRet.f32 %454, 3
  %458 = fadd fast float %456, %457
  %459 = call float @dx.op.unary.f32(i32 7, float %458)  ; Saturate(value)
  %460 = fsub fast float 1.000000e+00, %437
  %461 = fmul fast float %459, %459
  %462 = fmul fast float %461, %460
  %463 = fadd fast float %462, %437
  br label %464

; <label>:464                                     ; preds = %441, %436
  %465 = phi float [ %463, %441 ], [ %437, %436 ]
  %466 = call float @dx.op.binary.f32(i32 36, float %301, float %465)  ; FMin(a,b)
  %467 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %468 = extractvalue %dx.types.CBufRet.i32 %467, 1
  %469 = mul i32 %468, 288
  %470 = add i32 %469, 204
  %471 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %472 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %470, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %473 = extractvalue %dx.types.ResRet.i32 %472, 0
  %474 = icmp eq i32 %473, 0
  %475 = add i32 %469, 208
  %476 = add i32 %469, 224
  %477 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %478 = extractvalue %dx.types.CBufRet.f32 %477, 0
  %479 = extractvalue %dx.types.CBufRet.f32 %477, 1
  %480 = extractvalue %dx.types.CBufRet.f32 %477, 2
  %481 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %482 = extractvalue %dx.types.CBufRet.f32 %481, 0
  %483 = extractvalue %dx.types.CBufRet.f32 %481, 1
  %484 = extractvalue %dx.types.CBufRet.f32 %481, 2
  br i1 %474, label %485, label %756

; <label>:485                                     ; preds = %464
  %486 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %475, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %487 = extractvalue %dx.types.ResRet.i32 %486, 0
  %488 = extractvalue %dx.types.ResRet.i32 %486, 1
  %489 = extractvalue %dx.types.ResRet.i32 %486, 2
  %490 = bitcast i32 %487 to float
  %491 = bitcast i32 %488 to float
  %492 = bitcast i32 %489 to float
  %493 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %476, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %494 = extractvalue %dx.types.ResRet.i32 %493, 0
  %495 = extractvalue %dx.types.ResRet.i32 %493, 1
  %496 = extractvalue %dx.types.ResRet.i32 %493, 2
  %497 = bitcast i32 %494 to float
  %498 = bitcast i32 %495 to float
  %499 = bitcast i32 %496 to float
  %500 = add i32 %469, 236
  %501 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %500, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %502 = extractvalue %dx.types.ResRet.i32 %501, 0
  %503 = bitcast i32 %502 to float
  %504 = add i32 %469, 240
  %505 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %504, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %506 = extractvalue %dx.types.ResRet.i32 %505, 0
  %507 = extractvalue %dx.types.ResRet.i32 %505, 1
  %508 = extractvalue %dx.types.ResRet.i32 %505, 2
  %509 = bitcast i32 %506 to float
  %510 = bitcast i32 %507 to float
  %511 = bitcast i32 %508 to float
  %512 = add i32 %469, 264
  %513 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %512, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %514 = extractvalue %dx.types.ResRet.i32 %513, 0
  %515 = add i32 %469, 268
  %516 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %515, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %517 = extractvalue %dx.types.ResRet.i32 %516, 0
  %518 = fsub float %490, %478
  %519 = fsub float %491, %479
  %520 = fsub float %492, %480
  %521 = fsub float %497, %482
  %522 = fsub float %498, %483
  %523 = fsub float %499, %484
  %524 = fadd float %518, %521
  %525 = fadd float %519, %522
  %526 = fadd float %520, %523
  %527 = fadd float %509, %524
  %528 = fadd float %510, %525
  %529 = fadd float %511, %526
  %530 = fadd float %92, %527
  %531 = fadd float %93, %528
  %532 = fadd float %94, %529
  %533 = fmul float %530, %530
  %534 = fmul float %531, %531
  %535 = fadd float %533, %534
  %536 = fmul float %532, %532
  %537 = fadd float %536, %535
  %538 = call float @dx.op.unary.f32(i32 24, float %537), !dx.precise !43  ; Sqrt(value)
  %539 = call float @dx.op.unary.f32(i32 23, float %538), !dx.precise !43  ; Log(value)
  %540 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %20, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %541 = extractvalue %dx.types.CBufRet.i32 %540, 1
  %542 = icmp ne i32 %541, 0
  %543 = select i1 %542, float 0.000000e+00, float %503
  %544 = fadd float %539, %543
  %545 = call float @dx.op.unary.f32(i32 27, float %544), !dx.precise !43  ; Round_ni(value)
  %546 = fptosi float %545 to i32
  %547 = sub nsw i32 %546, %514
  %548 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %547)  ; IMax(a,b)
  %549 = icmp slt i32 %548, %517
  br i1 %549, label %550, label %952

; <label>:550                                     ; preds = %485
  %551 = add nsw i32 %548, %468
  %552 = mul i32 %551, 288
  %553 = add i32 %552, 64
  %554 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %553, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %555 = extractvalue %dx.types.ResRet.i32 %554, 0
  %556 = extractvalue %dx.types.ResRet.i32 %554, 1
  %557 = extractvalue %dx.types.ResRet.i32 %554, 2
  %558 = bitcast i32 %555 to float
  %559 = bitcast i32 %556 to float
  %560 = bitcast i32 %557 to float
  %561 = add i32 %552, 80
  %562 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %561, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %563 = extractvalue %dx.types.ResRet.i32 %562, 0
  %564 = extractvalue %dx.types.ResRet.i32 %562, 1
  %565 = extractvalue %dx.types.ResRet.i32 %562, 2
  %566 = bitcast i32 %563 to float
  %567 = bitcast i32 %564 to float
  %568 = bitcast i32 %565 to float
  %569 = add i32 %552, 96
  %570 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %569, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %571 = extractvalue %dx.types.ResRet.i32 %570, 0
  %572 = extractvalue %dx.types.ResRet.i32 %570, 1
  %573 = extractvalue %dx.types.ResRet.i32 %570, 2
  %574 = bitcast i32 %571 to float
  %575 = bitcast i32 %572 to float
  %576 = bitcast i32 %573 to float
  %577 = add i32 %552, 112
  %578 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %577, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %579 = extractvalue %dx.types.ResRet.i32 %578, 0
  %580 = extractvalue %dx.types.ResRet.i32 %578, 1
  %581 = extractvalue %dx.types.ResRet.i32 %578, 2
  %582 = bitcast i32 %579 to float
  %583 = bitcast i32 %580 to float
  %584 = bitcast i32 %581 to float
  %585 = add i32 %552, 208
  %586 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %585, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %587 = extractvalue %dx.types.ResRet.i32 %586, 0
  %588 = extractvalue %dx.types.ResRet.i32 %586, 1
  %589 = extractvalue %dx.types.ResRet.i32 %586, 2
  %590 = bitcast i32 %587 to float
  %591 = bitcast i32 %588 to float
  %592 = bitcast i32 %589 to float
  %593 = add i32 %552, 224
  %594 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %593, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %595 = extractvalue %dx.types.ResRet.i32 %594, 0
  %596 = extractvalue %dx.types.ResRet.i32 %594, 1
  %597 = extractvalue %dx.types.ResRet.i32 %594, 2
  %598 = bitcast i32 %595 to float
  %599 = bitcast i32 %596 to float
  %600 = bitcast i32 %597 to float
  %601 = fsub float %590, %478
  %602 = fsub float %591, %479
  %603 = fsub float %592, %480
  %604 = fsub float %598, %482
  %605 = fsub float %599, %483
  %606 = fsub float %600, %484
  %607 = fadd float %601, %604
  %608 = fadd float %602, %605
  %609 = fadd float %603, %606
  %610 = fadd fast float %607, %92
  %611 = fadd fast float %608, %93
  %612 = fadd fast float %609, %94
  %613 = fmul fast float %610, %558
  %614 = call float @dx.op.tertiary.f32(i32 46, float %611, float %566, float %613)  ; FMad(a,b,c)
  %615 = call float @dx.op.tertiary.f32(i32 46, float %612, float %574, float %614)  ; FMad(a,b,c)
  %616 = fadd fast float %615, %582
  %617 = fmul fast float %610, %559
  %618 = call float @dx.op.tertiary.f32(i32 46, float %611, float %567, float %617)  ; FMad(a,b,c)
  %619 = call float @dx.op.tertiary.f32(i32 46, float %612, float %575, float %618)  ; FMad(a,b,c)
  %620 = fadd fast float %619, %583
  %621 = fmul fast float %610, %560
  %622 = call float @dx.op.tertiary.f32(i32 46, float %611, float %568, float %621)  ; FMad(a,b,c)
  %623 = call float @dx.op.tertiary.f32(i32 46, float %612, float %576, float %622)  ; FMad(a,b,c)
  %624 = fadd fast float %623, %584
  %625 = fmul fast float %616, 1.280000e+02
  %626 = fmul fast float %620, 1.280000e+02
  %627 = fptoui float %625 to i32
  %628 = fptoui float %626 to i32
  %629 = icmp ult i32 %551, 8192
  br i1 %629, label %636, label %630

; <label>:630                                     ; preds = %550
  %631 = mul i32 %551, 21845
  %632 = shl i32 %628, 7
  %633 = add i32 %631, -178946048
  %634 = add i32 %633, %627
  %635 = add i32 %634, %632
  br label %636

; <label>:636                                     ; preds = %630, %550
  %637 = phi i32 [ %635, %630 ], [ %551, %550 ]
  %638 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %639 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %638, i32 %637, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %640 = extractvalue %dx.types.ResRet.i32 %639, 0
  %641 = lshr i32 %640, 20
  %642 = and i32 %641, 63
  %643 = icmp slt i32 %640, 0
  br i1 %643, label %644, label %750

; <label>:644                                     ; preds = %636
  %645 = icmp eq i32 %642, 0
  %646 = zext i1 %645 to i32
  %647 = add i32 %642, %551
  %648 = fmul fast float %616, 1.638400e+04
  %649 = fmul fast float %620, 1.638400e+04
  %650 = fptoui float %648 to i32
  %651 = fptoui float %649 to i32
  br i1 %645, label %727, label %652

; <label>:652                                     ; preds = %644
  %653 = add i32 %552, 256
  %654 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %653, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %655 = extractvalue %dx.types.ResRet.i32 %654, 0
  %656 = extractvalue %dx.types.ResRet.i32 %654, 1
  %657 = mul i32 %647, 288
  %658 = add i32 %657, 256
  %659 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %658, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %660 = extractvalue %dx.types.ResRet.i32 %659, 0
  %661 = extractvalue %dx.types.ResRet.i32 %659, 1
  %662 = shl i32 %655, 5
  %663 = shl i32 %656, 5
  %664 = shl i32 %660, 5
  %665 = shl i32 %661, 5
  %666 = sub i32 %627, %662
  %667 = sub i32 %628, %663
  %668 = and i32 %641, 31
  %669 = shl i32 %664, %668
  %670 = shl i32 %665, %668
  %671 = add i32 %666, %669
  %672 = add i32 %667, %670
  %673 = lshr i32 %671, %668
  %674 = lshr i32 %672, %668
  %675 = shl i32 %673, 7
  %676 = shl i32 %674, 7
  %677 = or i32 %675, 127
  %678 = or i32 %676, 127
  %679 = add i32 %552, 48
  %680 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %679, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %681 = extractvalue %dx.types.ResRet.i32 %680, 2
  %682 = bitcast i32 %681 to float
  %683 = add i32 %657, 48
  %684 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %683, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %685 = extractvalue %dx.types.ResRet.i32 %684, 2
  %686 = bitcast i32 %685 to float
  %687 = sitofp i32 %655 to float
  %688 = sitofp i32 %656 to float
  %689 = sitofp i32 %660 to float
  %690 = sitofp i32 %661 to float
  %691 = shl i32 1, %668
  %692 = uitofp i32 %691 to float
  %693 = fdiv fast float 1.000000e+00, %692
  %694 = fmul fast float %693, %687
  %695 = fmul fast float %693, %688
  %696 = fsub fast float %689, %694
  %697 = fsub fast float %690, %695
  %698 = fmul fast float %696, 2.500000e-01
  %699 = fmul fast float %697, 2.500000e-01
  %700 = fmul fast float %693, %682
  %701 = fsub fast float %686, %700
  %702 = fmul fast float %693, %616
  %703 = fmul fast float %693, %620
  %704 = fadd fast float %698, %702
  %705 = fadd fast float %699, %703
  %706 = fmul fast float %704, 1.638400e+04
  %707 = fmul fast float %705, 1.638400e+04
  %708 = fptoui float %706 to i32
  %709 = fptoui float %707 to i32
  %710 = call i32 @dx.op.binary.i32(i32 39, i32 %708, i32 %675)  ; UMax(a,b)
  %711 = call i32 @dx.op.binary.i32(i32 39, i32 %709, i32 %676)  ; UMax(a,b)
  %712 = call i32 @dx.op.binary.i32(i32 40, i32 %710, i32 %677)  ; UMin(a,b)
  %713 = call i32 @dx.op.binary.i32(i32 40, i32 %711, i32 %678)  ; UMin(a,b)
  %714 = icmp ult i32 %647, 8192
  br i1 %714, label %720, label %715

; <label>:715                                     ; preds = %652
  %716 = mul i32 %647, 21845
  %717 = add i32 %716, -178946048
  %718 = add i32 %717, %673
  %719 = add i32 %718, %676
  br label %720

; <label>:720                                     ; preds = %715, %652
  %721 = phi i32 [ %719, %715 ], [ %647, %652 ]
  %722 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %638, i32 %721, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %723 = extractvalue %dx.types.ResRet.i32 %722, 0
  %724 = and i32 %723, -2081423360
  %725 = icmp eq i32 %724, -2147483648
  %726 = zext i1 %725 to i32
  br label %727

; <label>:727                                     ; preds = %720, %644
  %728 = phi i32 [ %712, %720 ], [ %650, %644 ]
  %729 = phi i32 [ %713, %720 ], [ %651, %644 ]
  %730 = phi i32 [ %726, %720 ], [ %646, %644 ]
  %731 = phi i32 [ %723, %720 ], [ %640, %644 ]
  %732 = phi float [ %693, %720 ], [ 1.000000e+00, %644 ]
  %733 = phi float [ %701, %720 ], [ 0.000000e+00, %644 ]
  %734 = icmp eq i32 %730, 0
  br i1 %734, label %750, label %735

; <label>:735                                     ; preds = %727
  %736 = shl i32 %731, 7
  %737 = and i32 %736, 130944
  %738 = lshr i32 %731, 3
  %739 = and i32 %738, 130944
  %740 = and i32 %728, 127
  %741 = and i32 %729, 127
  %742 = or i32 %737, %740
  %743 = or i32 %739, %741
  %744 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %745 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %744, i32 0, i32 %742, i32 %743, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %746 = extractvalue %dx.types.ResRet.i32 %745, 0
  %747 = bitcast i32 %746 to float
  %748 = fsub fast float %747, %733
  %749 = fdiv fast float %748, %732
  br label %750

; <label>:750                                     ; preds = %735, %727, %636
  %751 = phi float [ %749, %735 ], [ 0.000000e+00, %727 ], [ 0.000000e+00, %636 ]
  %752 = phi i1 [ true, %735 ], [ false, %727 ], [ false, %636 ]
  %753 = fcmp fast ogt float %751, %624
  %754 = and i1 %752, %753
  %755 = select i1 %754, float 0.000000e+00, float 1.000000e+00
  br label %952

; <label>:756                                     ; preds = %464
  %757 = add i32 %469, 64
  %758 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %757, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %759 = extractvalue %dx.types.ResRet.i32 %758, 0
  %760 = extractvalue %dx.types.ResRet.i32 %758, 1
  %761 = extractvalue %dx.types.ResRet.i32 %758, 2
  %762 = extractvalue %dx.types.ResRet.i32 %758, 3
  %763 = add i32 %469, 80
  %764 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %763, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %765 = extractvalue %dx.types.ResRet.i32 %764, 0
  %766 = extractvalue %dx.types.ResRet.i32 %764, 1
  %767 = extractvalue %dx.types.ResRet.i32 %764, 2
  %768 = extractvalue %dx.types.ResRet.i32 %764, 3
  %769 = add i32 %469, 96
  %770 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %769, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %771 = extractvalue %dx.types.ResRet.i32 %770, 0
  %772 = extractvalue %dx.types.ResRet.i32 %770, 1
  %773 = extractvalue %dx.types.ResRet.i32 %770, 2
  %774 = extractvalue %dx.types.ResRet.i32 %770, 3
  %775 = add i32 %469, 112
  %776 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %775, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %777 = extractvalue %dx.types.ResRet.i32 %776, 0
  %778 = extractvalue %dx.types.ResRet.i32 %776, 1
  %779 = extractvalue %dx.types.ResRet.i32 %776, 2
  %780 = extractvalue %dx.types.ResRet.i32 %776, 3
  %781 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %475, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %782 = extractvalue %dx.types.ResRet.i32 %781, 0
  %783 = extractvalue %dx.types.ResRet.i32 %781, 1
  %784 = extractvalue %dx.types.ResRet.i32 %781, 2
  %785 = bitcast i32 %782 to float
  %786 = bitcast i32 %783 to float
  %787 = bitcast i32 %784 to float
  %788 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %476, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %789 = extractvalue %dx.types.ResRet.i32 %788, 0
  %790 = extractvalue %dx.types.ResRet.i32 %788, 1
  %791 = extractvalue %dx.types.ResRet.i32 %788, 2
  %792 = bitcast i32 %789 to float
  %793 = bitcast i32 %790 to float
  %794 = bitcast i32 %791 to float
  %795 = fsub float %785, %478
  %796 = fsub float %786, %479
  %797 = fsub float %787, %480
  %798 = fsub float %792, %482
  %799 = fsub float %793, %483
  %800 = fsub float %794, %484
  %801 = fadd float %795, %798
  %802 = fadd float %796, %799
  %803 = fadd float %797, %800
  %804 = fadd fast float %801, %92
  %805 = fadd fast float %802, %93
  %806 = fadd fast float %803, %94
  %807 = icmp eq i32 %473, 2
  br i1 %807, label %854, label %808

; <label>:808                                     ; preds = %756
  %809 = call float @dx.op.unary.f32(i32 6, float %804)  ; FAbs(value)
  %810 = call float @dx.op.unary.f32(i32 6, float %805)  ; FAbs(value)
  %811 = fcmp fast oge float %809, %810
  %812 = call float @dx.op.unary.f32(i32 6, float %806)  ; FAbs(value)
  %813 = fcmp fast oge float %809, %812
  %814 = and i1 %811, %813
  br i1 %814, label %815, label %818

; <label>:815                                     ; preds = %808
  %816 = fcmp ule float %804, 0.000000e+00
  %817 = zext i1 %816 to i32
  br label %826

; <label>:818                                     ; preds = %808
  %819 = fcmp fast ogt float %810, %812
  br i1 %819, label %820, label %823

; <label>:820                                     ; preds = %818
  %821 = fcmp fast ogt float %805, 0.000000e+00
  %822 = select i1 %821, i32 2, i32 3
  br label %826

; <label>:823                                     ; preds = %818
  %824 = fcmp fast ogt float %806, 0.000000e+00
  %825 = select i1 %824, i32 4, i32 5
  br label %826

; <label>:826                                     ; preds = %823, %820, %815
  %827 = phi i32 [ %817, %815 ], [ %822, %820 ], [ %825, %823 ]
  %828 = add i32 %827, %468
  %829 = mul i32 %828, 288
  %830 = add i32 %829, 64
  %831 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %830, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %832 = extractvalue %dx.types.ResRet.i32 %831, 0
  %833 = extractvalue %dx.types.ResRet.i32 %831, 1
  %834 = extractvalue %dx.types.ResRet.i32 %831, 2
  %835 = extractvalue %dx.types.ResRet.i32 %831, 3
  %836 = add i32 %829, 80
  %837 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %836, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %838 = extractvalue %dx.types.ResRet.i32 %837, 0
  %839 = extractvalue %dx.types.ResRet.i32 %837, 1
  %840 = extractvalue %dx.types.ResRet.i32 %837, 2
  %841 = extractvalue %dx.types.ResRet.i32 %837, 3
  %842 = add i32 %829, 96
  %843 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %842, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %844 = extractvalue %dx.types.ResRet.i32 %843, 0
  %845 = extractvalue %dx.types.ResRet.i32 %843, 1
  %846 = extractvalue %dx.types.ResRet.i32 %843, 2
  %847 = extractvalue %dx.types.ResRet.i32 %843, 3
  %848 = add i32 %829, 112
  %849 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %471, i32 %848, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %850 = extractvalue %dx.types.ResRet.i32 %849, 0
  %851 = extractvalue %dx.types.ResRet.i32 %849, 1
  %852 = extractvalue %dx.types.ResRet.i32 %849, 2
  %853 = extractvalue %dx.types.ResRet.i32 %849, 3
  br label %854

; <label>:854                                     ; preds = %826, %756
  %855 = phi i32 [ %832, %826 ], [ %759, %756 ]
  %856 = phi i32 [ %833, %826 ], [ %760, %756 ]
  %857 = phi i32 [ %834, %826 ], [ %761, %756 ]
  %858 = phi i32 [ %835, %826 ], [ %762, %756 ]
  %859 = phi i32 [ %838, %826 ], [ %765, %756 ]
  %860 = phi i32 [ %839, %826 ], [ %766, %756 ]
  %861 = phi i32 [ %840, %826 ], [ %767, %756 ]
  %862 = phi i32 [ %841, %826 ], [ %768, %756 ]
  %863 = phi i32 [ %844, %826 ], [ %771, %756 ]
  %864 = phi i32 [ %845, %826 ], [ %772, %756 ]
  %865 = phi i32 [ %846, %826 ], [ %773, %756 ]
  %866 = phi i32 [ %847, %826 ], [ %774, %756 ]
  %867 = phi i32 [ %850, %826 ], [ %777, %756 ]
  %868 = phi i32 [ %851, %826 ], [ %778, %756 ]
  %869 = phi i32 [ %852, %826 ], [ %779, %756 ]
  %870 = phi i32 [ %853, %826 ], [ %780, %756 ]
  %871 = phi i32 [ %828, %826 ], [ %468, %756 ]
  %872 = bitcast i32 %870 to float
  %873 = bitcast i32 %869 to float
  %874 = bitcast i32 %868 to float
  %875 = bitcast i32 %867 to float
  %876 = bitcast i32 %866 to float
  %877 = bitcast i32 %865 to float
  %878 = bitcast i32 %864 to float
  %879 = bitcast i32 %863 to float
  %880 = bitcast i32 %862 to float
  %881 = bitcast i32 %861 to float
  %882 = bitcast i32 %860 to float
  %883 = bitcast i32 %859 to float
  %884 = bitcast i32 %858 to float
  %885 = bitcast i32 %857 to float
  %886 = bitcast i32 %856 to float
  %887 = bitcast i32 %855 to float
  %888 = fmul fast float %887, %804
  %889 = call float @dx.op.tertiary.f32(i32 46, float %805, float %883, float %888)  ; FMad(a,b,c)
  %890 = call float @dx.op.tertiary.f32(i32 46, float %806, float %879, float %889)  ; FMad(a,b,c)
  %891 = fadd fast float %890, %875
  %892 = fmul fast float %886, %804
  %893 = call float @dx.op.tertiary.f32(i32 46, float %805, float %882, float %892)  ; FMad(a,b,c)
  %894 = call float @dx.op.tertiary.f32(i32 46, float %806, float %878, float %893)  ; FMad(a,b,c)
  %895 = fadd fast float %894, %874
  %896 = fmul fast float %885, %804
  %897 = call float @dx.op.tertiary.f32(i32 46, float %805, float %881, float %896)  ; FMad(a,b,c)
  %898 = call float @dx.op.tertiary.f32(i32 46, float %806, float %877, float %897)  ; FMad(a,b,c)
  %899 = fadd fast float %898, %873
  %900 = fmul fast float %884, %804
  %901 = call float @dx.op.tertiary.f32(i32 46, float %805, float %880, float %900)  ; FMad(a,b,c)
  %902 = call float @dx.op.tertiary.f32(i32 46, float %806, float %876, float %901)  ; FMad(a,b,c)
  %903 = fadd fast float %902, %872
  %904 = fdiv fast float %891, %903
  %905 = fdiv fast float %895, %903
  %906 = fdiv fast float %899, %903
  %907 = icmp ult i32 %871, 8192
  br i1 %907, label %918, label %908

; <label>:908                                     ; preds = %854
  %909 = fmul fast float %905, 1.280000e+02
  %910 = fptoui float %909 to i32
  %911 = fmul fast float %904, 1.280000e+02
  %912 = fptoui float %911 to i32
  %913 = mul i32 %871, 21845
  %914 = shl i32 %910, 7
  %915 = add i32 %913, -178946048
  %916 = add i32 %915, %912
  %917 = add i32 %916, %914
  br label %918

; <label>:918                                     ; preds = %908, %854
  %919 = phi i32 [ %917, %908 ], [ %871, %854 ]
  %920 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %921 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %920, i32 %919, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %922 = extractvalue %dx.types.ResRet.i32 %921, 0
  %923 = lshr i32 %922, 20
  %924 = icmp slt i32 %922, 0
  %925 = and i32 %923, 31
  %926 = lshr i32 16384, %925
  %927 = uitofp i32 %926 to float
  %928 = select i1 %907, float 1.280000e+02, float %927
  br i1 %924, label %929, label %946

; <label>:929                                     ; preds = %918
  %930 = lshr i32 %922, 3
  %931 = and i32 %930, 130944
  %932 = fmul fast float %928, %905
  %933 = fptoui float %932 to i32
  %934 = and i32 %933, 127
  %935 = or i32 %934, %931
  %936 = shl i32 %922, 7
  %937 = and i32 %936, 130944
  %938 = fmul fast float %928, %904
  %939 = fptoui float %938 to i32
  %940 = and i32 %939, 127
  %941 = or i32 %940, %937
  %942 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %943 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %942, i32 0, i32 %941, i32 %935, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %944 = extractvalue %dx.types.ResRet.i32 %943, 0
  %945 = bitcast i32 %944 to float
  br label %946

; <label>:946                                     ; preds = %929, %918
  %947 = phi float [ %945, %929 ], [ 0.000000e+00, %918 ]
  %948 = phi i1 [ true, %929 ], [ false, %918 ]
  %949 = fcmp fast ogt float %947, %906
  %950 = and i1 %948, %949
  %951 = select i1 %950, float 0.000000e+00, float 1.000000e+00
  br label %952

; <label>:952                                     ; preds = %946, %750, %485
  %953 = phi float [ 1.000000e+00, %485 ], [ %755, %750 ], [ %951, %946 ]
  %954 = fmul fast float %953, %466
  %955 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %956 = extractvalue %dx.types.CBufRet.i32 %955, 0
  %957 = extractvalue %dx.types.CBufRet.i32 %955, 1
  %958 = icmp eq i32 %956, 0
  %959 = icmp eq i32 %957, 0
  %960 = or i1 %958, %959
  br i1 %960, label %1331, label %961

; <label>:961                                     ; preds = %952
  %962 = extractvalue %dx.types.CBufRet.i32 %955, 2
  %963 = icmp sgt i32 %962, 1
  br i1 %963, label %964, label %995

; <label>:964                                     ; preds = %961
  %965 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %966 = extractvalue %dx.types.CBufRet.f32 %965, 0
  %967 = extractvalue %dx.types.CBufRet.f32 %965, 1
  %968 = extractvalue %dx.types.CBufRet.f32 %965, 2
  %969 = fsub fast float %92, %966
  %970 = fsub fast float %93, %967
  %971 = fsub fast float %94, %968
  %972 = getelementptr inbounds [3 x float], [3 x float]* %27, i32 0, i32 0
  store float %969, float* %972, align 4
  %973 = getelementptr inbounds [3 x float], [3 x float]* %27, i32 0, i32 1
  store float %970, float* %973, align 4
  %974 = getelementptr inbounds [3 x float], [3 x float]* %27, i32 0, i32 2
  store float %971, float* %974, align 4
  %975 = call float @dx.op.unary.f32(i32 6, float %969)  ; FAbs(value)
  %976 = call float @dx.op.unary.f32(i32 6, float %970)  ; FAbs(value)
  %977 = call float @dx.op.unary.f32(i32 6, float %971)  ; FAbs(value)
  %978 = getelementptr inbounds [3 x float], [3 x float]* %28, i32 0, i32 0
  store float %975, float* %978, align 4
  %979 = getelementptr inbounds [3 x float], [3 x float]* %28, i32 0, i32 1
  store float %976, float* %979, align 4
  %980 = getelementptr inbounds [3 x float], [3 x float]* %28, i32 0, i32 2
  store float %977, float* %980, align 4
  %981 = fcmp fast ogt float %976, %975
  %982 = zext i1 %981 to i32
  %983 = getelementptr [3 x float], [3 x float]* %28, i32 0, i32 %982
  %984 = load float, float* %983, align 4, !tbaa !48
  %985 = fcmp fast ogt float %977, %984
  %986 = select i1 %985, i32 2, i32 %982
  %987 = getelementptr [3 x float], [3 x float]* %27, i32 0, i32 %986
  %988 = load float, float* %987, align 4, !tbaa !48
  %989 = fcmp fast ogt float %988, 0.000000e+00
  %990 = fcmp uge float %988, 0.000000e+00
  %991 = and i1 %989, %990
  %992 = zext i1 %991 to i32
  %993 = shl nuw nsw i32 %986, 1
  %994 = or i32 %992, %993
  br label %995

; <label>:995                                     ; preds = %964, %961
  %996 = phi i32 [ %994, %964 ], [ 0, %961 ]
  %997 = shl nsw i32 %996, 2
  %998 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 %997)  ; CBufferLoadLegacy(handle,regIndex)
  %999 = extractvalue %dx.types.CBufRet.f32 %998, 3
  %1000 = or i32 %997, 1
  %1001 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 %1000)  ; CBufferLoadLegacy(handle,regIndex)
  %1002 = extractvalue %dx.types.CBufRet.f32 %1001, 3
  %1003 = add nsw i32 %1000, 1
  %1004 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 %1003)  ; CBufferLoadLegacy(handle,regIndex)
  %1005 = extractvalue %dx.types.CBufRet.f32 %1004, 3
  %1006 = or i32 %997, 3
  %1007 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 %1006)  ; CBufferLoadLegacy(handle,regIndex)
  %1008 = extractvalue %dx.types.CBufRet.f32 %1007, 3
  %1009 = fmul fast float %999, %92
  %1010 = call float @dx.op.tertiary.f32(i32 46, float %93, float %1002, float %1009)  ; FMad(a,b,c)
  %1011 = call float @dx.op.tertiary.f32(i32 46, float %94, float %1005, float %1010)  ; FMad(a,b,c)
  %1012 = fadd fast float %1011, %1008
  %1013 = fcmp fast ogt float %1012, 0.000000e+00
  br i1 %1013, label %1014, label %1331

; <label>:1014                                    ; preds = %995
  %1015 = extractvalue %dx.types.CBufRet.f32 %1007, 2
  %1016 = extractvalue %dx.types.CBufRet.f32 %1004, 2
  %1017 = extractvalue %dx.types.CBufRet.f32 %1001, 2
  %1018 = extractvalue %dx.types.CBufRet.f32 %998, 2
  %1019 = fmul fast float %1018, %92
  %1020 = call float @dx.op.tertiary.f32(i32 46, float %93, float %1017, float %1019)  ; FMad(a,b,c)
  %1021 = call float @dx.op.tertiary.f32(i32 46, float %94, float %1016, float %1020)  ; FMad(a,b,c)
  %1022 = fadd fast float %1021, %1015
  %1023 = extractvalue %dx.types.CBufRet.f32 %1007, 1
  %1024 = extractvalue %dx.types.CBufRet.f32 %1004, 1
  %1025 = extractvalue %dx.types.CBufRet.f32 %1001, 1
  %1026 = extractvalue %dx.types.CBufRet.f32 %998, 1
  %1027 = fmul fast float %1026, %92
  %1028 = call float @dx.op.tertiary.f32(i32 46, float %93, float %1025, float %1027)  ; FMad(a,b,c)
  %1029 = call float @dx.op.tertiary.f32(i32 46, float %94, float %1024, float %1028)  ; FMad(a,b,c)
  %1030 = fadd fast float %1029, %1023
  %1031 = extractvalue %dx.types.CBufRet.f32 %1007, 0
  %1032 = extractvalue %dx.types.CBufRet.f32 %1004, 0
  %1033 = extractvalue %dx.types.CBufRet.f32 %1001, 0
  %1034 = extractvalue %dx.types.CBufRet.f32 %998, 0
  %1035 = fmul fast float %1034, %92
  %1036 = call float @dx.op.tertiary.f32(i32 46, float %93, float %1033, float %1035)  ; FMad(a,b,c)
  %1037 = call float @dx.op.tertiary.f32(i32 46, float %94, float %1032, float %1036)  ; FMad(a,b,c)
  %1038 = fadd fast float %1037, %1031
  %1039 = fdiv fast float %1038, %1012
  %1040 = fdiv fast float %1030, %1012
  %1041 = fdiv fast float %1022, %1012
  %1042 = fcmp fast ogt float %1039, 0.000000e+00
  %1043 = fcmp fast ogt float %1040, 0.000000e+00
  %1044 = fcmp fast ogt float %1041, 0.000000e+00
  %1045 = and i1 %1042, %1043
  %1046 = and i1 %1045, %1044
  %1047 = fcmp fast olt float %1039, 1.000000e+00
  %1048 = fcmp fast olt float %1040, 1.000000e+00
  %1049 = and i1 %1047, %1048
  %1050 = or i1 %1049, %1046
  br i1 %1050, label %1051, label %1331

; <label>:1051                                    ; preds = %1014
  %1052 = add i32 %956, -1
  %1053 = add i32 %957, -1
  %1054 = sitofp i32 %1052 to float
  %1055 = sitofp i32 %1053 to float
  %1056 = sitofp i32 %956 to float
  %1057 = sitofp i32 %957 to float
  %1058 = fmul fast float %1056, %1039
  %1059 = fmul fast float %1057, %1040
  %1060 = call float @dx.op.binary.f32(i32 35, float %1058, float 0.000000e+00)  ; FMax(a,b)
  %1061 = call float @dx.op.binary.f32(i32 35, float %1059, float 0.000000e+00)  ; FMax(a,b)
  %1062 = call float @dx.op.binary.f32(i32 36, float %1060, float %1054)  ; FMin(a,b)
  %1063 = call float @dx.op.binary.f32(i32 36, float %1061, float %1055)  ; FMin(a,b)
  %1064 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %1065 = extractvalue %dx.types.CBufRet.f32 %1064, 0
  %1066 = extractvalue %dx.types.CBufRet.f32 %1064, 1
  %1067 = extractvalue %dx.types.CBufRet.f32 %1064, 2
  %1068 = fsub fast float %92, %1065
  %1069 = fsub fast float %93, %1066
  %1070 = fsub fast float %94, %1067
  %1071 = fmul fast float %1068, %1068
  %1072 = fmul fast float %1069, %1069
  %1073 = fadd fast float %1071, %1072
  %1074 = fmul fast float %1070, %1070
  %1075 = fadd fast float %1073, %1074
  %1076 = call float @dx.op.unary.f32(i32 24, float %1075)  ; Sqrt(value)
  %1077 = fadd fast float %1076, -5.000000e-01
  %1078 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 27)  ; CBufferLoadLegacy(handle,regIndex)
  %1079 = extractvalue %dx.types.CBufRet.i32 %1078, 1
  %1080 = icmp eq i32 %1079, 0
  br i1 %1080, label %1089, label %1081

; <label>:1081                                    ; preds = %1051
  %1082 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %1083 = extractvalue %dx.types.CBufRet.f32 %1082, 0
  %1084 = extractvalue %dx.types.CBufRet.f32 %1082, 1
  %1085 = extractvalue %dx.types.CBufRet.f32 %1082, 2
  %1086 = call float @dx.op.dot3.f32(i32 55, float %1083, float %1084, float %1085, float %92, float %93, float %94)  ; Dot3(ax,ay,az,bx,by,bz)
  %1087 = extractvalue %dx.types.CBufRet.f32 %1082, 3
  %1088 = fadd fast float %1087, %1086
  br label %1089

; <label>:1089                                    ; preds = %1081, %1051
  %1090 = phi float [ %1088, %1081 ], [ %1077, %1051 ]
  %1091 = call float @dx.op.binary.f32(i32 35, float %1062, float 0.000000e+00)  ; FMax(a,b)
  %1092 = call float @dx.op.binary.f32(i32 35, float %1063, float 0.000000e+00)  ; FMax(a,b)
  %1093 = call float @dx.op.binary.f32(i32 36, float %1091, float %1054)  ; FMin(a,b)
  %1094 = call float @dx.op.binary.f32(i32 36, float %1092, float %1055)  ; FMin(a,b)
  %1095 = fadd fast float %1063, 1.000000e+00
  %1096 = call float @dx.op.binary.f32(i32 35, float %1095, float 0.000000e+00)  ; FMax(a,b)
  %1097 = call float @dx.op.binary.f32(i32 36, float %1096, float %1055)  ; FMin(a,b)
  %1098 = fadd fast float %1062, 1.000000e+00
  %1099 = call float @dx.op.binary.f32(i32 35, float %1098, float 0.000000e+00)  ; FMax(a,b)
  %1100 = call float @dx.op.binary.f32(i32 36, float %1099, float %1054)  ; FMin(a,b)
  %1101 = fptosi float %1093 to i32
  %1102 = fptosi float %1094 to i32
  %1103 = fptosi float %1097 to i32
  %1104 = fptosi float %1100 to i32
  %1105 = mul i32 %956, %996
  %1106 = mul i32 %1105, %957
  %1107 = mul i32 %956, %1102
  %1108 = add i32 %1106, %1101
  %1109 = add i32 %1108, %1107
  %1110 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 12, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %1111 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1110, i32 %1109, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1112 = extractvalue %dx.types.ResRet.i32 %1111, 0
  %1113 = lshr i32 %1112, 6
  %1114 = and i32 %1112, 63
  %1115 = icmp eq i32 %1114, 0
  br i1 %1115, label %1145, label %1116

; <label>:1116                                    ; preds = %1089
  %1117 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1118 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1117, i32 %1113, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1119 = extractvalue %dx.types.ResRet.i32 %1118, 0
  %1120 = and i32 %1119, 65535
  %1121 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1120)  ; LegacyF16ToF32(value)
  %1122 = ashr i32 %1119, 16
  %1123 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1122)  ; LegacyF16ToF32(value)
  %1124 = icmp ugt i32 %1114, 1
  br i1 %1124, label %1125, label %1145

; <label>:1125                                    ; preds = %1116
  br label %1126

; <label>:1126                                    ; preds = %1139, %1125
  %1127 = phi float [ %1137, %1139 ], [ %1123, %1125 ]
  %1128 = phi float [ %1135, %1139 ], [ %1121, %1125 ]
  %1129 = phi i32 [ %1140, %1139 ], [ 1, %1125 ]
  %1130 = add nuw nsw i32 %1129, %1113
  %1131 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1132 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1131, i32 %1130, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1133 = extractvalue %dx.types.ResRet.i32 %1132, 0
  %1134 = and i32 %1133, 65535
  %1135 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1134)  ; LegacyF16ToF32(value)
  %1136 = ashr i32 %1133, 16
  %1137 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1136)  ; LegacyF16ToF32(value)
  %1138 = fcmp fast olt float %1090, %1135
  br i1 %1138, label %1142, label %1139

; <label>:1139                                    ; preds = %1126
  %1140 = add nuw nsw i32 %1129, 1
  %1141 = icmp slt i32 %1140, %1114
  br i1 %1141, label %1126, label %1142

; <label>:1142                                    ; preds = %1139, %1126
  %1143 = phi float [ %1137, %1139 ], [ %1127, %1126 ]
  %1144 = phi float [ %1135, %1139 ], [ %1128, %1126 ]
  br label %1145

; <label>:1145                                    ; preds = %1142, %1116, %1089
  %1146 = phi float [ 1.000000e+00, %1089 ], [ 1.000000e+00, %1116 ], [ %1137, %1142 ]
  %1147 = phi float [ 1.000000e+00, %1089 ], [ %1123, %1116 ], [ %1143, %1142 ]
  %1148 = phi float [ 0.000000e+00, %1089 ], [ 0.000000e+00, %1116 ], [ %1135, %1142 ]
  %1149 = phi float [ 0.000000e+00, %1089 ], [ %1121, %1116 ], [ %1144, %1142 ]
  %1150 = fcmp fast ogt float %1090, %1149
  br i1 %1150, label %1151, label %1160

; <label>:1151                                    ; preds = %1145
  %1152 = fsub fast float %1090, %1149
  %1153 = fsub fast float %1148, %1149
  %1154 = fdiv fast float 1.000000e+00, %1153
  %1155 = fmul fast float %1154, %1152
  %1156 = call float @dx.op.unary.f32(i32 7, float %1155)  ; Saturate(value)
  %1157 = fsub fast float %1146, %1147
  %1158 = fmul fast float %1156, %1157
  %1159 = fadd fast float %1158, %1147
  br label %1160

; <label>:1160                                    ; preds = %1151, %1145
  %1161 = phi float [ %1159, %1151 ], [ 1.000000e+00, %1145 ]
  %1162 = mul i32 %956, %1103
  %1163 = add i32 %1108, %1162
  %1164 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1110, i32 %1163, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1165 = extractvalue %dx.types.ResRet.i32 %1164, 0
  %1166 = lshr i32 %1165, 6
  %1167 = and i32 %1165, 63
  %1168 = icmp eq i32 %1167, 0
  br i1 %1168, label %1198, label %1169

; <label>:1169                                    ; preds = %1160
  %1170 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1171 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1170, i32 %1166, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1172 = extractvalue %dx.types.ResRet.i32 %1171, 0
  %1173 = and i32 %1172, 65535
  %1174 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1173)  ; LegacyF16ToF32(value)
  %1175 = ashr i32 %1172, 16
  %1176 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1175)  ; LegacyF16ToF32(value)
  %1177 = icmp ugt i32 %1167, 1
  br i1 %1177, label %1178, label %1198

; <label>:1178                                    ; preds = %1169
  br label %1179

; <label>:1179                                    ; preds = %1192, %1178
  %1180 = phi float [ %1190, %1192 ], [ %1176, %1178 ]
  %1181 = phi float [ %1188, %1192 ], [ %1174, %1178 ]
  %1182 = phi i32 [ %1193, %1192 ], [ 1, %1178 ]
  %1183 = add nuw nsw i32 %1182, %1166
  %1184 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1185 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1184, i32 %1183, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1186 = extractvalue %dx.types.ResRet.i32 %1185, 0
  %1187 = and i32 %1186, 65535
  %1188 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1187)  ; LegacyF16ToF32(value)
  %1189 = ashr i32 %1186, 16
  %1190 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1189)  ; LegacyF16ToF32(value)
  %1191 = fcmp fast olt float %1090, %1188
  br i1 %1191, label %1195, label %1192

; <label>:1192                                    ; preds = %1179
  %1193 = add nuw nsw i32 %1182, 1
  %1194 = icmp slt i32 %1193, %1167
  br i1 %1194, label %1179, label %1195

; <label>:1195                                    ; preds = %1192, %1179
  %1196 = phi float [ %1190, %1192 ], [ %1180, %1179 ]
  %1197 = phi float [ %1188, %1192 ], [ %1181, %1179 ]
  br label %1198

; <label>:1198                                    ; preds = %1195, %1169, %1160
  %1199 = phi float [ 1.000000e+00, %1160 ], [ 1.000000e+00, %1169 ], [ %1190, %1195 ]
  %1200 = phi float [ 1.000000e+00, %1160 ], [ %1176, %1169 ], [ %1196, %1195 ]
  %1201 = phi float [ 0.000000e+00, %1160 ], [ 0.000000e+00, %1169 ], [ %1188, %1195 ]
  %1202 = phi float [ 0.000000e+00, %1160 ], [ %1174, %1169 ], [ %1197, %1195 ]
  %1203 = fcmp fast ogt float %1090, %1202
  br i1 %1203, label %1204, label %1213

; <label>:1204                                    ; preds = %1198
  %1205 = fsub fast float %1090, %1202
  %1206 = fsub fast float %1201, %1202
  %1207 = fdiv fast float 1.000000e+00, %1206
  %1208 = fmul fast float %1207, %1205
  %1209 = call float @dx.op.unary.f32(i32 7, float %1208)  ; Saturate(value)
  %1210 = fsub fast float %1199, %1200
  %1211 = fmul fast float %1209, %1210
  %1212 = fadd fast float %1211, %1200
  br label %1213

; <label>:1213                                    ; preds = %1204, %1198
  %1214 = phi float [ %1212, %1204 ], [ 1.000000e+00, %1198 ]
  %1215 = add i32 %1106, %1104
  %1216 = add i32 %1215, %1107
  %1217 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1110, i32 %1216, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1218 = extractvalue %dx.types.ResRet.i32 %1217, 0
  %1219 = lshr i32 %1218, 6
  %1220 = and i32 %1218, 63
  %1221 = icmp eq i32 %1220, 0
  br i1 %1221, label %1251, label %1222

; <label>:1222                                    ; preds = %1213
  %1223 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1224 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1223, i32 %1219, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1225 = extractvalue %dx.types.ResRet.i32 %1224, 0
  %1226 = and i32 %1225, 65535
  %1227 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1226)  ; LegacyF16ToF32(value)
  %1228 = ashr i32 %1225, 16
  %1229 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1228)  ; LegacyF16ToF32(value)
  %1230 = icmp ugt i32 %1220, 1
  br i1 %1230, label %1231, label %1251

; <label>:1231                                    ; preds = %1222
  br label %1232

; <label>:1232                                    ; preds = %1245, %1231
  %1233 = phi float [ %1243, %1245 ], [ %1229, %1231 ]
  %1234 = phi float [ %1241, %1245 ], [ %1227, %1231 ]
  %1235 = phi i32 [ %1246, %1245 ], [ 1, %1231 ]
  %1236 = add nuw nsw i32 %1235, %1219
  %1237 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1238 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1237, i32 %1236, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1239 = extractvalue %dx.types.ResRet.i32 %1238, 0
  %1240 = and i32 %1239, 65535
  %1241 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1240)  ; LegacyF16ToF32(value)
  %1242 = ashr i32 %1239, 16
  %1243 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1242)  ; LegacyF16ToF32(value)
  %1244 = fcmp fast olt float %1090, %1241
  br i1 %1244, label %1248, label %1245

; <label>:1245                                    ; preds = %1232
  %1246 = add nuw nsw i32 %1235, 1
  %1247 = icmp slt i32 %1246, %1220
  br i1 %1247, label %1232, label %1248

; <label>:1248                                    ; preds = %1245, %1232
  %1249 = phi float [ %1243, %1245 ], [ %1233, %1232 ]
  %1250 = phi float [ %1241, %1245 ], [ %1234, %1232 ]
  br label %1251

; <label>:1251                                    ; preds = %1248, %1222, %1213
  %1252 = phi float [ 1.000000e+00, %1213 ], [ 1.000000e+00, %1222 ], [ %1243, %1248 ]
  %1253 = phi float [ 1.000000e+00, %1213 ], [ %1229, %1222 ], [ %1249, %1248 ]
  %1254 = phi float [ 0.000000e+00, %1213 ], [ 0.000000e+00, %1222 ], [ %1241, %1248 ]
  %1255 = phi float [ 0.000000e+00, %1213 ], [ %1227, %1222 ], [ %1250, %1248 ]
  %1256 = fcmp fast ogt float %1090, %1255
  br i1 %1256, label %1257, label %1266

; <label>:1257                                    ; preds = %1251
  %1258 = fsub fast float %1090, %1255
  %1259 = fsub fast float %1254, %1255
  %1260 = fdiv fast float 1.000000e+00, %1259
  %1261 = fmul fast float %1260, %1258
  %1262 = call float @dx.op.unary.f32(i32 7, float %1261)  ; Saturate(value)
  %1263 = fsub fast float %1252, %1253
  %1264 = fmul fast float %1262, %1263
  %1265 = fadd fast float %1264, %1253
  br label %1266

; <label>:1266                                    ; preds = %1257, %1251
  %1267 = phi float [ %1265, %1257 ], [ 1.000000e+00, %1251 ]
  %1268 = add i32 %1215, %1162
  %1269 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1110, i32 %1268, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1270 = extractvalue %dx.types.ResRet.i32 %1269, 0
  %1271 = lshr i32 %1270, 6
  %1272 = and i32 %1270, 63
  %1273 = icmp eq i32 %1272, 0
  br i1 %1273, label %1303, label %1274

; <label>:1274                                    ; preds = %1266
  %1275 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1276 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1275, i32 %1271, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1277 = extractvalue %dx.types.ResRet.i32 %1276, 0
  %1278 = and i32 %1277, 65535
  %1279 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1278)  ; LegacyF16ToF32(value)
  %1280 = ashr i32 %1277, 16
  %1281 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1280)  ; LegacyF16ToF32(value)
  %1282 = icmp ugt i32 %1272, 1
  br i1 %1282, label %1283, label %1303

; <label>:1283                                    ; preds = %1274
  br label %1284

; <label>:1284                                    ; preds = %1297, %1283
  %1285 = phi float [ %1295, %1297 ], [ %1281, %1283 ]
  %1286 = phi float [ %1293, %1297 ], [ %1279, %1283 ]
  %1287 = phi i32 [ %1298, %1297 ], [ 1, %1283 ]
  %1288 = add nuw nsw i32 %1287, %1271
  %1289 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1290 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1289, i32 %1288, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1291 = extractvalue %dx.types.ResRet.i32 %1290, 0
  %1292 = and i32 %1291, 65535
  %1293 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1292)  ; LegacyF16ToF32(value)
  %1294 = ashr i32 %1291, 16
  %1295 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1294)  ; LegacyF16ToF32(value)
  %1296 = fcmp fast olt float %1090, %1293
  br i1 %1296, label %1300, label %1297

; <label>:1297                                    ; preds = %1284
  %1298 = add nuw nsw i32 %1287, 1
  %1299 = icmp slt i32 %1298, %1272
  br i1 %1299, label %1284, label %1300

; <label>:1300                                    ; preds = %1297, %1284
  %1301 = phi float [ %1295, %1297 ], [ %1285, %1284 ]
  %1302 = phi float [ %1293, %1297 ], [ %1286, %1284 ]
  br label %1303

; <label>:1303                                    ; preds = %1300, %1274, %1266
  %1304 = phi float [ 1.000000e+00, %1266 ], [ 1.000000e+00, %1274 ], [ %1295, %1300 ]
  %1305 = phi float [ 1.000000e+00, %1266 ], [ %1281, %1274 ], [ %1301, %1300 ]
  %1306 = phi float [ 0.000000e+00, %1266 ], [ 0.000000e+00, %1274 ], [ %1293, %1300 ]
  %1307 = phi float [ 0.000000e+00, %1266 ], [ %1279, %1274 ], [ %1302, %1300 ]
  %1308 = fcmp fast ogt float %1090, %1307
  br i1 %1308, label %1309, label %1318

; <label>:1309                                    ; preds = %1303
  %1310 = fsub fast float %1090, %1307
  %1311 = fsub fast float %1306, %1307
  %1312 = fdiv fast float 1.000000e+00, %1311
  %1313 = fmul fast float %1312, %1310
  %1314 = call float @dx.op.unary.f32(i32 7, float %1313)  ; Saturate(value)
  %1315 = fsub fast float %1304, %1305
  %1316 = fmul fast float %1314, %1315
  %1317 = fadd fast float %1316, %1305
  br label %1318

; <label>:1318                                    ; preds = %1309, %1303
  %1319 = phi float [ %1317, %1309 ], [ 1.000000e+00, %1303 ]
  %1320 = call float @dx.op.unary.f32(i32 22, float %1062)  ; Frc(value)
  %1321 = call float @dx.op.unary.f32(i32 22, float %1063)  ; Frc(value)
  %1322 = fsub fast float %1267, %1161
  %1323 = fmul fast float %1320, %1322
  %1324 = fadd fast float %1323, %1161
  %1325 = fsub fast float %1319, %1214
  %1326 = fmul fast float %1320, %1325
  %1327 = fadd fast float %1326, %1214
  %1328 = fsub fast float %1327, %1324
  %1329 = fmul fast float %1328, %1321
  %1330 = fadd fast float %1329, %1324
  br label %1331

; <label>:1331                                    ; preds = %1318, %1014, %995, %952
  %1332 = phi float [ 1.000000e+00, %952 ], [ %1330, %1318 ], [ 1.000000e+00, %1014 ], [ 1.000000e+00, %995 ]
  %1333 = fmul fast float %954, %1332
  %1334 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %18, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1335 = extractvalue %dx.types.CBufRet.f32 %1334, 0
  %1336 = extractvalue %dx.types.CBufRet.f32 %1334, 1
  %1337 = extractvalue %dx.types.CBufRet.f32 %1334, 2
  %1338 = extractvalue %dx.types.CBufRet.f32 %1334, 3
  %1339 = fmul fast float %1336, %1335
  %1340 = fmul fast float %1337, %1335
  %1341 = fmul fast float %1338, %1335
  %1342 = call float @dx.op.binary.f32(i32 35, float %1339, float 0.000000e+00)  ; FMax(a,b)
  %1343 = call float @dx.op.binary.f32(i32 35, float %1340, float 0.000000e+00)  ; FMax(a,b)
  %1344 = call float @dx.op.binary.f32(i32 35, float %1341, float 0.000000e+00)  ; FMax(a,b)
  %1345 = call float @dx.op.dot3.f32(i32 55, float %1342, float %1343, float %1344, float 0x3FD554C980000000, float 0x3FD554C980000000, float 0x3FD554C980000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1346 = fmul fast float %1333, %1345
  %1347 = icmp eq i32 %80, 1
  br i1 %1347, label %1348, label %1377

; <label>:1348                                    ; preds = %1331
  %1349 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 157)  ; CBufferLoadLegacy(handle,regIndex)
  %1350 = extractvalue %dx.types.CBufRet.f32 %1349, 3
  %1351 = fmul fast float %1350, 4.000000e+00
  %1352 = fadd fast float %1351, 1.000000e+00
  %1353 = fmul fast float %1352, %25
  %1354 = fmul fast float %1352, %26
  %1355 = fmul fast float %53, %1352
  %1356 = fmul fast float %1350, 2.000000e+00
  %1357 = fsub fast float -5.000000e-01, %1356
  %1358 = fadd fast float %1357, %1353
  %1359 = fadd fast float %1357, %1354
  %1360 = fadd fast float %1357, %1355
  %1361 = call float @dx.op.unary.f32(i32 6, float %1358)  ; FAbs(value)
  %1362 = call float @dx.op.unary.f32(i32 6, float %1359)  ; FAbs(value)
  %1363 = call float @dx.op.unary.f32(i32 6, float %1360)  ; FAbs(value)
  %1364 = fsub fast float 5.000000e-01, %1361
  %1365 = fsub fast float 5.000000e-01, %1362
  %1366 = fsub fast float 5.000000e-01, %1363
  %1367 = fmul fast float %1364, 1.000000e+01
  %1368 = fmul fast float %1365, 1.000000e+01
  %1369 = fmul fast float %1366, 1.000000e+01
  %1370 = call float @dx.op.unary.f32(i32 7, float %1367)  ; Saturate(value)
  %1371 = call float @dx.op.unary.f32(i32 7, float %1368)  ; Saturate(value)
  %1372 = call float @dx.op.unary.f32(i32 7, float %1369)  ; Saturate(value)
  %1373 = fmul fast float %1371, %1370
  %1374 = fmul fast float %1373, %1372
  %1375 = fmul fast float %1374, %140
  %1376 = fmul fast float %1374, %1346
  br label %1377

; <label>:1377                                    ; preds = %1348, %1331
  %1378 = phi float [ %1375, %1348 ], [ %140, %1331 ]
  %1379 = phi float [ %1376, %1348 ], [ %1346, %1331 ]
  %1380 = extractvalue %dx.types.CBufRet.f32 %109, 0
  %1381 = extractvalue %dx.types.CBufRet.f32 %109, 1
  %1382 = extractvalue %dx.types.CBufRet.f32 %109, 2
  %1383 = fmul fast float %1378, 0x3FD45F3060000000
  %1384 = fmul fast float %1383, %1379
  %1385 = fmul fast float %1384, %1380
  %1386 = fmul fast float %1384, %1381
  %1387 = fmul fast float %1384, %1382
  %1388 = fmul fast float %77, 0xBFDF454580000000
  %1389 = fmul fast float %78, 0x3FDF454580000000
  %1390 = fmul fast float %76, 0xBFDF454580000000
  %1391 = fmul fast float %1385, 0x3FD20DD820000000
  %1392 = fmul fast float %1385, %1388
  %1393 = fmul fast float %1385, %1389
  %1394 = fmul fast float %1385, %1390
  %1395 = fmul fast float %1386, 0x3FD20DD820000000
  %1396 = fmul fast float %1386, %1388
  %1397 = fmul fast float %1386, %1389
  %1398 = fmul fast float %1386, %1390
  %1399 = fmul fast float %1387, 0x3FD20DD820000000
  %1400 = fmul fast float %1387, %1388
  %1401 = fmul fast float %1387, %1389
  %1402 = fmul fast float %1387, %1390
  %1403 = call float @dx.op.dot3.f32(i32 55, float %1392, float %1396, float %1400, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1404 = call float @dx.op.dot3.f32(i32 55, float %1393, float %1397, float %1401, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1405 = call float @dx.op.dot3.f32(i32 55, float %1394, float %1398, float %1402, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %1391)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %1395)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %1399)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %1403)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %1404)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %1405)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind
declare void @dx.op.discard(i32, i1) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleCmpLevelZero.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!29}
!dx.entryPoints = !{!30}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !18, !25}
!5 = !{!6, !7, !9, !11, !13, !14, !16, !17}
!6 = !{i32 0, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 0, i32 1, i32 11, i32 0, null}
!7 = !{i32 1, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !8}
!8 = !{i32 1, i32 4}
!9 = !{i32 2, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 7, i32 0, !10}
!10 = !{i32 0, i32 5}
!11 = !{i32 3, %"class.StructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !12}
!12 = !{i32 1, i32 8}
!13 = !{i32 4, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !8}
!14 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !15}
!15 = !{i32 0, i32 9}
!16 = !{i32 6, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 5, i32 0, !15}
!17 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !15}
!18 = !{!19, !20, !21, !22, !23, !24}
!19 = !{i32 0, %"hostlayout.$Globals"* undef, !"", i32 0, i32 0, i32 1, i32 728, null}
!20 = !{i32 1, %hostlayout.View* undef, !"", i32 0, i32 1, i32 1, i32 5724, null}
!21 = !{i32 2, %DeferredLightUniforms* undef, !"", i32 0, i32 2, i32 1, i32 164, null}
!22 = !{i32 3, %VirtualShadowMap* undef, !"", i32 0, i32 3, i32 1, i32 156, null}
!23 = !{i32 4, %hostlayout.AVSM* undef, !"", i32 0, i32 4, i32 1, i32 460, null}
!24 = !{i32 5, %Material* undef, !"", i32 0, i32 5, i32 1, i32 60, null}
!25 = !{!26, !27, !28}
!26 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!27 = !{i32 1, %struct.SamplerComparisonState* undef, !"", i32 0, i32 1, i32 1, i32 1, null}
!28 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!29 = !{[11 x i32] [i32 9, i32 8, i32 119, i32 119, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 119]}
!30 = !{void ()* @InjectMainPS, !"InjectMainPS", !31, !4, !44}
!31 = !{!32, !39, null}
!32 = !{!33, !36, !37}
!33 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !34, i8 4, i32 1, i8 2, i32 0, i8 0, !35}
!34 = !{i32 0}
!35 = !{i32 3, i32 3}
!36 = !{i32 1, !"SV_Position", i8 9, i8 3, !34, i8 4, i32 1, i8 4, i32 1, i8 0, null}
!37 = !{i32 2, !"SV_RenderTargetArrayIndex", i8 5, i8 4, !34, i8 1, i32 1, i8 1, i32 2, i8 0, !38}
!38 = !{i32 3, i32 1}
!39 = !{!40, !42}
!40 = !{i32 0, !"SV_Target", i8 9, i8 16, !34, i8 0, i32 1, i8 4, i32 0, i8 0, !41}
!41 = !{i32 3, i32 15}
!42 = !{i32 1, !"SV_Target", i8 9, i8 16, !43, i8 0, i32 1, i8 4, i32 1, i8 0, !41}
!43 = !{i32 1}
!44 = !{i32 0, i64 68719476752, i32 5, !34}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 1}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 1}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 1}
!48 = !{!49, !49, i64 0}
!49 = !{!"float", !50, i64 0}
!50 = !{!"omnipotent char", !51, i64 0}
!51 = !{!"Simple C/C++ TBAA"}
